// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: unix/ibus/ibus_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_unix_2fibus_2fibus_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_unix_2fibus_2fibus_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_unix_2fibus_2fibus_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_unix_2fibus_2fibus_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_unix_2fibus_2fibus_5fconfig_2eproto;
namespace mozc {
namespace ibus {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class Engine;
class EngineDefaultTypeInternal;
extern EngineDefaultTypeInternal _Engine_default_instance_;
}  // namespace ibus
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::ibus::Config* Arena::CreateMaybeMessage<::mozc::ibus::Config>(Arena*);
template<> ::mozc::ibus::Engine* Arena::CreateMaybeMessage<::mozc::ibus::Engine>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace ibus {

// ===================================================================

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.ibus.Config) */ {
 public:
  inline Config() : Config(nullptr) {};
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.ibus.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_unix_2fibus_2fibus_5fconfig_2eproto);
    return ::descriptor_table_unix_2fibus_2fibus_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnginesFieldNumber = 1,
  };
  // repeated .mozc.ibus.Engine engines = 1;
  int engines_size() const;
  private:
  int _internal_engines_size() const;
  public:
  void clear_engines();
  ::mozc::ibus::Engine* mutable_engines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::ibus::Engine >*
      mutable_engines();
  private:
  const ::mozc::ibus::Engine& _internal_engines(int index) const;
  ::mozc::ibus::Engine* _internal_add_engines();
  public:
  const ::mozc::ibus::Engine& engines(int index) const;
  ::mozc::ibus::Engine* add_engines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::ibus::Engine >&
      engines() const;

  // @@protoc_insertion_point(class_scope:mozc.ibus.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::ibus::Engine > engines_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_unix_2fibus_2fibus_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Engine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.ibus.Engine) */ {
 public:
  inline Engine() : Engine(nullptr) {};
  virtual ~Engine();

  Engine(const Engine& from);
  Engine(Engine&& from) noexcept
    : Engine() {
    *this = ::std::move(from);
  }

  inline Engine& operator=(const Engine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Engine& operator=(Engine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Engine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Engine* internal_default_instance() {
    return reinterpret_cast<const Engine*>(
               &_Engine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Engine& a, Engine& b) {
    a.Swap(&b);
  }
  inline void Swap(Engine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Engine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Engine* New() const final {
    return CreateMaybeMessage<Engine>(nullptr);
  }

  Engine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Engine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Engine& from);
  void MergeFrom(const Engine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Engine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.ibus.Engine";
  }
  protected:
  explicit Engine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_unix_2fibus_2fibus_5fconfig_2eproto);
    return ::descriptor_table_unix_2fibus_2fibus_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLongnameFieldNumber = 2,
    kLayoutFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string longname = 2;
  bool has_longname() const;
  private:
  bool _internal_has_longname() const;
  public:
  void clear_longname();
  const std::string& longname() const;
  void set_longname(const std::string& value);
  void set_longname(std::string&& value);
  void set_longname(const char* value);
  void set_longname(const char* value, size_t size);
  std::string* mutable_longname();
  std::string* release_longname();
  void set_allocated_longname(std::string* longname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_longname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_longname(
      std::string* longname);
  private:
  const std::string& _internal_longname() const;
  void _internal_set_longname(const std::string& value);
  std::string* _internal_mutable_longname();
  public:

  // optional string layout = 3;
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const std::string& layout() const;
  void set_layout(const std::string& value);
  void set_layout(std::string&& value);
  void set_layout(const char* value);
  void set_layout(const char* value, size_t size);
  std::string* mutable_layout();
  std::string* release_layout();
  void set_allocated_layout(std::string* layout);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_layout();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_layout(
      std::string* layout);
  private:
  const std::string& _internal_layout() const;
  void _internal_set_layout(const std::string& value);
  std::string* _internal_mutable_layout();
  public:

  // @@protoc_insertion_point(class_scope:mozc.ibus.Engine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr longname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layout_;
  friend struct ::TableStruct_unix_2fibus_2fibus_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// repeated .mozc.ibus.Engine engines = 1;
inline int Config::_internal_engines_size() const {
  return engines_.size();
}
inline int Config::engines_size() const {
  return _internal_engines_size();
}
inline void Config::clear_engines() {
  engines_.Clear();
}
inline ::mozc::ibus::Engine* Config::mutable_engines(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.ibus.Config.engines)
  return engines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::ibus::Engine >*
Config::mutable_engines() {
  // @@protoc_insertion_point(field_mutable_list:mozc.ibus.Config.engines)
  return &engines_;
}
inline const ::mozc::ibus::Engine& Config::_internal_engines(int index) const {
  return engines_.Get(index);
}
inline const ::mozc::ibus::Engine& Config::engines(int index) const {
  // @@protoc_insertion_point(field_get:mozc.ibus.Config.engines)
  return _internal_engines(index);
}
inline ::mozc::ibus::Engine* Config::_internal_add_engines() {
  return engines_.Add();
}
inline ::mozc::ibus::Engine* Config::add_engines() {
  // @@protoc_insertion_point(field_add:mozc.ibus.Config.engines)
  return _internal_add_engines();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::ibus::Engine >&
Config::engines() const {
  // @@protoc_insertion_point(field_list:mozc.ibus.Config.engines)
  return engines_;
}

// -------------------------------------------------------------------

// Engine

// optional string name = 1;
inline bool Engine::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Engine::has_name() const {
  return _internal_has_name();
}
inline void Engine::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Engine::name() const {
  // @@protoc_insertion_point(field_get:mozc.ibus.Engine.name)
  return _internal_name();
}
inline void Engine::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mozc.ibus.Engine.name)
}
inline std::string* Engine::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mozc.ibus.Engine.name)
  return _internal_mutable_name();
}
inline const std::string& Engine::_internal_name() const {
  return name_.Get();
}
inline void Engine::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Engine::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.ibus.Engine.name)
}
inline void Engine::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.ibus.Engine.name)
}
inline void Engine::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.ibus.Engine.name)
}
inline std::string* Engine::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Engine::release_name() {
  // @@protoc_insertion_point(field_release:mozc.ibus.Engine.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Engine::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.ibus.Engine.name)
}
inline std::string* Engine::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.ibus.Engine.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Engine::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.ibus.Engine.name)
}

// optional string longname = 2;
inline bool Engine::_internal_has_longname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Engine::has_longname() const {
  return _internal_has_longname();
}
inline void Engine::clear_longname() {
  longname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Engine::longname() const {
  // @@protoc_insertion_point(field_get:mozc.ibus.Engine.longname)
  return _internal_longname();
}
inline void Engine::set_longname(const std::string& value) {
  _internal_set_longname(value);
  // @@protoc_insertion_point(field_set:mozc.ibus.Engine.longname)
}
inline std::string* Engine::mutable_longname() {
  // @@protoc_insertion_point(field_mutable:mozc.ibus.Engine.longname)
  return _internal_mutable_longname();
}
inline const std::string& Engine::_internal_longname() const {
  return longname_.Get();
}
inline void Engine::_internal_set_longname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Engine::set_longname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  longname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.ibus.Engine.longname)
}
inline void Engine::set_longname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.ibus.Engine.longname)
}
inline void Engine::set_longname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  longname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.ibus.Engine.longname)
}
inline std::string* Engine::_internal_mutable_longname() {
  _has_bits_[0] |= 0x00000002u;
  return longname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Engine::release_longname() {
  // @@protoc_insertion_point(field_release:mozc.ibus.Engine.longname)
  if (!_internal_has_longname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return longname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Engine::set_allocated_longname(std::string* longname) {
  if (longname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  longname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), longname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.ibus.Engine.longname)
}
inline std::string* Engine::unsafe_arena_release_longname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.ibus.Engine.longname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return longname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Engine::unsafe_arena_set_allocated_longname(
    std::string* longname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (longname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  longname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      longname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.ibus.Engine.longname)
}

// optional string layout = 3;
inline bool Engine::_internal_has_layout() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Engine::has_layout() const {
  return _internal_has_layout();
}
inline void Engine::clear_layout() {
  layout_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Engine::layout() const {
  // @@protoc_insertion_point(field_get:mozc.ibus.Engine.layout)
  return _internal_layout();
}
inline void Engine::set_layout(const std::string& value) {
  _internal_set_layout(value);
  // @@protoc_insertion_point(field_set:mozc.ibus.Engine.layout)
}
inline std::string* Engine::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:mozc.ibus.Engine.layout)
  return _internal_mutable_layout();
}
inline const std::string& Engine::_internal_layout() const {
  return layout_.Get();
}
inline void Engine::_internal_set_layout(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Engine::set_layout(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  layout_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.ibus.Engine.layout)
}
inline void Engine::set_layout(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.ibus.Engine.layout)
}
inline void Engine::set_layout(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  layout_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.ibus.Engine.layout)
}
inline std::string* Engine::_internal_mutable_layout() {
  _has_bits_[0] |= 0x00000004u;
  return layout_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Engine::release_layout() {
  // @@protoc_insertion_point(field_release:mozc.ibus.Engine.layout)
  if (!_internal_has_layout()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return layout_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Engine::set_allocated_layout(std::string* layout) {
  if (layout != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  layout_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layout,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.ibus.Engine.layout)
}
inline std::string* Engine::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.ibus.Engine.layout)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return layout_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Engine::unsafe_arena_set_allocated_layout(
    std::string* layout) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (layout != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  layout_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      layout, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.ibus.Engine.layout)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ibus
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_unix_2fibus_2fibus_5fconfig_2eproto
