// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/user_history_predictor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prediction_2fuser_5fhistory_5fpredictor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prediction_2fuser_5fhistory_5fpredictor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prediction_2fuser_5fhistory_5fpredictor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto;
namespace mozc {
namespace user_history_predictor {
class UserHistory;
class UserHistoryDefaultTypeInternal;
extern UserHistoryDefaultTypeInternal _UserHistory_default_instance_;
class UserHistory_Entry;
class UserHistory_EntryDefaultTypeInternal;
extern UserHistory_EntryDefaultTypeInternal _UserHistory_Entry_default_instance_;
class UserHistory_NextEntry;
class UserHistory_NextEntryDefaultTypeInternal;
extern UserHistory_NextEntryDefaultTypeInternal _UserHistory_NextEntry_default_instance_;
}  // namespace user_history_predictor
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::user_history_predictor::UserHistory* Arena::CreateMaybeMessage<::mozc::user_history_predictor::UserHistory>(Arena*);
template<> ::mozc::user_history_predictor::UserHistory_Entry* Arena::CreateMaybeMessage<::mozc::user_history_predictor::UserHistory_Entry>(Arena*);
template<> ::mozc::user_history_predictor::UserHistory_NextEntry* Arena::CreateMaybeMessage<::mozc::user_history_predictor::UserHistory_NextEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace user_history_predictor {

enum UserHistory_Entry_EntryType : int {
  UserHistory_Entry_EntryType_DEFAULT_ENTRY = 0,
  UserHistory_Entry_EntryType_CLEAN_ALL_EVENT = 1,
  UserHistory_Entry_EntryType_CLEAN_UNUSED_EVENT = 2
};
bool UserHistory_Entry_EntryType_IsValid(int value);
constexpr UserHistory_Entry_EntryType UserHistory_Entry_EntryType_EntryType_MIN = UserHistory_Entry_EntryType_DEFAULT_ENTRY;
constexpr UserHistory_Entry_EntryType UserHistory_Entry_EntryType_EntryType_MAX = UserHistory_Entry_EntryType_CLEAN_UNUSED_EVENT;
constexpr int UserHistory_Entry_EntryType_EntryType_ARRAYSIZE = UserHistory_Entry_EntryType_EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserHistory_Entry_EntryType_descriptor();
template<typename T>
inline const std::string& UserHistory_Entry_EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserHistory_Entry_EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserHistory_Entry_EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserHistory_Entry_EntryType_descriptor(), enum_t_value);
}
inline bool UserHistory_Entry_EntryType_Parse(
    const std::string& name, UserHistory_Entry_EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserHistory_Entry_EntryType>(
    UserHistory_Entry_EntryType_descriptor(), name, value);
}
// ===================================================================

class UserHistory_NextEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_history_predictor.UserHistory.NextEntry) */ {
 public:
  inline UserHistory_NextEntry() : UserHistory_NextEntry(nullptr) {};
  virtual ~UserHistory_NextEntry();

  UserHistory_NextEntry(const UserHistory_NextEntry& from);
  UserHistory_NextEntry(UserHistory_NextEntry&& from) noexcept
    : UserHistory_NextEntry() {
    *this = ::std::move(from);
  }

  inline UserHistory_NextEntry& operator=(const UserHistory_NextEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserHistory_NextEntry& operator=(UserHistory_NextEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserHistory_NextEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserHistory_NextEntry* internal_default_instance() {
    return reinterpret_cast<const UserHistory_NextEntry*>(
               &_UserHistory_NextEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserHistory_NextEntry& a, UserHistory_NextEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(UserHistory_NextEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserHistory_NextEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserHistory_NextEntry* New() const final {
    return CreateMaybeMessage<UserHistory_NextEntry>(nullptr);
  }

  UserHistory_NextEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserHistory_NextEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserHistory_NextEntry& from);
  void MergeFrom(const UserHistory_NextEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserHistory_NextEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_history_predictor.UserHistory.NextEntry";
  }
  protected:
  explicit UserHistory_NextEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto);
    return ::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFpFieldNumber = 1,
  };
  // optional uint32 entry_fp = 1 [default = 0];
  bool has_entry_fp() const;
  private:
  bool _internal_has_entry_fp() const;
  public:
  void clear_entry_fp();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_fp() const;
  void set_entry_fp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_fp() const;
  void _internal_set_entry_fp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_history_predictor.UserHistory.NextEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_fp_;
  friend struct ::TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto;
};
// -------------------------------------------------------------------

class UserHistory_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_history_predictor.UserHistory.Entry) */ {
 public:
  inline UserHistory_Entry() : UserHistory_Entry(nullptr) {};
  virtual ~UserHistory_Entry();

  UserHistory_Entry(const UserHistory_Entry& from);
  UserHistory_Entry(UserHistory_Entry&& from) noexcept
    : UserHistory_Entry() {
    *this = ::std::move(from);
  }

  inline UserHistory_Entry& operator=(const UserHistory_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserHistory_Entry& operator=(UserHistory_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserHistory_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserHistory_Entry* internal_default_instance() {
    return reinterpret_cast<const UserHistory_Entry*>(
               &_UserHistory_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserHistory_Entry& a, UserHistory_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(UserHistory_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserHistory_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserHistory_Entry* New() const final {
    return CreateMaybeMessage<UserHistory_Entry>(nullptr);
  }

  UserHistory_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserHistory_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserHistory_Entry& from);
  void MergeFrom(const UserHistory_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserHistory_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_history_predictor.UserHistory.Entry";
  }
  protected:
  explicit UserHistory_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto);
    return ::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserHistory_Entry_EntryType EntryType;
  static constexpr EntryType DEFAULT_ENTRY =
    UserHistory_Entry_EntryType_DEFAULT_ENTRY;
  static constexpr EntryType CLEAN_ALL_EVENT =
    UserHistory_Entry_EntryType_CLEAN_ALL_EVENT;
  static constexpr EntryType CLEAN_UNUSED_EVENT =
    UserHistory_Entry_EntryType_CLEAN_UNUSED_EVENT;
  static inline bool EntryType_IsValid(int value) {
    return UserHistory_Entry_EntryType_IsValid(value);
  }
  static constexpr EntryType EntryType_MIN =
    UserHistory_Entry_EntryType_EntryType_MIN;
  static constexpr EntryType EntryType_MAX =
    UserHistory_Entry_EntryType_EntryType_MAX;
  static constexpr int EntryType_ARRAYSIZE =
    UserHistory_Entry_EntryType_EntryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EntryType_descriptor() {
    return UserHistory_Entry_EntryType_descriptor();
  }
  template<typename T>
  static inline const std::string& EntryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EntryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EntryType_Name.");
    return UserHistory_Entry_EntryType_Name(enum_t_value);
  }
  static inline bool EntryType_Parse(const std::string& name,
      EntryType* value) {
    return UserHistory_Entry_EntryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNextEntriesFieldNumber = 7,
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kDescriptionFieldNumber = 6,
    kLastAccessTimeFieldNumber = 4,
    kSuggestionFreqFieldNumber = 3,
    kConversionFreqFieldNumber = 5,
    kEntryTypeFieldNumber = 9,
    kBigramBoostFieldNumber = 20,
    kSpellingCorrectionFieldNumber = 21,
    kRemovedFieldNumber = 8,
  };
  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  int next_entries_size() const;
  private:
  int _internal_next_entries_size() const;
  public:
  void clear_next_entries();
  ::mozc::user_history_predictor::UserHistory_NextEntry* mutable_next_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >*
      mutable_next_entries();
  private:
  const ::mozc::user_history_predictor::UserHistory_NextEntry& _internal_next_entries(int index) const;
  ::mozc::user_history_predictor::UserHistory_NextEntry* _internal_add_next_entries();
  public:
  const ::mozc::user_history_predictor::UserHistory_NextEntry& next_entries(int index) const;
  ::mozc::user_history_predictor::UserHistory_NextEntry* add_next_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >&
      next_entries() const;

  // optional string key = 1 [default = ""];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2 [default = ""];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string description = 6 [default = ""];
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional uint64 last_access_time = 4 [default = 0];
  bool has_last_access_time() const;
  private:
  bool _internal_has_last_access_time() const;
  public:
  void clear_last_access_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_access_time() const;
  void set_last_access_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_access_time() const;
  void _internal_set_last_access_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 suggestion_freq = 3 [default = 0];
  bool has_suggestion_freq() const;
  private:
  bool _internal_has_suggestion_freq() const;
  public:
  void clear_suggestion_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 suggestion_freq() const;
  void set_suggestion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suggestion_freq() const;
  void _internal_set_suggestion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 conversion_freq = 5 [default = 0];
  bool has_conversion_freq() const;
  private:
  bool _internal_has_conversion_freq() const;
  public:
  void clear_conversion_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 conversion_freq() const;
  void set_conversion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conversion_freq() const;
  void _internal_set_conversion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
  bool has_entry_type() const;
  private:
  bool _internal_has_entry_type() const;
  public:
  void clear_entry_type();
  ::mozc::user_history_predictor::UserHistory_Entry_EntryType entry_type() const;
  void set_entry_type(::mozc::user_history_predictor::UserHistory_Entry_EntryType value);
  private:
  ::mozc::user_history_predictor::UserHistory_Entry_EntryType _internal_entry_type() const;
  void _internal_set_entry_type(::mozc::user_history_predictor::UserHistory_Entry_EntryType value);
  public:

  // optional bool bigram_boost = 20 [default = false];
  bool has_bigram_boost() const;
  private:
  bool _internal_has_bigram_boost() const;
  public:
  void clear_bigram_boost();
  bool bigram_boost() const;
  void set_bigram_boost(bool value);
  private:
  bool _internal_bigram_boost() const;
  void _internal_set_bigram_boost(bool value);
  public:

  // optional bool spelling_correction = 21 [default = false];
  bool has_spelling_correction() const;
  private:
  bool _internal_has_spelling_correction() const;
  public:
  void clear_spelling_correction();
  bool spelling_correction() const;
  void set_spelling_correction(bool value);
  private:
  bool _internal_spelling_correction() const;
  void _internal_set_spelling_correction(bool value);
  public:

  // optional bool removed = 8 [default = false];
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_history_predictor.UserHistory.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry > next_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_access_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suggestion_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conversion_freq_;
  int entry_type_;
  bool bigram_boost_;
  bool spelling_correction_;
  bool removed_;
  friend struct ::TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto;
};
// -------------------------------------------------------------------

class UserHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_history_predictor.UserHistory) */ {
 public:
  inline UserHistory() : UserHistory(nullptr) {};
  virtual ~UserHistory();

  UserHistory(const UserHistory& from);
  UserHistory(UserHistory&& from) noexcept
    : UserHistory() {
    *this = ::std::move(from);
  }

  inline UserHistory& operator=(const UserHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserHistory& operator=(UserHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserHistory* internal_default_instance() {
    return reinterpret_cast<const UserHistory*>(
               &_UserHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserHistory& a, UserHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(UserHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserHistory* New() const final {
    return CreateMaybeMessage<UserHistory>(nullptr);
  }

  UserHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserHistory& from);
  void MergeFrom(const UserHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_history_predictor.UserHistory";
  }
  protected:
  explicit UserHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto);
    return ::descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserHistory_NextEntry NextEntry;
  typedef UserHistory_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 6,
  };
  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::mozc::user_history_predictor::UserHistory_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >*
      mutable_entries();
  private:
  const ::mozc::user_history_predictor::UserHistory_Entry& _internal_entries(int index) const;
  ::mozc::user_history_predictor::UserHistory_Entry* _internal_add_entries();
  public:
  const ::mozc::user_history_predictor::UserHistory_Entry& entries(int index) const;
  ::mozc::user_history_predictor::UserHistory_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:mozc.user_history_predictor.UserHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry > entries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserHistory_NextEntry

// optional uint32 entry_fp = 1 [default = 0];
inline bool UserHistory_NextEntry::_internal_has_entry_fp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserHistory_NextEntry::has_entry_fp() const {
  return _internal_has_entry_fp();
}
inline void UserHistory_NextEntry::clear_entry_fp() {
  entry_fp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_NextEntry::_internal_entry_fp() const {
  return entry_fp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_NextEntry::entry_fp() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.NextEntry.entry_fp)
  return _internal_entry_fp();
}
inline void UserHistory_NextEntry::_internal_set_entry_fp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  entry_fp_ = value;
}
inline void UserHistory_NextEntry::set_entry_fp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_fp(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.NextEntry.entry_fp)
}

// -------------------------------------------------------------------

// UserHistory_Entry

// optional string key = 1 [default = ""];
inline bool UserHistory_Entry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_key() const {
  return _internal_has_key();
}
inline void UserHistory_Entry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserHistory_Entry::key() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.key)
  return _internal_key();
}
inline void UserHistory_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.key)
}
inline std::string* UserHistory_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& UserHistory_Entry::_internal_key() const {
  return key_.Get();
}
inline void UserHistory_Entry::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserHistory_Entry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_history_predictor.UserHistory.Entry.key)
}
inline void UserHistory_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.key)
}
inline void UserHistory_Entry::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.key)
}
inline std::string* UserHistory_Entry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserHistory_Entry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserHistory_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.key)
}
inline std::string* UserHistory_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_history_predictor.UserHistory.Entry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserHistory_Entry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_history_predictor.UserHistory.Entry.key)
}

// optional string value = 2 [default = ""];
inline bool UserHistory_Entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_value() const {
  return _internal_has_value();
}
inline void UserHistory_Entry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserHistory_Entry::value() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.value)
  return _internal_value();
}
inline void UserHistory_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.value)
}
inline std::string* UserHistory_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& UserHistory_Entry::_internal_value() const {
  return value_.Get();
}
inline void UserHistory_Entry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserHistory_Entry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_history_predictor.UserHistory.Entry.value)
}
inline void UserHistory_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.value)
}
inline void UserHistory_Entry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.value)
}
inline std::string* UserHistory_Entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserHistory_Entry::release_value() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserHistory_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.value)
}
inline std::string* UserHistory_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_history_predictor.UserHistory.Entry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserHistory_Entry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_history_predictor.UserHistory.Entry.value)
}

// optional string description = 6 [default = ""];
inline bool UserHistory_Entry::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_description() const {
  return _internal_has_description();
}
inline void UserHistory_Entry::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserHistory_Entry::description() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.description)
  return _internal_description();
}
inline void UserHistory_Entry::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.description)
}
inline std::string* UserHistory_Entry::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.description)
  return _internal_mutable_description();
}
inline const std::string& UserHistory_Entry::_internal_description() const {
  return description_.Get();
}
inline void UserHistory_Entry::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserHistory_Entry::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_history_predictor.UserHistory.Entry.description)
}
inline void UserHistory_Entry::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_history_predictor.UserHistory.Entry.description)
}
inline void UserHistory_Entry::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_history_predictor.UserHistory.Entry.description)
}
inline std::string* UserHistory_Entry::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserHistory_Entry::release_description() {
  // @@protoc_insertion_point(field_release:mozc.user_history_predictor.UserHistory.Entry.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserHistory_Entry::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_history_predictor.UserHistory.Entry.description)
}
inline std::string* UserHistory_Entry::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_history_predictor.UserHistory.Entry.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserHistory_Entry::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_history_predictor.UserHistory.Entry.description)
}

// optional uint32 suggestion_freq = 3 [default = 0];
inline bool UserHistory_Entry::_internal_has_suggestion_freq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_suggestion_freq() const {
  return _internal_has_suggestion_freq();
}
inline void UserHistory_Entry::clear_suggestion_freq() {
  suggestion_freq_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_Entry::_internal_suggestion_freq() const {
  return suggestion_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_Entry::suggestion_freq() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.suggestion_freq)
  return _internal_suggestion_freq();
}
inline void UserHistory_Entry::_internal_set_suggestion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  suggestion_freq_ = value;
}
inline void UserHistory_Entry::set_suggestion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_suggestion_freq(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.suggestion_freq)
}

// optional uint32 conversion_freq = 5 [default = 0];
inline bool UserHistory_Entry::_internal_has_conversion_freq() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_conversion_freq() const {
  return _internal_has_conversion_freq();
}
inline void UserHistory_Entry::clear_conversion_freq() {
  conversion_freq_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_Entry::_internal_conversion_freq() const {
  return conversion_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserHistory_Entry::conversion_freq() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.conversion_freq)
  return _internal_conversion_freq();
}
inline void UserHistory_Entry::_internal_set_conversion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  conversion_freq_ = value;
}
inline void UserHistory_Entry::set_conversion_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conversion_freq(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.conversion_freq)
}

// optional uint64 last_access_time = 4 [default = 0];
inline bool UserHistory_Entry::_internal_has_last_access_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_last_access_time() const {
  return _internal_has_last_access_time();
}
inline void UserHistory_Entry::clear_last_access_time() {
  last_access_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserHistory_Entry::_internal_last_access_time() const {
  return last_access_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserHistory_Entry::last_access_time() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.last_access_time)
  return _internal_last_access_time();
}
inline void UserHistory_Entry::_internal_set_last_access_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_access_time_ = value;
}
inline void UserHistory_Entry::set_last_access_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_access_time(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.last_access_time)
}

// repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
inline int UserHistory_Entry::_internal_next_entries_size() const {
  return next_entries_.size();
}
inline int UserHistory_Entry::next_entries_size() const {
  return _internal_next_entries_size();
}
inline void UserHistory_Entry::clear_next_entries() {
  next_entries_.Clear();
}
inline ::mozc::user_history_predictor::UserHistory_NextEntry* UserHistory_Entry::mutable_next_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >*
UserHistory_Entry::mutable_next_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return &next_entries_;
}
inline const ::mozc::user_history_predictor::UserHistory_NextEntry& UserHistory_Entry::_internal_next_entries(int index) const {
  return next_entries_.Get(index);
}
inline const ::mozc::user_history_predictor::UserHistory_NextEntry& UserHistory_Entry::next_entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return _internal_next_entries(index);
}
inline ::mozc::user_history_predictor::UserHistory_NextEntry* UserHistory_Entry::_internal_add_next_entries() {
  return next_entries_.Add();
}
inline ::mozc::user_history_predictor::UserHistory_NextEntry* UserHistory_Entry::add_next_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return _internal_add_next_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_NextEntry >&
UserHistory_Entry::next_entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_history_predictor.UserHistory.Entry.next_entries)
  return next_entries_;
}

// optional bool bigram_boost = 20 [default = false];
inline bool UserHistory_Entry::_internal_has_bigram_boost() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_bigram_boost() const {
  return _internal_has_bigram_boost();
}
inline void UserHistory_Entry::clear_bigram_boost() {
  bigram_boost_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool UserHistory_Entry::_internal_bigram_boost() const {
  return bigram_boost_;
}
inline bool UserHistory_Entry::bigram_boost() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.bigram_boost)
  return _internal_bigram_boost();
}
inline void UserHistory_Entry::_internal_set_bigram_boost(bool value) {
  _has_bits_[0] |= 0x00000080u;
  bigram_boost_ = value;
}
inline void UserHistory_Entry::set_bigram_boost(bool value) {
  _internal_set_bigram_boost(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.bigram_boost)
}

// optional bool spelling_correction = 21 [default = false];
inline bool UserHistory_Entry::_internal_has_spelling_correction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_spelling_correction() const {
  return _internal_has_spelling_correction();
}
inline void UserHistory_Entry::clear_spelling_correction() {
  spelling_correction_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool UserHistory_Entry::_internal_spelling_correction() const {
  return spelling_correction_;
}
inline bool UserHistory_Entry::spelling_correction() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.spelling_correction)
  return _internal_spelling_correction();
}
inline void UserHistory_Entry::_internal_set_spelling_correction(bool value) {
  _has_bits_[0] |= 0x00000100u;
  spelling_correction_ = value;
}
inline void UserHistory_Entry::set_spelling_correction(bool value) {
  _internal_set_spelling_correction(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.spelling_correction)
}

// optional bool removed = 8 [default = false];
inline bool UserHistory_Entry::_internal_has_removed() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_removed() const {
  return _internal_has_removed();
}
inline void UserHistory_Entry::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool UserHistory_Entry::_internal_removed() const {
  return removed_;
}
inline bool UserHistory_Entry::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.removed)
  return _internal_removed();
}
inline void UserHistory_Entry::_internal_set_removed(bool value) {
  _has_bits_[0] |= 0x00000200u;
  removed_ = value;
}
inline void UserHistory_Entry::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.removed)
}

// optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
inline bool UserHistory_Entry::_internal_has_entry_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserHistory_Entry::has_entry_type() const {
  return _internal_has_entry_type();
}
inline void UserHistory_Entry::clear_entry_type() {
  entry_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mozc::user_history_predictor::UserHistory_Entry_EntryType UserHistory_Entry::_internal_entry_type() const {
  return static_cast< ::mozc::user_history_predictor::UserHistory_Entry_EntryType >(entry_type_);
}
inline ::mozc::user_history_predictor::UserHistory_Entry_EntryType UserHistory_Entry::entry_type() const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.Entry.entry_type)
  return _internal_entry_type();
}
inline void UserHistory_Entry::_internal_set_entry_type(::mozc::user_history_predictor::UserHistory_Entry_EntryType value) {
  assert(::mozc::user_history_predictor::UserHistory_Entry_EntryType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  entry_type_ = value;
}
inline void UserHistory_Entry::set_entry_type(::mozc::user_history_predictor::UserHistory_Entry_EntryType value) {
  _internal_set_entry_type(value);
  // @@protoc_insertion_point(field_set:mozc.user_history_predictor.UserHistory.Entry.entry_type)
}

// -------------------------------------------------------------------

// UserHistory

// repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
inline int UserHistory::_internal_entries_size() const {
  return entries_.size();
}
inline int UserHistory::entries_size() const {
  return _internal_entries_size();
}
inline void UserHistory::clear_entries() {
  entries_.Clear();
}
inline ::mozc::user_history_predictor::UserHistory_Entry* UserHistory::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_history_predictor.UserHistory.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >*
UserHistory::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_history_predictor.UserHistory.entries)
  return &entries_;
}
inline const ::mozc::user_history_predictor::UserHistory_Entry& UserHistory::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::mozc::user_history_predictor::UserHistory_Entry& UserHistory::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_history_predictor.UserHistory.entries)
  return _internal_entries(index);
}
inline ::mozc::user_history_predictor::UserHistory_Entry* UserHistory::_internal_add_entries() {
  return entries_.Add();
}
inline ::mozc::user_history_predictor::UserHistory_Entry* UserHistory::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_history_predictor.UserHistory.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_history_predictor::UserHistory_Entry >&
UserHistory::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_history_predictor.UserHistory.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_history_predictor
}  // namespace mozc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozc::user_history_predictor::UserHistory_Entry_EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_history_predictor::UserHistory_Entry_EntryType>() {
  return ::mozc::user_history_predictor::UserHistory_Entry_EntryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prediction_2fuser_5fhistory_5fpredictor_2eproto
