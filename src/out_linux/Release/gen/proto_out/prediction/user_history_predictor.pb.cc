// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction/user_history_predictor.proto

#include "prediction/user_history_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_prediction_2fuser_5fhistory_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prediction_2fuser_5fhistory_5fpredictor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto;
namespace mozc {
namespace user_history_predictor {
class UserHistory_NextEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserHistory_NextEntry> _instance;
} _UserHistory_NextEntry_default_instance_;
class UserHistory_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserHistory_Entry> _instance;
} _UserHistory_Entry_default_instance_;
class UserHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserHistory> _instance;
} _UserHistory_default_instance_;
}  // namespace user_history_predictor
}  // namespace mozc
static void InitDefaultsscc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_history_predictor::_UserHistory_default_instance_;
    new (ptr) ::mozc::user_history_predictor::UserHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_history_predictor::UserHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto}, {
      &scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_history_predictor::_UserHistory_Entry_default_instance_;
    new (ptr) ::mozc::user_history_predictor::UserHistory_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_history_predictor::UserHistory_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto}, {
      &scc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base,}};

static void InitDefaultsscc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_history_predictor::_UserHistory_NextEntry_default_instance_;
    new (ptr) ::mozc::user_history_predictor::UserHistory_NextEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_history_predictor::UserHistory_NextEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prediction_2fuser_5fhistory_5fpredictor_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_prediction_2fuser_5fhistory_5fpredictor_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prediction_2fuser_5fhistory_5fpredictor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_NextEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_NextEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_NextEntry, entry_fp_),
  0,
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, description_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, suggestion_freq_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, conversion_freq_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, last_access_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, next_entries_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, bigram_boost_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, spelling_correction_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, removed_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory_Entry, entry_type_),
  0,
  1,
  2,
  4,
  5,
  3,
  ~0u,
  7,
  8,
  9,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_history_predictor::UserHistory, entries_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mozc::user_history_predictor::UserHistory_NextEntry)},
  { 7, 23, sizeof(::mozc::user_history_predictor::UserHistory_Entry)},
  { 34, -1, sizeof(::mozc::user_history_predictor::UserHistory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_history_predictor::_UserHistory_NextEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_history_predictor::_UserHistory_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_history_predictor::_UserHistory_default_instance_),
};

const char descriptor_table_protodef_prediction_2fuser_5fhistory_5fpredictor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'prediction/user_history_predictor.prot"
  "o\022\033mozc.user_history_predictor\"\323\004\n\013UserH"
  "istory\022\?\n\007entries\030\006 \003(\0132..mozc.user_hist"
  "ory_predictor.UserHistory.Entry\032 \n\tNextE"
  "ntry\022\023\n\010entry_fp\030\001 \001(\r:\0010\032\340\003\n\005Entry\022\r\n\003k"
  "ey\030\001 \001(\t:\000\022\017\n\005value\030\002 \001(\t:\000\022\025\n\013descripti"
  "on\030\006 \001(\t:\000\022\032\n\017suggestion_freq\030\003 \001(\r:\0010\022\032"
  "\n\017conversion_freq\030\005 \001(\r:\0010\022\033\n\020last_acces"
  "s_time\030\004 \001(\004:\0010\022H\n\014next_entries\030\007 \003(\01322."
  "mozc.user_history_predictor.UserHistory."
  "NextEntry\022\033\n\014bigram_boost\030\024 \001(\010:\005false\022\""
  "\n\023spelling_correction\030\025 \001(\010:\005false\022\026\n\007re"
  "moved\030\010 \001(\010:\005false\022[\n\nentry_type\030\t \001(\01628"
  ".mozc.user_history_predictor.UserHistory"
  ".Entry.EntryType:\rDEFAULT_ENTRY\"K\n\tEntry"
  "Type\022\021\n\rDEFAULT_ENTRY\020\000\022\023\n\017CLEAN_ALL_EVE"
  "NT\020\001\022\026\n\022CLEAN_UNUSED_EVENT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_sccs[3] = {
  &scc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto.base,
  &scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base,
  &scc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto = {
  false, false, descriptor_table_protodef_prediction_2fuser_5fhistory_5fpredictor_2eproto, "prediction/user_history_predictor.proto", 668,
  &descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_once, descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_sccs, descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_prediction_2fuser_5fhistory_5fpredictor_2eproto::offsets,
  file_level_metadata_prediction_2fuser_5fhistory_5fpredictor_2eproto, 3, file_level_enum_descriptors_prediction_2fuser_5fhistory_5fpredictor_2eproto, file_level_service_descriptors_prediction_2fuser_5fhistory_5fpredictor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_prediction_2fuser_5fhistory_5fpredictor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto)), true);
namespace mozc {
namespace user_history_predictor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserHistory_Entry_EntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prediction_2fuser_5fhistory_5fpredictor_2eproto);
  return file_level_enum_descriptors_prediction_2fuser_5fhistory_5fpredictor_2eproto[0];
}
bool UserHistory_Entry_EntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserHistory_Entry_EntryType UserHistory_Entry::DEFAULT_ENTRY;
constexpr UserHistory_Entry_EntryType UserHistory_Entry::CLEAN_ALL_EVENT;
constexpr UserHistory_Entry_EntryType UserHistory_Entry::CLEAN_UNUSED_EVENT;
constexpr UserHistory_Entry_EntryType UserHistory_Entry::EntryType_MIN;
constexpr UserHistory_Entry_EntryType UserHistory_Entry::EntryType_MAX;
constexpr int UserHistory_Entry::EntryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserHistory_NextEntry::InitAsDefaultInstance() {
}
class UserHistory_NextEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UserHistory_NextEntry>()._has_bits_);
  static void set_has_entry_fp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserHistory_NextEntry::UserHistory_NextEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_history_predictor.UserHistory.NextEntry)
}
UserHistory_NextEntry::UserHistory_NextEntry(const UserHistory_NextEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_fp_ = from.entry_fp_;
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory.NextEntry)
}

void UserHistory_NextEntry::SharedCtor() {
  entry_fp_ = 0u;
}

UserHistory_NextEntry::~UserHistory_NextEntry() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory.NextEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserHistory_NextEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserHistory_NextEntry::ArenaDtor(void* object) {
  UserHistory_NextEntry* _this = reinterpret_cast< UserHistory_NextEntry* >(object);
  (void)_this;
}
void UserHistory_NextEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserHistory_NextEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserHistory_NextEntry& UserHistory_NextEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserHistory_NextEntry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void UserHistory_NextEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory.NextEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_fp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserHistory_NextEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 entry_fp = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_entry_fp(&has_bits);
          entry_fp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserHistory_NextEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory.NextEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entry_fp = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entry_fp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory.NextEntry)
  return target;
}

size_t UserHistory_NextEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory.NextEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 entry_fp = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entry_fp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHistory_NextEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHistory_NextEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserHistory_NextEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory.NextEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory.NextEntry)
    MergeFrom(*source);
  }
}

void UserHistory_NextEntry::MergeFrom(const UserHistory_NextEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry_fp()) {
    _internal_set_entry_fp(from._internal_entry_fp());
  }
}

void UserHistory_NextEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory_NextEntry::CopyFrom(const UserHistory_NextEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory.NextEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory_NextEntry::IsInitialized() const {
  return true;
}

void UserHistory_NextEntry::InternalSwap(UserHistory_NextEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(entry_fp_, other->entry_fp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserHistory_NextEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserHistory_Entry::InitAsDefaultInstance() {
}
class UserHistory_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<UserHistory_Entry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_suggestion_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_conversion_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_access_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bigram_boost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_spelling_correction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

UserHistory_Entry::UserHistory_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_history_predictor.UserHistory.Entry)
}
UserHistory_Entry::UserHistory_Entry(const UserHistory_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      next_entries_(from.next_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  ::memcpy(&last_access_time_, &from.last_access_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&removed_) -
    reinterpret_cast<char*>(&last_access_time_)) + sizeof(removed_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory.Entry)
}

void UserHistory_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_access_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&removed_) -
      reinterpret_cast<char*>(&last_access_time_)) + sizeof(removed_));
}

UserHistory_Entry::~UserHistory_Entry() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserHistory_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserHistory_Entry::ArenaDtor(void* object) {
  UserHistory_Entry* _this = reinterpret_cast< UserHistory_Entry* >(object);
  (void)_this;
}
void UserHistory_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserHistory_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserHistory_Entry& UserHistory_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserHistory_Entry_prediction_2fuser_5fhistory_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void UserHistory_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&last_access_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bigram_boost_) -
        reinterpret_cast<char*>(&last_access_time_)) + sizeof(bigram_boost_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&spelling_correction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&removed_) -
        reinterpret_cast<char*>(&spelling_correction_)) + sizeof(removed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserHistory_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_history_predictor.UserHistory.Entry.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_history_predictor.UserHistory.Entry.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suggestion_freq = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_suggestion_freq(&has_bits);
          suggestion_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_access_time = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_access_time(&has_bits);
          last_access_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 conversion_freq = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_conversion_freq(&has_bits);
          conversion_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_history_predictor.UserHistory.Entry.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_next_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool removed = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_removed(&has_bits);
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::user_history_predictor::UserHistory_Entry_EntryType_IsValid(val))) {
            _internal_set_entry_type(static_cast<::mozc::user_history_predictor::UserHistory_Entry_EntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool bigram_boost = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_bigram_boost(&has_bits);
          bigram_boost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spelling_correction = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_spelling_correction(&has_bits);
          spelling_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserHistory_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional uint32 suggestion_freq = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_suggestion_freq(), target);
  }

  // optional uint64 last_access_time = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_access_time(), target);
  }

  // optional uint32 conversion_freq = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_conversion_freq(), target);
  }

  // optional string description = 6 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_history_predictor.UserHistory.Entry.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_next_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_next_entries(i), target, stream);
  }

  // optional bool removed = 8 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_removed(), target);
  }

  // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_entry_type(), target);
  }

  // optional bool bigram_boost = 20 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_bigram_boost(), target);
  }

  // optional bool spelling_correction = 21 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_spelling_correction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory.Entry)
  return target;
}

size_t UserHistory_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.user_history_predictor.UserHistory.NextEntry next_entries = 7;
  total_size += 1UL * this->_internal_next_entries_size();
  for (const auto& msg : this->next_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string description = 6 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint64 last_access_time = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_access_time());
    }

    // optional uint32 suggestion_freq = 3 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suggestion_freq());
    }

    // optional uint32 conversion_freq = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_conversion_freq());
    }

    // optional .mozc.user_history_predictor.UserHistory.Entry.EntryType entry_type = 9 [default = DEFAULT_ENTRY];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_entry_type());
    }

    // optional bool bigram_boost = 20 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool spelling_correction = 21 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool removed = 8 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHistory_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHistory_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserHistory_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory.Entry)
    MergeFrom(*source);
  }
}

void UserHistory_Entry::MergeFrom(const UserHistory_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_entries_.MergeFrom(from.next_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      last_access_time_ = from.last_access_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      suggestion_freq_ = from.suggestion_freq_;
    }
    if (cached_has_bits & 0x00000020u) {
      conversion_freq_ = from.conversion_freq_;
    }
    if (cached_has_bits & 0x00000040u) {
      entry_type_ = from.entry_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      bigram_boost_ = from.bigram_boost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      spelling_correction_ = from.spelling_correction_;
    }
    if (cached_has_bits & 0x00000200u) {
      removed_ = from.removed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserHistory_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory_Entry::CopyFrom(const UserHistory_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory_Entry::IsInitialized() const {
  return true;
}

void UserHistory_Entry::InternalSwap(UserHistory_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  next_entries_.InternalSwap(&other->next_entries_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserHistory_Entry, removed_)
      + sizeof(UserHistory_Entry::removed_)
      - PROTOBUF_FIELD_OFFSET(UserHistory_Entry, last_access_time_)>(
          reinterpret_cast<char*>(&last_access_time_),
          reinterpret_cast<char*>(&other->last_access_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserHistory_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserHistory::InitAsDefaultInstance() {
}
class UserHistory::_Internal {
 public:
};

UserHistory::UserHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_history_predictor.UserHistory)
}
UserHistory::UserHistory(const UserHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mozc.user_history_predictor.UserHistory)
}

void UserHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto.base);
}

UserHistory::~UserHistory() {
  // @@protoc_insertion_point(destructor:mozc.user_history_predictor.UserHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserHistory::ArenaDtor(void* object) {
  UserHistory* _this = reinterpret_cast< UserHistory* >(object);
  (void)_this;
}
void UserHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserHistory& UserHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserHistory_prediction_2fuser_5fhistory_5fpredictor_2eproto.base);
  return *internal_default_instance();
}


void UserHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_history_predictor.UserHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_history_predictor.UserHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_history_predictor.UserHistory)
  return target;
}

size_t UserHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_history_predictor.UserHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.user_history_predictor.UserHistory.Entry entries = 6;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_history_predictor.UserHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const UserHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_history_predictor.UserHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_history_predictor.UserHistory)
    MergeFrom(*source);
  }
}

void UserHistory::MergeFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_history_predictor.UserHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void UserHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_history_predictor.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserHistory::CopyFrom(const UserHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_history_predictor.UserHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserHistory::IsInitialized() const {
  return true;
}

void UserHistory::InternalSwap(UserHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user_history_predictor
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::user_history_predictor::UserHistory_NextEntry* Arena::CreateMaybeMessage< ::mozc::user_history_predictor::UserHistory_NextEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_history_predictor::UserHistory_NextEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_history_predictor::UserHistory_Entry* Arena::CreateMaybeMessage< ::mozc::user_history_predictor::UserHistory_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_history_predictor::UserHistory_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_history_predictor::UserHistory* Arena::CreateMaybeMessage< ::mozc::user_history_predictor::UserHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_history_predictor::UserHistory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
