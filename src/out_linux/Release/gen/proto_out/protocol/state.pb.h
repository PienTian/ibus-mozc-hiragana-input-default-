// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protocol/candidates.pb.h"
#include "protocol/commands.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fstate_2eproto;
namespace mozc {
namespace protocol {
class SessionState;
class SessionStateDefaultTypeInternal;
extern SessionStateDefaultTypeInternal _SessionState_default_instance_;
}  // namespace protocol
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::protocol::SessionState* Arena::CreateMaybeMessage<::mozc::protocol::SessionState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace protocol {

// ===================================================================

class SessionState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.protocol.SessionState) */ {
 public:
  inline SessionState() : SessionState(nullptr) {};
  virtual ~SessionState();

  SessionState(const SessionState& from);
  SessionState(SessionState&& from) noexcept
    : SessionState() {
    *this = ::std::move(from);
  }

  inline SessionState& operator=(const SessionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionState& operator=(SessionState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionState* internal_default_instance() {
    return reinterpret_cast<const SessionState*>(
               &_SessionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionState& a, SessionState& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionState* New() const final {
    return CreateMaybeMessage<SessionState>(nullptr);
  }

  SessionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionState& from);
  void MergeFrom(const SessionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.protocol.SessionState";
  }
  protected:
  explicit SessionState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fstate_2eproto);
    return ::descriptor_table_protocol_2fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreeditFieldNumber = 20,
    kCandidatesFieldNumber = 21,
    kResultFieldNumber = 23,
    kRequestFieldNumber = 24,
    kIdFieldNumber = 1,
    kCreatedTimeFieldNumber = 2,
    kStartPreeditTimeFieldNumber = 10,
    kStartConversionWindowTimeFieldNumber = 11,
    kStartPredictionWindowTimeFieldNumber = 12,
    kStartSuggestionWindowTimeFieldNumber = 13,
    kStartInfolistWindowTimeFieldNumber = 14,
    kCommittedFieldNumber = 3,
    kInputFieldTypeFieldNumber = 25,
  };
  // optional .mozc.commands.Preedit preedit = 20;
  bool has_preedit() const;
  private:
  bool _internal_has_preedit() const;
  public:
  void clear_preedit();
  const ::mozc::commands::Preedit& preedit() const;
  ::mozc::commands::Preedit* release_preedit();
  ::mozc::commands::Preedit* mutable_preedit();
  void set_allocated_preedit(::mozc::commands::Preedit* preedit);
  private:
  const ::mozc::commands::Preedit& _internal_preedit() const;
  ::mozc::commands::Preedit* _internal_mutable_preedit();
  public:
  void unsafe_arena_set_allocated_preedit(
      ::mozc::commands::Preedit* preedit);
  ::mozc::commands::Preedit* unsafe_arena_release_preedit();

  // optional .mozc.commands.Candidates candidates = 21;
  bool has_candidates() const;
  private:
  bool _internal_has_candidates() const;
  public:
  void clear_candidates();
  const ::mozc::commands::Candidates& candidates() const;
  ::mozc::commands::Candidates* release_candidates();
  ::mozc::commands::Candidates* mutable_candidates();
  void set_allocated_candidates(::mozc::commands::Candidates* candidates);
  private:
  const ::mozc::commands::Candidates& _internal_candidates() const;
  ::mozc::commands::Candidates* _internal_mutable_candidates();
  public:
  void unsafe_arena_set_allocated_candidates(
      ::mozc::commands::Candidates* candidates);
  ::mozc::commands::Candidates* unsafe_arena_release_candidates();

  // optional .mozc.commands.Result result = 23;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mozc::commands::Result& result() const;
  ::mozc::commands::Result* release_result();
  ::mozc::commands::Result* mutable_result();
  void set_allocated_result(::mozc::commands::Result* result);
  private:
  const ::mozc::commands::Result& _internal_result() const;
  ::mozc::commands::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mozc::commands::Result* result);
  ::mozc::commands::Result* unsafe_arena_release_result();

  // optional .mozc.commands.Request request = 24;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::mozc::commands::Request& request() const;
  ::mozc::commands::Request* release_request();
  ::mozc::commands::Request* mutable_request();
  void set_allocated_request(::mozc::commands::Request* request);
  private:
  const ::mozc::commands::Request& _internal_request() const;
  ::mozc::commands::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::mozc::commands::Request* request);
  ::mozc::commands::Request* unsafe_arena_release_request();

  // required uint64 id = 1 [jstype = JS_STRING];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 created_time = 2 [jstype = JS_STRING];
  bool has_created_time() const;
  private:
  bool _internal_has_created_time() const;
  public:
  void clear_created_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 created_time() const;
  void set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_created_time() const;
  void _internal_set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_preedit_time = 10 [jstype = JS_STRING];
  bool has_start_preedit_time() const;
  private:
  bool _internal_has_start_preedit_time() const;
  public:
  void clear_start_preedit_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_preedit_time() const;
  void set_start_preedit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_preedit_time() const;
  void _internal_set_start_preedit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_conversion_window_time = 11 [jstype = JS_STRING];
  bool has_start_conversion_window_time() const;
  private:
  bool _internal_has_start_conversion_window_time() const;
  public:
  void clear_start_conversion_window_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_conversion_window_time() const;
  void set_start_conversion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_conversion_window_time() const;
  void _internal_set_start_conversion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_prediction_window_time = 12 [jstype = JS_STRING];
  bool has_start_prediction_window_time() const;
  private:
  bool _internal_has_start_prediction_window_time() const;
  public:
  void clear_start_prediction_window_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_prediction_window_time() const;
  void set_start_prediction_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_prediction_window_time() const;
  void _internal_set_start_prediction_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_suggestion_window_time = 13 [jstype = JS_STRING];
  bool has_start_suggestion_window_time() const;
  private:
  bool _internal_has_start_suggestion_window_time() const;
  public:
  void clear_start_suggestion_window_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_suggestion_window_time() const;
  void set_start_suggestion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_suggestion_window_time() const;
  void _internal_set_start_suggestion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 start_infolist_window_time = 14 [jstype = JS_STRING];
  bool has_start_infolist_window_time() const;
  private:
  bool _internal_has_start_infolist_window_time() const;
  public:
  void clear_start_infolist_window_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_infolist_window_time() const;
  void set_start_infolist_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_infolist_window_time() const;
  void _internal_set_start_infolist_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool committed = 3 [default = false];
  bool has_committed() const;
  private:
  bool _internal_has_committed() const;
  public:
  void clear_committed();
  bool committed() const;
  void set_committed(bool value);
  private:
  bool _internal_committed() const;
  void _internal_set_committed(bool value);
  public:

  // optional .mozc.commands.Context.InputFieldType input_field_type = 25;
  bool has_input_field_type() const;
  private:
  bool _internal_has_input_field_type() const;
  public:
  void clear_input_field_type();
  ::mozc::commands::Context_InputFieldType input_field_type() const;
  void set_input_field_type(::mozc::commands::Context_InputFieldType value);
  private:
  ::mozc::commands::Context_InputFieldType _internal_input_field_type() const;
  void _internal_set_input_field_type(::mozc::commands::Context_InputFieldType value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.protocol.SessionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::Preedit* preedit_;
  ::mozc::commands::Candidates* candidates_;
  ::mozc::commands::Result* result_;
  ::mozc::commands::Request* request_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 created_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_preedit_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_conversion_window_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_prediction_window_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_suggestion_window_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_infolist_window_time_;
  bool committed_;
  int input_field_type_;
  friend struct ::TableStruct_protocol_2fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionState

// required uint64 id = 1 [jstype = JS_STRING];
inline bool SessionState::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SessionState::has_id() const {
  return _internal_has_id();
}
inline void SessionState::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::id() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.id)
  return _internal_id();
}
inline void SessionState::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void SessionState::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.id)
}

// optional uint64 created_time = 2 [jstype = JS_STRING];
inline bool SessionState::_internal_has_created_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SessionState::has_created_time() const {
  return _internal_has_created_time();
}
inline void SessionState::clear_created_time() {
  created_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_created_time() const {
  return created_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::created_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.created_time)
  return _internal_created_time();
}
inline void SessionState::_internal_set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  created_time_ = value;
}
inline void SessionState::set_created_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.created_time)
}

// optional bool committed = 3 [default = false];
inline bool SessionState::_internal_has_committed() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SessionState::has_committed() const {
  return _internal_has_committed();
}
inline void SessionState::clear_committed() {
  committed_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool SessionState::_internal_committed() const {
  return committed_;
}
inline bool SessionState::committed() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.committed)
  return _internal_committed();
}
inline void SessionState::_internal_set_committed(bool value) {
  _has_bits_[0] |= 0x00000800u;
  committed_ = value;
}
inline void SessionState::set_committed(bool value) {
  _internal_set_committed(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.committed)
}

// optional uint64 start_preedit_time = 10 [jstype = JS_STRING];
inline bool SessionState::_internal_has_start_preedit_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SessionState::has_start_preedit_time() const {
  return _internal_has_start_preedit_time();
}
inline void SessionState::clear_start_preedit_time() {
  start_preedit_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_start_preedit_time() const {
  return start_preedit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::start_preedit_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_preedit_time)
  return _internal_start_preedit_time();
}
inline void SessionState::_internal_set_start_preedit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  start_preedit_time_ = value;
}
inline void SessionState::set_start_preedit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_preedit_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_preedit_time)
}

// optional uint64 start_conversion_window_time = 11 [jstype = JS_STRING];
inline bool SessionState::_internal_has_start_conversion_window_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SessionState::has_start_conversion_window_time() const {
  return _internal_has_start_conversion_window_time();
}
inline void SessionState::clear_start_conversion_window_time() {
  start_conversion_window_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_start_conversion_window_time() const {
  return start_conversion_window_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::start_conversion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_conversion_window_time)
  return _internal_start_conversion_window_time();
}
inline void SessionState::_internal_set_start_conversion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  start_conversion_window_time_ = value;
}
inline void SessionState::set_start_conversion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_conversion_window_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_conversion_window_time)
}

// optional uint64 start_prediction_window_time = 12 [jstype = JS_STRING];
inline bool SessionState::_internal_has_start_prediction_window_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SessionState::has_start_prediction_window_time() const {
  return _internal_has_start_prediction_window_time();
}
inline void SessionState::clear_start_prediction_window_time() {
  start_prediction_window_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_start_prediction_window_time() const {
  return start_prediction_window_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::start_prediction_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_prediction_window_time)
  return _internal_start_prediction_window_time();
}
inline void SessionState::_internal_set_start_prediction_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  start_prediction_window_time_ = value;
}
inline void SessionState::set_start_prediction_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_prediction_window_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_prediction_window_time)
}

// optional uint64 start_suggestion_window_time = 13 [jstype = JS_STRING];
inline bool SessionState::_internal_has_start_suggestion_window_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SessionState::has_start_suggestion_window_time() const {
  return _internal_has_start_suggestion_window_time();
}
inline void SessionState::clear_start_suggestion_window_time() {
  start_suggestion_window_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_start_suggestion_window_time() const {
  return start_suggestion_window_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::start_suggestion_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_suggestion_window_time)
  return _internal_start_suggestion_window_time();
}
inline void SessionState::_internal_set_start_suggestion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  start_suggestion_window_time_ = value;
}
inline void SessionState::set_start_suggestion_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_suggestion_window_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_suggestion_window_time)
}

// optional uint64 start_infolist_window_time = 14 [jstype = JS_STRING];
inline bool SessionState::_internal_has_start_infolist_window_time() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SessionState::has_start_infolist_window_time() const {
  return _internal_has_start_infolist_window_time();
}
inline void SessionState::clear_start_infolist_window_time() {
  start_infolist_window_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::_internal_start_infolist_window_time() const {
  return start_infolist_window_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SessionState::start_infolist_window_time() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.start_infolist_window_time)
  return _internal_start_infolist_window_time();
}
inline void SessionState::_internal_set_start_infolist_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  start_infolist_window_time_ = value;
}
inline void SessionState::set_start_infolist_window_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_infolist_window_time(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.start_infolist_window_time)
}

// optional .mozc.commands.Preedit preedit = 20;
inline bool SessionState::_internal_has_preedit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || preedit_ != nullptr);
  return value;
}
inline bool SessionState::has_preedit() const {
  return _internal_has_preedit();
}
inline const ::mozc::commands::Preedit& SessionState::_internal_preedit() const {
  const ::mozc::commands::Preedit* p = preedit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Preedit*>(
      &::mozc::commands::_Preedit_default_instance_);
}
inline const ::mozc::commands::Preedit& SessionState::preedit() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.preedit)
  return _internal_preedit();
}
inline void SessionState::unsafe_arena_set_allocated_preedit(
    ::mozc::commands::Preedit* preedit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preedit_);
  }
  preedit_ = preedit;
  if (preedit) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.protocol.SessionState.preedit)
}
inline ::mozc::commands::Preedit* SessionState::release_preedit() {
  auto temp = unsafe_arena_release_preedit();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Preedit* SessionState::unsafe_arena_release_preedit() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.preedit)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::Preedit* temp = preedit_;
  preedit_ = nullptr;
  return temp;
}
inline ::mozc::commands::Preedit* SessionState::_internal_mutable_preedit() {
  _has_bits_[0] |= 0x00000001u;
  if (preedit_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Preedit>(GetArena());
    preedit_ = p;
  }
  return preedit_;
}
inline ::mozc::commands::Preedit* SessionState::mutable_preedit() {
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.preedit)
  return _internal_mutable_preedit();
}
inline void SessionState::set_allocated_preedit(::mozc::commands::Preedit* preedit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preedit_);
  }
  if (preedit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preedit)->GetArena();
    if (message_arena != submessage_arena) {
      preedit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preedit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preedit_ = preedit;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.preedit)
}

// optional .mozc.commands.Candidates candidates = 21;
inline bool SessionState::_internal_has_candidates() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || candidates_ != nullptr);
  return value;
}
inline bool SessionState::has_candidates() const {
  return _internal_has_candidates();
}
inline const ::mozc::commands::Candidates& SessionState::_internal_candidates() const {
  const ::mozc::commands::Candidates* p = candidates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Candidates*>(
      &::mozc::commands::_Candidates_default_instance_);
}
inline const ::mozc::commands::Candidates& SessionState::candidates() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.candidates)
  return _internal_candidates();
}
inline void SessionState::unsafe_arena_set_allocated_candidates(
    ::mozc::commands::Candidates* candidates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidates_);
  }
  candidates_ = candidates;
  if (candidates) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.protocol.SessionState.candidates)
}
inline ::mozc::commands::Candidates* SessionState::release_candidates() {
  auto temp = unsafe_arena_release_candidates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Candidates* SessionState::unsafe_arena_release_candidates() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.candidates)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::Candidates* temp = candidates_;
  candidates_ = nullptr;
  return temp;
}
inline ::mozc::commands::Candidates* SessionState::_internal_mutable_candidates() {
  _has_bits_[0] |= 0x00000002u;
  if (candidates_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Candidates>(GetArena());
    candidates_ = p;
  }
  return candidates_;
}
inline ::mozc::commands::Candidates* SessionState::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.candidates)
  return _internal_mutable_candidates();
}
inline void SessionState::set_allocated_candidates(::mozc::commands::Candidates* candidates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidates_);
  }
  if (candidates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidates)->GetArena();
    if (message_arena != submessage_arena) {
      candidates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  candidates_ = candidates;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.candidates)
}

// optional .mozc.commands.Result result = 23;
inline bool SessionState::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || result_ != nullptr);
  return value;
}
inline bool SessionState::has_result() const {
  return _internal_has_result();
}
inline const ::mozc::commands::Result& SessionState::_internal_result() const {
  const ::mozc::commands::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Result*>(
      &::mozc::commands::_Result_default_instance_);
}
inline const ::mozc::commands::Result& SessionState::result() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.result)
  return _internal_result();
}
inline void SessionState::unsafe_arena_set_allocated_result(
    ::mozc::commands::Result* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.protocol.SessionState.result)
}
inline ::mozc::commands::Result* SessionState::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Result* SessionState::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.result)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::commands::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::mozc::commands::Result* SessionState::_internal_mutable_result() {
  _has_bits_[0] |= 0x00000004u;
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Result>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::mozc::commands::Result* SessionState::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.result)
  return _internal_mutable_result();
}
inline void SessionState::set_allocated_result(::mozc::commands::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result)->GetArena();
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.result)
}

// optional .mozc.commands.Request request = 24;
inline bool SessionState::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool SessionState::has_request() const {
  return _internal_has_request();
}
inline const ::mozc::commands::Request& SessionState::_internal_request() const {
  const ::mozc::commands::Request* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Request*>(
      &::mozc::commands::_Request_default_instance_);
}
inline const ::mozc::commands::Request& SessionState::request() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.request)
  return _internal_request();
}
inline void SessionState::unsafe_arena_set_allocated_request(
    ::mozc::commands::Request* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.protocol.SessionState.request)
}
inline ::mozc::commands::Request* SessionState::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Request* SessionState::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:mozc.protocol.SessionState.request)
  _has_bits_[0] &= ~0x00000008u;
  ::mozc::commands::Request* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::mozc::commands::Request* SessionState::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000008u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Request>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::mozc::commands::Request* SessionState::mutable_request() {
  // @@protoc_insertion_point(field_mutable:mozc.protocol.SessionState.request)
  return _internal_mutable_request();
}
inline void SessionState::set_allocated_request(::mozc::commands::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request)->GetArena();
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:mozc.protocol.SessionState.request)
}

// optional .mozc.commands.Context.InputFieldType input_field_type = 25;
inline bool SessionState::_internal_has_input_field_type() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SessionState::has_input_field_type() const {
  return _internal_has_input_field_type();
}
inline void SessionState::clear_input_field_type() {
  input_field_type_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::mozc::commands::Context_InputFieldType SessionState::_internal_input_field_type() const {
  return static_cast< ::mozc::commands::Context_InputFieldType >(input_field_type_);
}
inline ::mozc::commands::Context_InputFieldType SessionState::input_field_type() const {
  // @@protoc_insertion_point(field_get:mozc.protocol.SessionState.input_field_type)
  return _internal_input_field_type();
}
inline void SessionState::_internal_set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  assert(::mozc::commands::Context_InputFieldType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  input_field_type_ = value;
}
inline void SessionState::set_input_field_type(::mozc::commands::Context_InputFieldType value) {
  _internal_set_input_field_type(value);
  // @@protoc_insertion_point(field_set:mozc.protocol.SessionState.input_field_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fstate_2eproto
