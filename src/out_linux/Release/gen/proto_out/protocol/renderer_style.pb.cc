// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_style.proto

#include "protocol/renderer_style.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2frenderer_5fstyle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2frenderer_5fstyle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2frenderer_5fstyle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto;
namespace mozc {
namespace renderer {
class RendererStyle_RGBAColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererStyle_RGBAColor> _instance;
} _RendererStyle_RGBAColor_default_instance_;
class RendererStyle_TextStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererStyle_TextStyle> _instance;
} _RendererStyle_TextStyle_default_instance_;
class RendererStyle_InfolistStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererStyle_InfolistStyle> _instance;
} _RendererStyle_InfolistStyle_default_instance_;
class RendererStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererStyle> _instance;
} _RendererStyle_default_instance_;
}  // namespace renderer
}  // namespace mozc
static void InitDefaultsscc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto}, {
      &scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto.base,
      &scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto.base,
      &scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto.base,}};

static void InitDefaultsscc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_InfolistStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_InfolistStyle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto}, {
      &scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto.base,
      &scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto.base,}};

static void InitDefaultsscc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_RGBAColor_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_RGBAColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_RGBAColor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto}, {}};

static void InitDefaultsscc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::renderer::_RendererStyle_TextStyle_default_instance_;
    new (ptr) ::mozc::renderer::RendererStyle_TextStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::renderer::RendererStyle_TextStyle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto}, {
      &scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2frenderer_5fstyle_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protocol_2frenderer_5fstyle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2frenderer_5fstyle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2frenderer_5fstyle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, r_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, g_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, b_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_RGBAColor, a_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, font_size_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, foreground_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, background_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, left_padding_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, right_padding_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_TextStyle, font_name_),
  3,
  1,
  2,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_string_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_height_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_padding_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, window_border_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, row_rect_padding_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, window_width_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, title_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, description_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, border_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, caption_background_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, focused_background_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle_InfolistStyle, focused_border_color_),
  0,
  8,
  9,
  10,
  11,
  12,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, window_border_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_height_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, row_rect_padding_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, border_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, column_minimum_width_string_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, text_styles_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_border_colors_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_sub_label_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, focused_background_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, focused_border_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_background_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_indicator_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, scrollbar_width_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_top_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, footer_bottom_color_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, logo_file_name_),
  PROTOBUF_FIELD_OFFSET(::mozc::renderer::RendererStyle, infolist_style_),
  12,
  13,
  14,
  2,
  0,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  15,
  9,
  10,
  1,
  11,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mozc::renderer::RendererStyle_RGBAColor)},
  { 13, 24, sizeof(::mozc::renderer::RendererStyle_TextStyle)},
  { 30, 48, sizeof(::mozc::renderer::RendererStyle_InfolistStyle)},
  { 61, 84, sizeof(::mozc::renderer::RendererStyle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::renderer::_RendererStyle_RGBAColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::renderer::_RendererStyle_TextStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::renderer::_RendererStyle_default_instance_),
};

const char descriptor_table_protodef_protocol_2frenderer_5fstyle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035protocol/renderer_style.proto\022\rmozc.re"
  "nderer\"\217\017\n\rRendererStyle\022\025\n\rwindow_borde"
  "r\030\001 \001(\005\022\025\n\rfooter_height\030\002 \001(\005\022\030\n\020row_re"
  "ct_padding\030\003 \001(\005\022<\n\014border_color\030\004 \001(\0132&"
  ".mozc.renderer.RendererStyle.RGBAColor\022#"
  "\n\033column_minimum_width_string\030\005 \001(\t\022;\n\013t"
  "ext_styles\030\006 \003(\0132&.mozc.renderer.Rendere"
  "rStyle.TextStyle\022D\n\024footer_border_colors"
  "\030\007 \003(\0132&.mozc.renderer.RendererStyle.RGB"
  "AColor\022<\n\014footer_style\030\010 \001(\0132&.mozc.rend"
  "erer.RendererStyle.TextStyle\022F\n\026footer_s"
  "ub_label_style\030\t \001(\0132&.mozc.renderer.Ren"
  "dererStyle.TextStyle\022H\n\030focused_backgrou"
  "nd_color\030\n \001(\0132&.mozc.renderer.RendererS"
  "tyle.RGBAColor\022D\n\024focused_border_color\030\013"
  " \001(\0132&.mozc.renderer.RendererStyle.RGBAC"
  "olor\022J\n\032scrollbar_background_color\030\014 \001(\013"
  "2&.mozc.renderer.RendererStyle.RGBAColor"
  "\022I\n\031scrollbar_indicator_color\030\r \001(\0132&.mo"
  "zc.renderer.RendererStyle.RGBAColor\022\027\n\017s"
  "crollbar_width\030\016 \001(\005\022@\n\020footer_top_color"
  "\030\017 \001(\0132&.mozc.renderer.RendererStyle.RGB"
  "AColor\022C\n\023footer_bottom_color\030\020 \001(\0132&.mo"
  "zc.renderer.RendererStyle.RGBAColor\022\026\n\016l"
  "ogo_file_name\030\021 \001(\t\022B\n\016infolist_style\030\022 "
  "\001(\0132*.mozc.renderer.RendererStyle.Infoli"
  "stStyle\032C\n\tRGBAColor\022\014\n\001r\030\001 \001(\001:\0010\022\014\n\001g\030"
  "\002 \001(\001:\0010\022\014\n\001b\030\003 \001(\001:\0010\022\014\n\001a\030\004 \001(\001:\0011\032\350\001\n"
  "\tTextStyle\022\021\n\tfont_size\030\001 \001(\001\022@\n\020foregro"
  "und_color\030\002 \001(\0132&.mozc.renderer.Renderer"
  "Style.RGBAColor\022@\n\020background_color\030\003 \001("
  "\0132&.mozc.renderer.RendererStyle.RGBAColo"
  "r\022\027\n\014left_padding\030\004 \001(\005:\0010\022\030\n\rright_padd"
  "ing\030\005 \001(\005:\0010\022\021\n\tfont_name\030\006 \001(\t\032\366\004\n\rInfo"
  "listStyle\022\026\n\016caption_string\030\001 \001(\t\022\026\n\016cap"
  "tion_height\030\002 \001(\005\022\027\n\017caption_padding\030\003 \001"
  "(\005\022\025\n\rwindow_border\030\004 \001(\005\022\030\n\020row_rect_pa"
  "dding\030\005 \001(\005\022\024\n\014window_width\030\006 \001(\005\022=\n\rcap"
  "tion_style\030\007 \001(\0132&.mozc.renderer.Rendere"
  "rStyle.TextStyle\022;\n\013title_style\030\010 \001(\0132&."
  "mozc.renderer.RendererStyle.TextStyle\022A\n"
  "\021description_style\030\t \001(\0132&.mozc.renderer"
  ".RendererStyle.TextStyle\022<\n\014border_color"
  "\030\n \001(\0132&.mozc.renderer.RendererStyle.RGB"
  "AColor\022H\n\030caption_background_color\030\013 \001(\013"
  "2&.mozc.renderer.RendererStyle.RGBAColor"
  "\022H\n\030focused_background_color\030\014 \001(\0132&.moz"
  "c.renderer.RendererStyle.RGBAColor\022D\n\024fo"
  "cused_border_color\030\r \001(\0132&.mozc.renderer"
  ".RendererStyle.RGBAColor"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2frenderer_5fstyle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2frenderer_5fstyle_2eproto_sccs[4] = {
  &scc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto.base,
  &scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto.base,
  &scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto.base,
  &scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2frenderer_5fstyle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2frenderer_5fstyle_2eproto = {
  false, false, descriptor_table_protodef_protocol_2frenderer_5fstyle_2eproto, "protocol/renderer_style.proto", 1984,
  &descriptor_table_protocol_2frenderer_5fstyle_2eproto_once, descriptor_table_protocol_2frenderer_5fstyle_2eproto_sccs, descriptor_table_protocol_2frenderer_5fstyle_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_protocol_2frenderer_5fstyle_2eproto::offsets,
  file_level_metadata_protocol_2frenderer_5fstyle_2eproto, 4, file_level_enum_descriptors_protocol_2frenderer_5fstyle_2eproto, file_level_service_descriptors_protocol_2frenderer_5fstyle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2frenderer_5fstyle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2frenderer_5fstyle_2eproto)), true);
namespace mozc {
namespace renderer {

// ===================================================================

void RendererStyle_RGBAColor::InitAsDefaultInstance() {
}
class RendererStyle_RGBAColor::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererStyle_RGBAColor>()._has_bits_);
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RendererStyle_RGBAColor::RendererStyle_RGBAColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.renderer.RendererStyle.RGBAColor)
}
RendererStyle_RGBAColor::RendererStyle_RGBAColor(const RendererStyle_RGBAColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.RGBAColor)
}

void RendererStyle_RGBAColor::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  a_ = 1;
}

RendererStyle_RGBAColor::~RendererStyle_RGBAColor() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.RGBAColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RendererStyle_RGBAColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RendererStyle_RGBAColor::ArenaDtor(void* object) {
  RendererStyle_RGBAColor* _this = reinterpret_cast< RendererStyle_RGBAColor* >(object);
  (void)_this;
}
void RendererStyle_RGBAColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RendererStyle_RGBAColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererStyle_RGBAColor& RendererStyle_RGBAColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererStyle_RGBAColor_protocol_2frenderer_5fstyle_2eproto.base);
  return *internal_default_instance();
}


void RendererStyle_RGBAColor::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.RGBAColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
    a_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RendererStyle_RGBAColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double r = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double g = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double b = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double a = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RendererStyle_RGBAColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.RGBAColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double r = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // optional double g = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_g(), target);
  }

  // optional double b = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_b(), target);
  }

  // optional double a = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.RGBAColor)
  return target;
}

size_t RendererStyle_RGBAColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.RGBAColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double r = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double g = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double b = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_RGBAColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_RGBAColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RendererStyle_RGBAColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.RGBAColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.RGBAColor)
    MergeFrom(*source);
  }
}

void RendererStyle_RGBAColor::MergeFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_RGBAColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_RGBAColor::CopyFrom(const RendererStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_RGBAColor::IsInitialized() const {
  return true;
}

void RendererStyle_RGBAColor::InternalSwap(RendererStyle_RGBAColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RendererStyle_RGBAColor, b_)
      + sizeof(RendererStyle_RGBAColor::b_)
      - PROTOBUF_FIELD_OFFSET(RendererStyle_RGBAColor, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RendererStyle_RGBAColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RendererStyle_TextStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_TextStyle_default_instance_._instance.get_mutable()->foreground_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_TextStyle_default_instance_._instance.get_mutable()->background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
}
class RendererStyle_TextStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererStyle_TextStyle>()._has_bits_);
  static void set_has_font_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& foreground_color(const RendererStyle_TextStyle* msg);
  static void set_has_foreground_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& background_color(const RendererStyle_TextStyle* msg);
  static void set_has_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_left_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_TextStyle::_Internal::foreground_color(const RendererStyle_TextStyle* msg) {
  return *msg->foreground_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_TextStyle::_Internal::background_color(const RendererStyle_TextStyle* msg) {
  return *msg->background_color_;
}
RendererStyle_TextStyle::RendererStyle_TextStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.renderer.RendererStyle.TextStyle)
}
RendererStyle_TextStyle::RendererStyle_TextStyle(const RendererStyle_TextStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_name()) {
    font_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_font_name(),
      GetArena());
  }
  if (from._internal_has_foreground_color()) {
    foreground_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.foreground_color_);
  } else {
    foreground_color_ = nullptr;
  }
  if (from._internal_has_background_color()) {
    background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.background_color_);
  } else {
    background_color_ = nullptr;
  }
  ::memcpy(&font_size_, &from.font_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_padding_) -
    reinterpret_cast<char*>(&font_size_)) + sizeof(right_padding_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.TextStyle)
}

void RendererStyle_TextStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto.base);
  font_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&foreground_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_padding_) -
      reinterpret_cast<char*>(&foreground_color_)) + sizeof(right_padding_));
}

RendererStyle_TextStyle::~RendererStyle_TextStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.TextStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RendererStyle_TextStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  font_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete foreground_color_;
  if (this != internal_default_instance()) delete background_color_;
}

void RendererStyle_TextStyle::ArenaDtor(void* object) {
  RendererStyle_TextStyle* _this = reinterpret_cast< RendererStyle_TextStyle* >(object);
  (void)_this;
}
void RendererStyle_TextStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RendererStyle_TextStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererStyle_TextStyle& RendererStyle_TextStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererStyle_TextStyle_protocol_2frenderer_5fstyle_2eproto.base);
  return *internal_default_instance();
}


void RendererStyle_TextStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.TextStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foreground_color_ != nullptr);
      foreground_color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(background_color_ != nullptr);
      background_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&font_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_padding_) -
        reinterpret_cast<char*>(&font_size_)) + sizeof(right_padding_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RendererStyle_TextStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double font_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_font_size(&has_bits);
          font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_foreground_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 left_padding = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_left_padding(&has_bits);
          left_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 right_padding = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_right_padding(&has_bits);
          right_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string font_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_font_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.renderer.RendererStyle.TextStyle.font_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RendererStyle_TextStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.TextStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double font_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_font_size(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::foreground_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::background_color(this), target, stream);
  }

  // optional int32 left_padding = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_left_padding(), target);
  }

  // optional int32 right_padding = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_right_padding(), target);
  }

  // optional string font_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.TextStyle.font_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_font_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.TextStyle)
  return target;
}

size_t RendererStyle_TextStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.TextStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string font_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_name());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor foreground_color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor background_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_color_);
    }

    // optional double font_size = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 left_padding = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_left_padding());
    }

    // optional int32 right_padding = 5 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_right_padding());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_TextStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_TextStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RendererStyle_TextStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.TextStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.TextStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_TextStyle::MergeFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.TextStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_foreground_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_foreground_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_background_color());
    }
    if (cached_has_bits & 0x00000008u) {
      font_size_ = from.font_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      left_padding_ = from.left_padding_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_padding_ = from.right_padding_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_TextStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_TextStyle::CopyFrom(const RendererStyle_TextStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.TextStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_TextStyle::IsInitialized() const {
  return true;
}

void RendererStyle_TextStyle::InternalSwap(RendererStyle_TextStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  font_name_.Swap(&other->font_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RendererStyle_TextStyle, right_padding_)
      + sizeof(RendererStyle_TextStyle::right_padding_)
      - PROTOBUF_FIELD_OFFSET(RendererStyle_TextStyle, foreground_color_)>(
          reinterpret_cast<char*>(&foreground_color_),
          reinterpret_cast<char*>(&other->foreground_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RendererStyle_TextStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RendererStyle_InfolistStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->caption_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->title_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->description_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->caption_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_InfolistStyle_default_instance_._instance.get_mutable()->focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
}
class RendererStyle_InfolistStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererStyle_InfolistStyle>()._has_bits_);
  static void set_has_caption_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caption_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_caption_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_window_border(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_row_rect_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_window_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::mozc::renderer::RendererStyle_TextStyle& caption_style(const RendererStyle_InfolistStyle* msg);
  static void set_has_caption_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::renderer::RendererStyle_TextStyle& title_style(const RendererStyle_InfolistStyle* msg);
  static void set_has_title_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozc::renderer::RendererStyle_TextStyle& description_style(const RendererStyle_InfolistStyle* msg);
  static void set_has_description_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& border_color(const RendererStyle_InfolistStyle* msg);
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& caption_background_color(const RendererStyle_InfolistStyle* msg);
  static void set_has_caption_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color(const RendererStyle_InfolistStyle* msg);
  static void set_has_focused_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color(const RendererStyle_InfolistStyle* msg);
  static void set_has_focused_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::mozc::renderer::RendererStyle_TextStyle&
RendererStyle_InfolistStyle::_Internal::caption_style(const RendererStyle_InfolistStyle* msg) {
  return *msg->caption_style_;
}
const ::mozc::renderer::RendererStyle_TextStyle&
RendererStyle_InfolistStyle::_Internal::title_style(const RendererStyle_InfolistStyle* msg) {
  return *msg->title_style_;
}
const ::mozc::renderer::RendererStyle_TextStyle&
RendererStyle_InfolistStyle::_Internal::description_style(const RendererStyle_InfolistStyle* msg) {
  return *msg->description_style_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_InfolistStyle::_Internal::border_color(const RendererStyle_InfolistStyle* msg) {
  return *msg->border_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_InfolistStyle::_Internal::caption_background_color(const RendererStyle_InfolistStyle* msg) {
  return *msg->caption_background_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_InfolistStyle::_Internal::focused_background_color(const RendererStyle_InfolistStyle* msg) {
  return *msg->focused_background_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle_InfolistStyle::_Internal::focused_border_color(const RendererStyle_InfolistStyle* msg) {
  return *msg->focused_border_color_;
}
RendererStyle_InfolistStyle::RendererStyle_InfolistStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.renderer.RendererStyle.InfolistStyle)
}
RendererStyle_InfolistStyle::RendererStyle_InfolistStyle(const RendererStyle_InfolistStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  caption_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption_string()) {
    caption_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caption_string(),
      GetArena());
  }
  if (from._internal_has_caption_style()) {
    caption_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.caption_style_);
  } else {
    caption_style_ = nullptr;
  }
  if (from._internal_has_title_style()) {
    title_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.title_style_);
  } else {
    title_style_ = nullptr;
  }
  if (from._internal_has_description_style()) {
    description_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.description_style_);
  } else {
    description_style_ = nullptr;
  }
  if (from._internal_has_border_color()) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.border_color_);
  } else {
    border_color_ = nullptr;
  }
  if (from._internal_has_caption_background_color()) {
    caption_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.caption_background_color_);
  } else {
    caption_background_color_ = nullptr;
  }
  if (from._internal_has_focused_background_color()) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_background_color_);
  } else {
    focused_background_color_ = nullptr;
  }
  if (from._internal_has_focused_border_color()) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_border_color_);
  } else {
    focused_border_color_ = nullptr;
  }
  ::memcpy(&caption_height_, &from.caption_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&window_width_) -
    reinterpret_cast<char*>(&caption_height_)) + sizeof(window_width_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle.InfolistStyle)
}

void RendererStyle_InfolistStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto.base);
  caption_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&caption_style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_width_) -
      reinterpret_cast<char*>(&caption_style_)) + sizeof(window_width_));
}

RendererStyle_InfolistStyle::~RendererStyle_InfolistStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle.InfolistStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RendererStyle_InfolistStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  caption_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete caption_style_;
  if (this != internal_default_instance()) delete title_style_;
  if (this != internal_default_instance()) delete description_style_;
  if (this != internal_default_instance()) delete border_color_;
  if (this != internal_default_instance()) delete caption_background_color_;
  if (this != internal_default_instance()) delete focused_background_color_;
  if (this != internal_default_instance()) delete focused_border_color_;
}

void RendererStyle_InfolistStyle::ArenaDtor(void* object) {
  RendererStyle_InfolistStyle* _this = reinterpret_cast< RendererStyle_InfolistStyle* >(object);
  (void)_this;
}
void RendererStyle_InfolistStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RendererStyle_InfolistStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererStyle_InfolistStyle& RendererStyle_InfolistStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererStyle_InfolistStyle_protocol_2frenderer_5fstyle_2eproto.base);
  return *internal_default_instance();
}


void RendererStyle_InfolistStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle.InfolistStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      caption_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(caption_style_ != nullptr);
      caption_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(title_style_ != nullptr);
      title_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(description_style_ != nullptr);
      description_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(border_color_ != nullptr);
      border_color_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(caption_background_color_ != nullptr);
      caption_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(focused_background_color_ != nullptr);
      focused_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(focused_border_color_ != nullptr);
      focused_border_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&caption_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&window_width_) -
        reinterpret_cast<char*>(&caption_height_)) + sizeof(window_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RendererStyle_InfolistStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string caption_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caption_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caption_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caption_height(&has_bits);
          caption_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caption_padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_caption_padding(&has_bits);
          caption_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_border = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_window_border(&has_bits);
          window_border_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 row_rect_padding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_row_rect_padding(&has_bits);
          row_rect_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 window_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_window_width(&has_bits);
          window_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_border_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_focused_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_focused_border_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RendererStyle_InfolistStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle.InfolistStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caption_string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption_string().data(), static_cast<int>(this->_internal_caption_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.InfolistStyle.caption_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caption_string(), target);
  }

  // optional int32 caption_height = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_caption_height(), target);
  }

  // optional int32 caption_padding = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caption_padding(), target);
  }

  // optional int32 window_border = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_window_border(), target);
  }

  // optional int32 row_rect_padding = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_row_rect_padding(), target);
  }

  // optional int32 window_width = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_window_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::caption_style(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::title_style(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::description_style(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::border_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::caption_background_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::focused_background_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::focused_border_color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle.InfolistStyle)
  return target;
}

size_t RendererStyle_InfolistStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle.InfolistStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string caption_string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption_string());
    }

    // optional .mozc.renderer.RendererStyle.TextStyle caption_style = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caption_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle title_style = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle description_style = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *description_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor caption_background_color = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caption_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *focused_border_color_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 caption_height = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caption_height());
    }

    // optional int32 caption_padding = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caption_padding());
    }

    // optional int32 window_border = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_window_border());
    }

    // optional int32 row_rect_padding = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_row_rect_padding());
    }

    // optional int32 window_width = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_window_width());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle_InfolistStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle_InfolistStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RendererStyle_InfolistStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle.InfolistStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle.InfolistStyle)
    MergeFrom(*source);
  }
}

void RendererStyle_InfolistStyle::MergeFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_caption_string(from._internal_caption_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_caption_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from._internal_caption_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_title_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from._internal_title_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_description_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from._internal_description_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_border_color());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_caption_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_caption_background_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_focused_background_color());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_focused_border_color());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      caption_height_ = from.caption_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      caption_padding_ = from.caption_padding_;
    }
    if (cached_has_bits & 0x00000400u) {
      window_border_ = from.window_border_;
    }
    if (cached_has_bits & 0x00000800u) {
      row_rect_padding_ = from.row_rect_padding_;
    }
    if (cached_has_bits & 0x00001000u) {
      window_width_ = from.window_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle_InfolistStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle_InfolistStyle::CopyFrom(const RendererStyle_InfolistStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle.InfolistStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle_InfolistStyle::IsInitialized() const {
  return true;
}

void RendererStyle_InfolistStyle::InternalSwap(RendererStyle_InfolistStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caption_string_.Swap(&other->caption_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RendererStyle_InfolistStyle, window_width_)
      + sizeof(RendererStyle_InfolistStyle::window_width_)
      - PROTOBUF_FIELD_OFFSET(RendererStyle_InfolistStyle, caption_style_)>(
          reinterpret_cast<char*>(&caption_style_),
          reinterpret_cast<char*>(&other->caption_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RendererStyle_InfolistStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RendererStyle::InitAsDefaultInstance() {
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_sub_label_style_ = const_cast< ::mozc::renderer::RendererStyle_TextStyle*>(
      ::mozc::renderer::RendererStyle_TextStyle::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->focused_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->focused_border_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->scrollbar_background_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->scrollbar_indicator_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_top_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->footer_bottom_color_ = const_cast< ::mozc::renderer::RendererStyle_RGBAColor*>(
      ::mozc::renderer::RendererStyle_RGBAColor::internal_default_instance());
  ::mozc::renderer::_RendererStyle_default_instance_._instance.get_mutable()->infolist_style_ = const_cast< ::mozc::renderer::RendererStyle_InfolistStyle*>(
      ::mozc::renderer::RendererStyle_InfolistStyle::internal_default_instance());
}
class RendererStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererStyle>()._has_bits_);
  static void set_has_window_border(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_footer_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_row_rect_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& border_color(const RendererStyle* msg);
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_minimum_width_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::renderer::RendererStyle_TextStyle& footer_style(const RendererStyle* msg);
  static void set_has_footer_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::renderer::RendererStyle_TextStyle& footer_sub_label_style(const RendererStyle* msg);
  static void set_has_footer_sub_label_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& focused_background_color(const RendererStyle* msg);
  static void set_has_focused_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& focused_border_color(const RendererStyle* msg);
  static void set_has_focused_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_background_color(const RendererStyle* msg);
  static void set_has_scrollbar_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& scrollbar_indicator_color(const RendererStyle* msg);
  static void set_has_scrollbar_indicator_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_scrollbar_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& footer_top_color(const RendererStyle* msg);
  static void set_has_footer_top_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mozc::renderer::RendererStyle_RGBAColor& footer_bottom_color(const RendererStyle* msg);
  static void set_has_footer_bottom_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_logo_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::renderer::RendererStyle_InfolistStyle& infolist_style(const RendererStyle* msg);
  static void set_has_infolist_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::border_color(const RendererStyle* msg) {
  return *msg->border_color_;
}
const ::mozc::renderer::RendererStyle_TextStyle&
RendererStyle::_Internal::footer_style(const RendererStyle* msg) {
  return *msg->footer_style_;
}
const ::mozc::renderer::RendererStyle_TextStyle&
RendererStyle::_Internal::footer_sub_label_style(const RendererStyle* msg) {
  return *msg->footer_sub_label_style_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::focused_background_color(const RendererStyle* msg) {
  return *msg->focused_background_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::focused_border_color(const RendererStyle* msg) {
  return *msg->focused_border_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::scrollbar_background_color(const RendererStyle* msg) {
  return *msg->scrollbar_background_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::scrollbar_indicator_color(const RendererStyle* msg) {
  return *msg->scrollbar_indicator_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::footer_top_color(const RendererStyle* msg) {
  return *msg->footer_top_color_;
}
const ::mozc::renderer::RendererStyle_RGBAColor&
RendererStyle::_Internal::footer_bottom_color(const RendererStyle* msg) {
  return *msg->footer_bottom_color_;
}
const ::mozc::renderer::RendererStyle_InfolistStyle&
RendererStyle::_Internal::infolist_style(const RendererStyle* msg) {
  return *msg->infolist_style_;
}
RendererStyle::RendererStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_styles_(arena),
  footer_border_colors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.renderer.RendererStyle)
}
RendererStyle::RendererStyle(const RendererStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      text_styles_(from.text_styles_),
      footer_border_colors_(from.footer_border_colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_minimum_width_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_column_minimum_width_string()) {
    column_minimum_width_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_column_minimum_width_string(),
      GetArena());
  }
  logo_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_logo_file_name()) {
    logo_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logo_file_name(),
      GetArena());
  }
  if (from._internal_has_border_color()) {
    border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.border_color_);
  } else {
    border_color_ = nullptr;
  }
  if (from._internal_has_footer_style()) {
    footer_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.footer_style_);
  } else {
    footer_style_ = nullptr;
  }
  if (from._internal_has_footer_sub_label_style()) {
    footer_sub_label_style_ = new ::mozc::renderer::RendererStyle_TextStyle(*from.footer_sub_label_style_);
  } else {
    footer_sub_label_style_ = nullptr;
  }
  if (from._internal_has_focused_background_color()) {
    focused_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_background_color_);
  } else {
    focused_background_color_ = nullptr;
  }
  if (from._internal_has_focused_border_color()) {
    focused_border_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.focused_border_color_);
  } else {
    focused_border_color_ = nullptr;
  }
  if (from._internal_has_scrollbar_background_color()) {
    scrollbar_background_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.scrollbar_background_color_);
  } else {
    scrollbar_background_color_ = nullptr;
  }
  if (from._internal_has_scrollbar_indicator_color()) {
    scrollbar_indicator_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.scrollbar_indicator_color_);
  } else {
    scrollbar_indicator_color_ = nullptr;
  }
  if (from._internal_has_footer_top_color()) {
    footer_top_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.footer_top_color_);
  } else {
    footer_top_color_ = nullptr;
  }
  if (from._internal_has_footer_bottom_color()) {
    footer_bottom_color_ = new ::mozc::renderer::RendererStyle_RGBAColor(*from.footer_bottom_color_);
  } else {
    footer_bottom_color_ = nullptr;
  }
  if (from._internal_has_infolist_style()) {
    infolist_style_ = new ::mozc::renderer::RendererStyle_InfolistStyle(*from.infolist_style_);
  } else {
    infolist_style_ = nullptr;
  }
  ::memcpy(&window_border_, &from.window_border_,
    static_cast<size_t>(reinterpret_cast<char*>(&scrollbar_width_) -
    reinterpret_cast<char*>(&window_border_)) + sizeof(scrollbar_width_));
  // @@protoc_insertion_point(copy_constructor:mozc.renderer.RendererStyle)
}

void RendererStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto.base);
  column_minimum_width_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&border_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scrollbar_width_) -
      reinterpret_cast<char*>(&border_color_)) + sizeof(scrollbar_width_));
}

RendererStyle::~RendererStyle() {
  // @@protoc_insertion_point(destructor:mozc.renderer.RendererStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RendererStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  column_minimum_width_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete border_color_;
  if (this != internal_default_instance()) delete footer_style_;
  if (this != internal_default_instance()) delete footer_sub_label_style_;
  if (this != internal_default_instance()) delete focused_background_color_;
  if (this != internal_default_instance()) delete focused_border_color_;
  if (this != internal_default_instance()) delete scrollbar_background_color_;
  if (this != internal_default_instance()) delete scrollbar_indicator_color_;
  if (this != internal_default_instance()) delete footer_top_color_;
  if (this != internal_default_instance()) delete footer_bottom_color_;
  if (this != internal_default_instance()) delete infolist_style_;
}

void RendererStyle::ArenaDtor(void* object) {
  RendererStyle* _this = reinterpret_cast< RendererStyle* >(object);
  (void)_this;
}
void RendererStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RendererStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererStyle& RendererStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererStyle_protocol_2frenderer_5fstyle_2eproto.base);
  return *internal_default_instance();
}


void RendererStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.renderer.RendererStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_styles_.Clear();
  footer_border_colors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      column_minimum_width_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      logo_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(border_color_ != nullptr);
      border_color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(footer_style_ != nullptr);
      footer_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(footer_sub_label_style_ != nullptr);
      footer_sub_label_style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(focused_background_color_ != nullptr);
      focused_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(focused_border_color_ != nullptr);
      focused_border_color_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(scrollbar_background_color_ != nullptr);
      scrollbar_background_color_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scrollbar_indicator_color_ != nullptr);
      scrollbar_indicator_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(footer_top_color_ != nullptr);
      footer_top_color_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(footer_bottom_color_ != nullptr);
      footer_bottom_color_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(infolist_style_ != nullptr);
      infolist_style_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&window_border_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scrollbar_width_) -
        reinterpret_cast<char*>(&window_border_)) + sizeof(scrollbar_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RendererStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 window_border = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_window_border(&has_bits);
          window_border_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 footer_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_footer_height(&has_bits);
          footer_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 row_rect_padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_rect_padding(&has_bits);
          row_rect_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_border_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string column_minimum_width_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_column_minimum_width_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.renderer.RendererStyle.column_minimum_width_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_footer_border_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_sub_label_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_focused_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_focused_border_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_scrollbar_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_scrollbar_indicator_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scrollbar_width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_scrollbar_width(&has_bits);
          scrollbar_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_top_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_bottom_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string logo_file_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_logo_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.renderer.RendererStyle.logo_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_infolist_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RendererStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.renderer.RendererStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 window_border = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_window_border(), target);
  }

  // optional int32 footer_height = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_footer_height(), target);
  }

  // optional int32 row_rect_padding = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_row_rect_padding(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::border_color(this), target, stream);
  }

  // optional string column_minimum_width_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_column_minimum_width_string().data(), static_cast<int>(this->_internal_column_minimum_width_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.column_minimum_width_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_column_minimum_width_string(), target);
  }

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_text_styles(i), target, stream);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_footer_border_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_footer_border_colors(i), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::footer_style(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::footer_sub_label_style(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::focused_background_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::focused_border_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::scrollbar_background_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::scrollbar_indicator_color(this), target, stream);
  }

  // optional int32 scrollbar_width = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_scrollbar_width(), target);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::footer_top_color(this), target, stream);
  }

  // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::footer_bottom_color(this), target, stream);
  }

  // optional string logo_file_name = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logo_file_name().data(), static_cast<int>(this->_internal_logo_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.renderer.RendererStyle.logo_file_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_logo_file_name(), target);
  }

  // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::infolist_style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.renderer.RendererStyle)
  return target;
}

size_t RendererStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.renderer.RendererStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.renderer.RendererStyle.TextStyle text_styles = 6;
  total_size += 1UL * this->_internal_text_styles_size();
  for (const auto& msg : this->text_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mozc.renderer.RendererStyle.RGBAColor footer_border_colors = 7;
  total_size += 1UL * this->_internal_footer_border_colors_size();
  for (const auto& msg : this->footer_border_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string column_minimum_width_string = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_column_minimum_width_string());
    }

    // optional string logo_file_name = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logo_file_name());
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor border_color = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *border_color_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle footer_style = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_style_);
    }

    // optional .mozc.renderer.RendererStyle.TextStyle footer_sub_label_style = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_sub_label_style_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_background_color = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *focused_background_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor focused_border_color = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *focused_border_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_background_color = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scrollbar_background_color_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .mozc.renderer.RendererStyle.RGBAColor scrollbar_indicator_color = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scrollbar_indicator_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_top_color = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_top_color_);
    }

    // optional .mozc.renderer.RendererStyle.RGBAColor footer_bottom_color = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_bottom_color_);
    }

    // optional .mozc.renderer.RendererStyle.InfolistStyle infolist_style = 18;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *infolist_style_);
    }

    // optional int32 window_border = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_window_border());
    }

    // optional int32 footer_height = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_footer_height());
    }

    // optional int32 row_rect_padding = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_row_rect_padding());
    }

    // optional int32 scrollbar_width = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scrollbar_width());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.renderer.RendererStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const RendererStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RendererStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.renderer.RendererStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.renderer.RendererStyle)
    MergeFrom(*source);
  }
}

void RendererStyle::MergeFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.renderer.RendererStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_styles_.MergeFrom(from.text_styles_);
  footer_border_colors_.MergeFrom(from.footer_border_colors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_column_minimum_width_string(from._internal_column_minimum_width_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_logo_file_name(from._internal_logo_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_border_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_footer_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from._internal_footer_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_footer_sub_label_style()->::mozc::renderer::RendererStyle_TextStyle::MergeFrom(from._internal_footer_sub_label_style());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_focused_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_focused_background_color());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_focused_border_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_focused_border_color());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_scrollbar_background_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_scrollbar_background_color());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_scrollbar_indicator_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_scrollbar_indicator_color());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_footer_top_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_footer_top_color());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_footer_bottom_color()->::mozc::renderer::RendererStyle_RGBAColor::MergeFrom(from._internal_footer_bottom_color());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_infolist_style()->::mozc::renderer::RendererStyle_InfolistStyle::MergeFrom(from._internal_infolist_style());
    }
    if (cached_has_bits & 0x00001000u) {
      window_border_ = from.window_border_;
    }
    if (cached_has_bits & 0x00002000u) {
      footer_height_ = from.footer_height_;
    }
    if (cached_has_bits & 0x00004000u) {
      row_rect_padding_ = from.row_rect_padding_;
    }
    if (cached_has_bits & 0x00008000u) {
      scrollbar_width_ = from.scrollbar_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RendererStyle::CopyFrom(const RendererStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.renderer.RendererStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererStyle::IsInitialized() const {
  return true;
}

void RendererStyle::InternalSwap(RendererStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_styles_.InternalSwap(&other->text_styles_);
  footer_border_colors_.InternalSwap(&other->footer_border_colors_);
  column_minimum_width_string_.Swap(&other->column_minimum_width_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logo_file_name_.Swap(&other->logo_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RendererStyle, scrollbar_width_)
      + sizeof(RendererStyle::scrollbar_width_)
      - PROTOBUF_FIELD_OFFSET(RendererStyle, border_color_)>(
          reinterpret_cast<char*>(&border_color_),
          reinterpret_cast<char*>(&other->border_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RendererStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace renderer
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::renderer::RendererStyle_RGBAColor* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_RGBAColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::renderer::RendererStyle_RGBAColor >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::renderer::RendererStyle_TextStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_TextStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::renderer::RendererStyle_TextStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::renderer::RendererStyle_InfolistStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle_InfolistStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::renderer::RendererStyle_InfolistStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::renderer::RendererStyle* Arena::CreateMaybeMessage< ::mozc::renderer::RendererStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::renderer::RendererStyle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
