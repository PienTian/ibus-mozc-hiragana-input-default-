// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/candidates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fcandidates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fcandidates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fcandidates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcandidates_2eproto;
namespace mozc {
namespace commands {
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class CandidateList;
class CandidateListDefaultTypeInternal;
extern CandidateListDefaultTypeInternal _CandidateList_default_instance_;
class CandidateWord;
class CandidateWordDefaultTypeInternal;
extern CandidateWordDefaultTypeInternal _CandidateWord_default_instance_;
class Candidates;
class CandidatesDefaultTypeInternal;
extern CandidatesDefaultTypeInternal _Candidates_default_instance_;
class Candidates_Candidate;
class Candidates_CandidateDefaultTypeInternal;
extern Candidates_CandidateDefaultTypeInternal _Candidates_Candidate_default_instance_;
class Footer;
class FooterDefaultTypeInternal;
extern FooterDefaultTypeInternal _Footer_default_instance_;
class Information;
class InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class InformationList;
class InformationListDefaultTypeInternal;
extern InformationListDefaultTypeInternal _InformationList_default_instance_;
}  // namespace commands
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::commands::Annotation* Arena::CreateMaybeMessage<::mozc::commands::Annotation>(Arena*);
template<> ::mozc::commands::CandidateList* Arena::CreateMaybeMessage<::mozc::commands::CandidateList>(Arena*);
template<> ::mozc::commands::CandidateWord* Arena::CreateMaybeMessage<::mozc::commands::CandidateWord>(Arena*);
template<> ::mozc::commands::Candidates* Arena::CreateMaybeMessage<::mozc::commands::Candidates>(Arena*);
template<> ::mozc::commands::Candidates_Candidate* Arena::CreateMaybeMessage<::mozc::commands::Candidates_Candidate>(Arena*);
template<> ::mozc::commands::Footer* Arena::CreateMaybeMessage<::mozc::commands::Footer>(Arena*);
template<> ::mozc::commands::Information* Arena::CreateMaybeMessage<::mozc::commands::Information>(Arena*);
template<> ::mozc::commands::InformationList* Arena::CreateMaybeMessage<::mozc::commands::InformationList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace commands {

enum Candidates_Direction : int {
  Candidates_Direction_VERTICAL = 0,
  Candidates_Direction_HORIZONTAL = 1
};
bool Candidates_Direction_IsValid(int value);
constexpr Candidates_Direction Candidates_Direction_Direction_MIN = Candidates_Direction_VERTICAL;
constexpr Candidates_Direction Candidates_Direction_Direction_MAX = Candidates_Direction_HORIZONTAL;
constexpr int Candidates_Direction_Direction_ARRAYSIZE = Candidates_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Candidates_Direction_descriptor();
template<typename T>
inline const std::string& Candidates_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Candidates_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Candidates_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Candidates_Direction_descriptor(), enum_t_value);
}
inline bool Candidates_Direction_Parse(
    const std::string& name, Candidates_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Candidates_Direction>(
    Candidates_Direction_descriptor(), name, value);
}
enum Category : int {
  CONVERSION = 0,
  PREDICTION = 1,
  SUGGESTION = 2,
  TRANSLITERATION = 3,
  USAGE = 4
};
bool Category_IsValid(int value);
constexpr Category Category_MIN = CONVERSION;
constexpr Category Category_MAX = USAGE;
constexpr int Category_ARRAYSIZE = Category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Category_descriptor();
template<typename T>
inline const std::string& Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Category_descriptor(), enum_t_value);
}
inline bool Category_Parse(
    const std::string& name, Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Category>(
    Category_descriptor(), name, value);
}
enum DisplayType : int {
  MAIN = 0,
  CASCADE = 1
};
bool DisplayType_IsValid(int value);
constexpr DisplayType DisplayType_MIN = MAIN;
constexpr DisplayType DisplayType_MAX = CASCADE;
constexpr int DisplayType_ARRAYSIZE = DisplayType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisplayType_descriptor();
template<typename T>
inline const std::string& DisplayType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisplayType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisplayType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DisplayType_descriptor(), enum_t_value);
}
inline bool DisplayType_Parse(
    const std::string& name, DisplayType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DisplayType>(
    DisplayType_descriptor(), name, value);
}
enum CandidateAttribute : int {
  DEFAULT_ATTRIBUTE = 0,
  USER_DICTIONARY = 1,
  USER_HISTORY = 2,
  SPELLING_CORRECTION = 3,
  TYPING_CORRECTION = 4
};
bool CandidateAttribute_IsValid(int value);
constexpr CandidateAttribute CandidateAttribute_MIN = DEFAULT_ATTRIBUTE;
constexpr CandidateAttribute CandidateAttribute_MAX = TYPING_CORRECTION;
constexpr int CandidateAttribute_ARRAYSIZE = CandidateAttribute_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandidateAttribute_descriptor();
template<typename T>
inline const std::string& CandidateAttribute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CandidateAttribute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CandidateAttribute_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CandidateAttribute_descriptor(), enum_t_value);
}
inline bool CandidateAttribute_Parse(
    const std::string& name, CandidateAttribute* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CandidateAttribute>(
    CandidateAttribute_descriptor(), name, value);
}
// ===================================================================

class Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {};
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kSuffixFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kShortcutFieldNumber = 4,
    kDeletableFieldNumber = 5,
  };
  // optional string prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prefix(
      std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional string suffix = 2;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suffix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suffix(
      std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string shortcut = 4;
  bool has_shortcut() const;
  private:
  bool _internal_has_shortcut() const;
  public:
  void clear_shortcut();
  const std::string& shortcut() const;
  void set_shortcut(const std::string& value);
  void set_shortcut(std::string&& value);
  void set_shortcut(const char* value);
  void set_shortcut(const char* value, size_t size);
  std::string* mutable_shortcut();
  std::string* release_shortcut();
  void set_allocated_shortcut(std::string* shortcut);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shortcut();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shortcut(
      std::string* shortcut);
  private:
  const std::string& _internal_shortcut() const;
  void _internal_set_shortcut(const std::string& value);
  std::string* _internal_mutable_shortcut();
  public:

  // optional bool deletable = 5 [default = false];
  bool has_deletable() const;
  private:
  bool _internal_has_deletable() const;
  public:
  void clear_deletable();
  bool deletable() const;
  void set_deletable(bool value);
  private:
  bool _internal_deletable() const;
  void _internal_set_deletable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcut_;
  bool deletable_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class Information PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.Information) */ {
 public:
  inline Information() : Information(nullptr) {};
  virtual ~Information();

  Information(const Information& from);
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Information& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Information* New() const final {
    return CreateMaybeMessage<Information>(nullptr);
  }

  Information* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Information& from);
  void MergeFrom(const Information& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Information* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.Information";
  }
  protected:
  explicit Information(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateIdFieldNumber = 4,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated int32 candidate_id = 4;
  int candidate_id_size() const;
  private:
  int _internal_candidate_id_size() const;
  public:
  void clear_candidate_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidate_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_candidate_id() const;
  void _internal_add_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_candidate_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 candidate_id(int index) const;
  void set_candidate_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      candidate_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_candidate_id();

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.Information)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class InformationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.InformationList) */ {
 public:
  inline InformationList() : InformationList(nullptr) {};
  virtual ~InformationList();

  InformationList(const InformationList& from);
  InformationList(InformationList&& from) noexcept
    : InformationList() {
    *this = ::std::move(from);
  }

  inline InformationList& operator=(const InformationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformationList& operator=(InformationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InformationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InformationList* internal_default_instance() {
    return reinterpret_cast<const InformationList*>(
               &_InformationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InformationList& a, InformationList& b) {
    a.Swap(&b);
  }
  inline void Swap(InformationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InformationList* New() const final {
    return CreateMaybeMessage<InformationList>(nullptr);
  }

  InformationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InformationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InformationList& from);
  void MergeFrom(const InformationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InformationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.InformationList";
  }
  protected:
  explicit InformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 2,
    kFocusedIndexFieldNumber = 1,
    kCategoryFieldNumber = 3,
    kDisplayTypeFieldNumber = 4,
    kDelayFieldNumber = 5,
  };
  // repeated .mozc.commands.Information information = 2;
  int information_size() const;
  private:
  int _internal_information_size() const;
  public:
  void clear_information();
  ::mozc::commands::Information* mutable_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Information >*
      mutable_information();
  private:
  const ::mozc::commands::Information& _internal_information(int index) const;
  ::mozc::commands::Information* _internal_add_information();
  public:
  const ::mozc::commands::Information& information(int index) const;
  ::mozc::commands::Information* add_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Information >&
      information() const;

  // optional uint32 focused_index = 1;
  bool has_focused_index() const;
  private:
  bool _internal_has_focused_index() const;
  public:
  void clear_focused_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index() const;
  void set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_focused_index() const;
  void _internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::mozc::commands::Category category() const;
  void set_category(::mozc::commands::Category value);
  private:
  ::mozc::commands::Category _internal_category() const;
  void _internal_set_category(::mozc::commands::Category value);
  public:

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  bool has_display_type() const;
  private:
  bool _internal_has_display_type() const;
  public:
  void clear_display_type();
  ::mozc::commands::DisplayType display_type() const;
  void set_display_type(::mozc::commands::DisplayType value);
  private:
  ::mozc::commands::DisplayType _internal_display_type() const;
  void _internal_set_display_type(::mozc::commands::DisplayType value);
  public:

  // optional uint32 delay = 5 [default = 500];
  bool has_delay() const;
  private:
  bool _internal_has_delay() const;
  public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.InformationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Information > information_;
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index_;
  int category_;
  int display_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 delay_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class Footer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.Footer) */ {
 public:
  inline Footer() : Footer(nullptr) {};
  virtual ~Footer();

  Footer(const Footer& from);
  Footer(Footer&& from) noexcept
    : Footer() {
    *this = ::std::move(from);
  }

  inline Footer& operator=(const Footer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Footer& operator=(Footer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Footer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Footer* internal_default_instance() {
    return reinterpret_cast<const Footer*>(
               &_Footer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Footer& a, Footer& b) {
    a.Swap(&b);
  }
  inline void Swap(Footer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Footer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Footer* New() const final {
    return CreateMaybeMessage<Footer>(nullptr);
  }

  Footer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Footer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Footer& from);
  void MergeFrom(const Footer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Footer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.Footer";
  }
  protected:
  explicit Footer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kSubLabelFieldNumber = 4,
    kIndexVisibleFieldNumber = 2,
    kLogoVisibleFieldNumber = 3,
  };
  // optional string label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_label(
      std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string sub_label = 4;
  bool has_sub_label() const;
  private:
  bool _internal_has_sub_label() const;
  public:
  void clear_sub_label();
  const std::string& sub_label() const;
  void set_sub_label(const std::string& value);
  void set_sub_label(std::string&& value);
  void set_sub_label(const char* value);
  void set_sub_label(const char* value, size_t size);
  std::string* mutable_sub_label();
  std::string* release_sub_label();
  void set_allocated_sub_label(std::string* sub_label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sub_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sub_label(
      std::string* sub_label);
  private:
  const std::string& _internal_sub_label() const;
  void _internal_set_sub_label(const std::string& value);
  std::string* _internal_mutable_sub_label();
  public:

  // optional bool index_visible = 2 [default = false];
  bool has_index_visible() const;
  private:
  bool _internal_has_index_visible() const;
  public:
  void clear_index_visible();
  bool index_visible() const;
  void set_index_visible(bool value);
  private:
  bool _internal_index_visible() const;
  void _internal_set_index_visible(bool value);
  public:

  // optional bool logo_visible = 3 [default = false];
  bool has_logo_visible() const;
  private:
  bool _internal_has_logo_visible() const;
  public:
  void clear_logo_visible();
  bool logo_visible() const;
  void set_logo_visible(bool value);
  private:
  bool _internal_logo_visible() const;
  void _internal_set_logo_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.Footer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_label_;
  bool index_visible_;
  bool logo_visible_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class CandidateWord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.CandidateWord) */ {
 public:
  inline CandidateWord() : CandidateWord(nullptr) {};
  virtual ~CandidateWord();

  CandidateWord(const CandidateWord& from);
  CandidateWord(CandidateWord&& from) noexcept
    : CandidateWord() {
    *this = ::std::move(from);
  }

  inline CandidateWord& operator=(const CandidateWord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateWord& operator=(CandidateWord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandidateWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateWord* internal_default_instance() {
    return reinterpret_cast<const CandidateWord*>(
               &_CandidateWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CandidateWord& a, CandidateWord& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateWord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateWord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateWord* New() const final {
    return CreateMaybeMessage<CandidateWord>(nullptr);
  }

  CandidateWord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateWord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandidateWord& from);
  void MergeFrom(const CandidateWord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateWord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.CandidateWord";
  }
  protected:
  explicit CandidateWord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 6,
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kAnnotationFieldNumber = 5,
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kNumSegmentsInCandidateFieldNumber = 7,
  };
  // repeated .mozc.commands.CandidateAttribute attributes = 6;
  int attributes_size() const;
  private:
  int _internal_attributes_size() const;
  public:
  void clear_attributes();
  private:
  ::mozc::commands::CandidateAttribute _internal_attributes(int index) const;
  void _internal_add_attributes(::mozc::commands::CandidateAttribute value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_attributes();
  public:
  ::mozc::commands::CandidateAttribute attributes(int index) const;
  void set_attributes(int index, ::mozc::commands::CandidateAttribute value);
  void add_attributes(::mozc::commands::CandidateAttribute value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_attributes();

  // optional string key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .mozc.commands.Annotation annotation = 5;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::mozc::commands::Annotation& annotation() const;
  ::mozc::commands::Annotation* release_annotation();
  ::mozc::commands::Annotation* mutable_annotation();
  void set_allocated_annotation(::mozc::commands::Annotation* annotation);
  private:
  const ::mozc::commands::Annotation& _internal_annotation() const;
  ::mozc::commands::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::mozc::commands::Annotation* annotation);
  ::mozc::commands::Annotation* unsafe_arena_release_annotation();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 num_segments_in_candidate = 7;
  bool has_num_segments_in_candidate() const;
  private:
  bool _internal_has_num_segments_in_candidate() const;
  public:
  void clear_num_segments_in_candidate();
  ::PROTOBUF_NAMESPACE_ID::int32 num_segments_in_candidate() const;
  void set_num_segments_in_candidate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_segments_in_candidate() const;
  void _internal_set_num_segments_in_candidate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.CandidateWord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::mozc::commands::Annotation* annotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_segments_in_candidate_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class CandidateList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.CandidateList) */ {
 public:
  inline CandidateList() : CandidateList(nullptr) {};
  virtual ~CandidateList();

  CandidateList(const CandidateList& from);
  CandidateList(CandidateList&& from) noexcept
    : CandidateList() {
    *this = ::std::move(from);
  }

  inline CandidateList& operator=(const CandidateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateList& operator=(CandidateList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandidateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateList* internal_default_instance() {
    return reinterpret_cast<const CandidateList*>(
               &_CandidateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CandidateList& a, CandidateList& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateList* New() const final {
    return CreateMaybeMessage<CandidateList>(nullptr);
  }

  CandidateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandidateList& from);
  void MergeFrom(const CandidateList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.CandidateList";
  }
  protected:
  explicit CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 2,
    kFocusedIndexFieldNumber = 1,
    kCategoryFieldNumber = 3,
  };
  // repeated .mozc.commands.CandidateWord candidates = 2;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::mozc::commands::CandidateWord* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::CandidateWord >*
      mutable_candidates();
  private:
  const ::mozc::commands::CandidateWord& _internal_candidates(int index) const;
  ::mozc::commands::CandidateWord* _internal_add_candidates();
  public:
  const ::mozc::commands::CandidateWord& candidates(int index) const;
  ::mozc::commands::CandidateWord* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::CandidateWord >&
      candidates() const;

  // optional uint32 focused_index = 1;
  bool has_focused_index() const;
  private:
  bool _internal_has_focused_index() const;
  public:
  void clear_focused_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index() const;
  void set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_focused_index() const;
  void _internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::mozc::commands::Category category() const;
  void set_category(::mozc::commands::Category value);
  private:
  ::mozc::commands::Category _internal_category() const;
  void _internal_set_category(::mozc::commands::Category value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.CandidateList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::CandidateWord > candidates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index_;
  int category_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class Candidates_Candidate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.Candidates.Candidate) */ {
 public:
  inline Candidates_Candidate() : Candidates_Candidate(nullptr) {};
  virtual ~Candidates_Candidate();

  Candidates_Candidate(const Candidates_Candidate& from);
  Candidates_Candidate(Candidates_Candidate&& from) noexcept
    : Candidates_Candidate() {
    *this = ::std::move(from);
  }

  inline Candidates_Candidate& operator=(const Candidates_Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candidates_Candidate& operator=(Candidates_Candidate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candidates_Candidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candidates_Candidate* internal_default_instance() {
    return reinterpret_cast<const Candidates_Candidate*>(
               &_Candidates_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Candidates_Candidate& a, Candidates_Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(Candidates_Candidate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candidates_Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candidates_Candidate* New() const final {
    return CreateMaybeMessage<Candidates_Candidate>(nullptr);
  }

  Candidates_Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candidates_Candidate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candidates_Candidate& from);
  void MergeFrom(const Candidates_Candidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candidates_Candidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.Candidates.Candidate";
  }
  protected:
  explicit Candidates_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 5,
    kAnnotationFieldNumber = 7,
    kInformationIdFieldNumber = 10,
    kIndexFieldNumber = 4,
    kIdFieldNumber = 9,
  };
  // required string value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional .mozc.commands.Annotation annotation = 7;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::mozc::commands::Annotation& annotation() const;
  ::mozc::commands::Annotation* release_annotation();
  ::mozc::commands::Annotation* mutable_annotation();
  void set_allocated_annotation(::mozc::commands::Annotation* annotation);
  private:
  const ::mozc::commands::Annotation& _internal_annotation() const;
  ::mozc::commands::Annotation* _internal_mutable_annotation();
  public:
  void unsafe_arena_set_allocated_annotation(
      ::mozc::commands::Annotation* annotation);
  ::mozc::commands::Annotation* unsafe_arena_release_annotation();

  // optional int32 information_id = 10;
  bool has_information_id() const;
  private:
  bool _internal_has_information_id() const;
  public:
  void clear_information_id();
  ::PROTOBUF_NAMESPACE_ID::int32 information_id() const;
  void set_information_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_information_id() const;
  void _internal_set_information_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 id = 9;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.Candidates.Candidate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::mozc::commands::Annotation* annotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 information_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// -------------------------------------------------------------------

class Candidates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.Candidates) */ {
 public:
  inline Candidates() : Candidates(nullptr) {};
  virtual ~Candidates();

  Candidates(const Candidates& from);
  Candidates(Candidates&& from) noexcept
    : Candidates() {
    *this = ::std::move(from);
  }

  inline Candidates& operator=(const Candidates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candidates& operator=(Candidates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Candidates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Candidates* internal_default_instance() {
    return reinterpret_cast<const Candidates*>(
               &_Candidates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Candidates& a, Candidates& b) {
    a.Swap(&b);
  }
  inline void Swap(Candidates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candidates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Candidates* New() const final {
    return CreateMaybeMessage<Candidates>(nullptr);
  }

  Candidates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Candidates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Candidates& from);
  void MergeFrom(const Candidates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Candidates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.Candidates";
  }
  protected:
  explicit Candidates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fcandidates_2eproto);
    return ::descriptor_table_protocol_2fcandidates_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Candidates_Candidate Candidate;

  typedef Candidates_Direction Direction;
  static constexpr Direction VERTICAL =
    Candidates_Direction_VERTICAL;
  static constexpr Direction HORIZONTAL =
    Candidates_Direction_HORIZONTAL;
  static inline bool Direction_IsValid(int value) {
    return Candidates_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    Candidates_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    Candidates_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    Candidates_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return Candidates_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return Candidates_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return Candidates_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 3,
    kSubcandidatesFieldNumber = 8,
    kUsagesFieldNumber = 10,
    kFooterFieldNumber = 13,
    kFocusedIndexFieldNumber = 1,
    kSizeFieldNumber = 2,
    kPositionFieldNumber = 6,
    kCategoryFieldNumber = 11,
    kDisplayTypeFieldNumber = 12,
    kDirectionFieldNumber = 14,
    kPageSizeFieldNumber = 18,
  };
  // repeated group Candidate = 3 { ... };
  int candidate_size() const;
  private:
  int _internal_candidate_size() const;
  public:
  void clear_candidate();
  ::mozc::commands::Candidates_Candidate* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >*
      mutable_candidate();
  private:
  const ::mozc::commands::Candidates_Candidate& _internal_candidate(int index) const;
  ::mozc::commands::Candidates_Candidate* _internal_add_candidate();
  public:
  const ::mozc::commands::Candidates_Candidate& candidate(int index) const;
  ::mozc::commands::Candidates_Candidate* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >&
      candidate() const;

  // optional .mozc.commands.Candidates subcandidates = 8;
  bool has_subcandidates() const;
  private:
  bool _internal_has_subcandidates() const;
  public:
  void clear_subcandidates();
  const ::mozc::commands::Candidates& subcandidates() const;
  ::mozc::commands::Candidates* release_subcandidates();
  ::mozc::commands::Candidates* mutable_subcandidates();
  void set_allocated_subcandidates(::mozc::commands::Candidates* subcandidates);
  private:
  const ::mozc::commands::Candidates& _internal_subcandidates() const;
  ::mozc::commands::Candidates* _internal_mutable_subcandidates();
  public:
  void unsafe_arena_set_allocated_subcandidates(
      ::mozc::commands::Candidates* subcandidates);
  ::mozc::commands::Candidates* unsafe_arena_release_subcandidates();

  // optional .mozc.commands.InformationList usages = 10;
  bool has_usages() const;
  private:
  bool _internal_has_usages() const;
  public:
  void clear_usages();
  const ::mozc::commands::InformationList& usages() const;
  ::mozc::commands::InformationList* release_usages();
  ::mozc::commands::InformationList* mutable_usages();
  void set_allocated_usages(::mozc::commands::InformationList* usages);
  private:
  const ::mozc::commands::InformationList& _internal_usages() const;
  ::mozc::commands::InformationList* _internal_mutable_usages();
  public:
  void unsafe_arena_set_allocated_usages(
      ::mozc::commands::InformationList* usages);
  ::mozc::commands::InformationList* unsafe_arena_release_usages();

  // optional .mozc.commands.Footer footer = 13;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const ::mozc::commands::Footer& footer() const;
  ::mozc::commands::Footer* release_footer();
  ::mozc::commands::Footer* mutable_footer();
  void set_allocated_footer(::mozc::commands::Footer* footer);
  private:
  const ::mozc::commands::Footer& _internal_footer() const;
  ::mozc::commands::Footer* _internal_mutable_footer();
  public:
  void unsafe_arena_set_allocated_footer(
      ::mozc::commands::Footer* footer);
  ::mozc::commands::Footer* unsafe_arena_release_footer();

  // optional uint32 focused_index = 1;
  bool has_focused_index() const;
  private:
  bool _internal_has_focused_index() const;
  public:
  void clear_focused_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index() const;
  void set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_focused_index() const;
  void _internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::mozc::commands::Category category() const;
  void set_category(::mozc::commands::Category value);
  private:
  ::mozc::commands::Category _internal_category() const;
  void _internal_set_category(::mozc::commands::Category value);
  public:

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  bool has_display_type() const;
  private:
  bool _internal_has_display_type() const;
  public:
  void clear_display_type();
  ::mozc::commands::DisplayType display_type() const;
  void set_display_type(::mozc::commands::DisplayType value);
  private:
  ::mozc::commands::DisplayType _internal_display_type() const;
  void _internal_set_display_type(::mozc::commands::DisplayType value);
  public:

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::mozc::commands::Candidates_Direction direction() const;
  void set_direction(::mozc::commands::Candidates_Direction value);
  private:
  ::mozc::commands::Candidates_Direction _internal_direction() const;
  void _internal_set_direction(::mozc::commands::Candidates_Direction value);
  public:

  // optional uint32 page_size = 18 [default = 9];
  bool has_page_size() const;
  private:
  bool _internal_has_page_size() const;
  public:
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.Candidates)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Candidates_Candidate > candidate_;
  ::mozc::commands::Candidates* subcandidates_;
  ::mozc::commands::InformationList* usages_;
  ::mozc::commands::Footer* footer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 focused_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  int category_;
  int display_type_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_;
  friend struct ::TableStruct_protocol_2fcandidates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotation

// optional string prefix = 1;
inline bool Annotation::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Annotation::has_prefix() const {
  return _internal_has_prefix();
}
inline void Annotation::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Annotation::prefix() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.prefix)
  return _internal_prefix();
}
inline void Annotation::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.prefix)
}
inline std::string* Annotation::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& Annotation::_internal_prefix() const {
  return prefix_.Get();
}
inline void Annotation::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Annotation.prefix)
}
inline void Annotation::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.prefix)
}
inline void Annotation::set_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.prefix)
}
inline std::string* Annotation::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_prefix() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.prefix)
}
inline std::string* Annotation::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Annotation.prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Annotation::unsafe_arena_set_allocated_prefix(
    std::string* prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Annotation.prefix)
}

// optional string suffix = 2;
inline bool Annotation::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Annotation::has_suffix() const {
  return _internal_has_suffix();
}
inline void Annotation::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Annotation::suffix() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.suffix)
  return _internal_suffix();
}
inline void Annotation::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.suffix)
}
inline std::string* Annotation::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& Annotation::_internal_suffix() const {
  return suffix_.Get();
}
inline void Annotation::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Annotation.suffix)
}
inline void Annotation::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.suffix)
}
inline void Annotation::set_suffix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.suffix)
}
inline std::string* Annotation::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000002u;
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_suffix() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.suffix)
}
inline std::string* Annotation::unsafe_arena_release_suffix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Annotation.suffix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return suffix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Annotation::unsafe_arena_set_allocated_suffix(
    std::string* suffix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suffix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suffix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Annotation.suffix)
}

// optional string description = 3;
inline bool Annotation::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Annotation::has_description() const {
  return _internal_has_description();
}
inline void Annotation::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Annotation::description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.description)
  return _internal_description();
}
inline void Annotation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.description)
}
inline std::string* Annotation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.description)
  return _internal_mutable_description();
}
inline const std::string& Annotation::_internal_description() const {
  return description_.Get();
}
inline void Annotation::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Annotation.description)
}
inline void Annotation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.description)
}
inline void Annotation::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.description)
}
inline std::string* Annotation::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000004u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.description)
}
inline std::string* Annotation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Annotation.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Annotation::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Annotation.description)
}

// optional string shortcut = 4;
inline bool Annotation::_internal_has_shortcut() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Annotation::has_shortcut() const {
  return _internal_has_shortcut();
}
inline void Annotation::clear_shortcut() {
  shortcut_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Annotation::shortcut() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.shortcut)
  return _internal_shortcut();
}
inline void Annotation::set_shortcut(const std::string& value) {
  _internal_set_shortcut(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.shortcut)
}
inline std::string* Annotation::mutable_shortcut() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Annotation.shortcut)
  return _internal_mutable_shortcut();
}
inline const std::string& Annotation::_internal_shortcut() const {
  return shortcut_.Get();
}
inline void Annotation::_internal_set_shortcut(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  shortcut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Annotation::set_shortcut(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  shortcut_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Annotation.shortcut)
}
inline void Annotation::set_shortcut(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  shortcut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Annotation.shortcut)
}
inline void Annotation::set_shortcut(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  shortcut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Annotation.shortcut)
}
inline std::string* Annotation::_internal_mutable_shortcut() {
  _has_bits_[0] |= 0x00000008u;
  return shortcut_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Annotation::release_shortcut() {
  // @@protoc_insertion_point(field_release:mozc.commands.Annotation.shortcut)
  if (!_internal_has_shortcut()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return shortcut_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Annotation::set_allocated_shortcut(std::string* shortcut) {
  if (shortcut != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shortcut_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortcut,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Annotation.shortcut)
}
inline std::string* Annotation::unsafe_arena_release_shortcut() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Annotation.shortcut)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return shortcut_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Annotation::unsafe_arena_set_allocated_shortcut(
    std::string* shortcut) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shortcut != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shortcut_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shortcut, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Annotation.shortcut)
}

// optional bool deletable = 5 [default = false];
inline bool Annotation::_internal_has_deletable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Annotation::has_deletable() const {
  return _internal_has_deletable();
}
inline void Annotation::clear_deletable() {
  deletable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Annotation::_internal_deletable() const {
  return deletable_;
}
inline bool Annotation::deletable() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Annotation.deletable)
  return _internal_deletable();
}
inline void Annotation::_internal_set_deletable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  deletable_ = value;
}
inline void Annotation::set_deletable(bool value) {
  _internal_set_deletable(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Annotation.deletable)
}

// -------------------------------------------------------------------

// Information

// optional int32 id = 1;
inline bool Information::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Information::has_id() const {
  return _internal_has_id();
}
inline void Information::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.id)
  return _internal_id();
}
inline void Information::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Information::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.id)
}

// optional string title = 2;
inline bool Information::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Information::has_title() const {
  return _internal_has_title();
}
inline void Information::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Information::title() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.title)
  return _internal_title();
}
inline void Information::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.title)
}
inline std::string* Information::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Information.title)
  return _internal_mutable_title();
}
inline const std::string& Information::_internal_title() const {
  return title_.Get();
}
inline void Information::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Information::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Information.title)
}
inline void Information::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Information.title)
}
inline void Information::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Information.title)
}
inline std::string* Information::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Information::release_title() {
  // @@protoc_insertion_point(field_release:mozc.commands.Information.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Information.title)
}
inline std::string* Information::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Information.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Information::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Information.title)
}

// optional string description = 3;
inline bool Information::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Information::has_description() const {
  return _internal_has_description();
}
inline void Information::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Information::description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.description)
  return _internal_description();
}
inline void Information::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.description)
}
inline std::string* Information::mutable_description() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Information.description)
  return _internal_mutable_description();
}
inline const std::string& Information::_internal_description() const {
  return description_.Get();
}
inline void Information::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Information::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Information.description)
}
inline void Information::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Information.description)
}
inline void Information::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Information.description)
}
inline std::string* Information::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Information::release_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.Information.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Information::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Information.description)
}
inline std::string* Information::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Information.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Information::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Information.description)
}

// repeated int32 candidate_id = 4;
inline int Information::_internal_candidate_id_size() const {
  return candidate_id_.size();
}
inline int Information::candidate_id_size() const {
  return _internal_candidate_id_size();
}
inline void Information::clear_candidate_id() {
  candidate_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::_internal_candidate_id(int index) const {
  return candidate_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Information::candidate_id(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Information.candidate_id)
  return _internal_candidate_id(index);
}
inline void Information::set_candidate_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  candidate_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.commands.Information.candidate_id)
}
inline void Information::_internal_add_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  candidate_id_.Add(value);
}
inline void Information::add_candidate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_candidate_id(value);
  // @@protoc_insertion_point(field_add:mozc.commands.Information.candidate_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Information::_internal_candidate_id() const {
  return candidate_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Information::candidate_id() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Information.candidate_id)
  return _internal_candidate_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Information::_internal_mutable_candidate_id() {
  return &candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Information::mutable_candidate_id() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Information.candidate_id)
  return _internal_mutable_candidate_id();
}

// -------------------------------------------------------------------

// InformationList

// optional uint32 focused_index = 1;
inline bool InformationList::_internal_has_focused_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InformationList::has_focused_index() const {
  return _internal_has_focused_index();
}
inline void InformationList::clear_focused_index() {
  focused_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InformationList::_internal_focused_index() const {
  return focused_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InformationList::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.focused_index)
  return _internal_focused_index();
}
inline void InformationList::_internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  focused_index_ = value;
}
inline void InformationList::set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_focused_index(value);
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.focused_index)
}

// repeated .mozc.commands.Information information = 2;
inline int InformationList::_internal_information_size() const {
  return information_.size();
}
inline int InformationList::information_size() const {
  return _internal_information_size();
}
inline void InformationList::clear_information() {
  information_.Clear();
}
inline ::mozc::commands::Information* InformationList::mutable_information(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.InformationList.information)
  return information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Information >*
InformationList::mutable_information() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.InformationList.information)
  return &information_;
}
inline const ::mozc::commands::Information& InformationList::_internal_information(int index) const {
  return information_.Get(index);
}
inline const ::mozc::commands::Information& InformationList::information(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.information)
  return _internal_information(index);
}
inline ::mozc::commands::Information* InformationList::_internal_add_information() {
  return information_.Add();
}
inline ::mozc::commands::Information* InformationList::add_information() {
  // @@protoc_insertion_point(field_add:mozc.commands.InformationList.information)
  return _internal_add_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Information >&
InformationList::information() const {
  // @@protoc_insertion_point(field_list:mozc.commands.InformationList.information)
  return information_;
}

// optional .mozc.commands.Category category = 3 [default = CONVERSION];
inline bool InformationList::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InformationList::has_category() const {
  return _internal_has_category();
}
inline void InformationList::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mozc::commands::Category InformationList::_internal_category() const {
  return static_cast< ::mozc::commands::Category >(category_);
}
inline ::mozc::commands::Category InformationList::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.category)
  return _internal_category();
}
inline void InformationList::_internal_set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  category_ = value;
}
inline void InformationList::set_category(::mozc::commands::Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.category)
}

// optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
inline bool InformationList::_internal_has_display_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InformationList::has_display_type() const {
  return _internal_has_display_type();
}
inline void InformationList::clear_display_type() {
  display_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::mozc::commands::DisplayType InformationList::_internal_display_type() const {
  return static_cast< ::mozc::commands::DisplayType >(display_type_);
}
inline ::mozc::commands::DisplayType InformationList::display_type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.display_type)
  return _internal_display_type();
}
inline void InformationList::_internal_set_display_type(::mozc::commands::DisplayType value) {
  assert(::mozc::commands::DisplayType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  display_type_ = value;
}
inline void InformationList::set_display_type(::mozc::commands::DisplayType value) {
  _internal_set_display_type(value);
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.display_type)
}

// optional uint32 delay = 5 [default = 500];
inline bool InformationList::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InformationList::has_delay() const {
  return _internal_has_delay();
}
inline void InformationList::clear_delay() {
  delay_ = 500u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InformationList::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InformationList::delay() const {
  // @@protoc_insertion_point(field_get:mozc.commands.InformationList.delay)
  return _internal_delay();
}
inline void InformationList::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  delay_ = value;
}
inline void InformationList::set_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:mozc.commands.InformationList.delay)
}

// -------------------------------------------------------------------

// Footer

// optional string label = 1;
inline bool Footer::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Footer::has_label() const {
  return _internal_has_label();
}
inline void Footer::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Footer::label() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.label)
  return _internal_label();
}
inline void Footer::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.label)
}
inline std::string* Footer::mutable_label() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Footer.label)
  return _internal_mutable_label();
}
inline const std::string& Footer::_internal_label() const {
  return label_.Get();
}
inline void Footer::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Footer::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Footer.label)
}
inline void Footer::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Footer.label)
}
inline void Footer::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Footer.label)
}
inline std::string* Footer::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Footer::release_label() {
  // @@protoc_insertion_point(field_release:mozc.commands.Footer.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Footer::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Footer.label)
}
inline std::string* Footer::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Footer.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Footer::unsafe_arena_set_allocated_label(
    std::string* label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Footer.label)
}

// optional bool index_visible = 2 [default = false];
inline bool Footer::_internal_has_index_visible() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Footer::has_index_visible() const {
  return _internal_has_index_visible();
}
inline void Footer::clear_index_visible() {
  index_visible_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Footer::_internal_index_visible() const {
  return index_visible_;
}
inline bool Footer::index_visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.index_visible)
  return _internal_index_visible();
}
inline void Footer::_internal_set_index_visible(bool value) {
  _has_bits_[0] |= 0x00000004u;
  index_visible_ = value;
}
inline void Footer::set_index_visible(bool value) {
  _internal_set_index_visible(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.index_visible)
}

// optional bool logo_visible = 3 [default = false];
inline bool Footer::_internal_has_logo_visible() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Footer::has_logo_visible() const {
  return _internal_has_logo_visible();
}
inline void Footer::clear_logo_visible() {
  logo_visible_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Footer::_internal_logo_visible() const {
  return logo_visible_;
}
inline bool Footer::logo_visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.logo_visible)
  return _internal_logo_visible();
}
inline void Footer::_internal_set_logo_visible(bool value) {
  _has_bits_[0] |= 0x00000008u;
  logo_visible_ = value;
}
inline void Footer::set_logo_visible(bool value) {
  _internal_set_logo_visible(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.logo_visible)
}

// optional string sub_label = 4;
inline bool Footer::_internal_has_sub_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Footer::has_sub_label() const {
  return _internal_has_sub_label();
}
inline void Footer::clear_sub_label() {
  sub_label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Footer::sub_label() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Footer.sub_label)
  return _internal_sub_label();
}
inline void Footer::set_sub_label(const std::string& value) {
  _internal_set_sub_label(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Footer.sub_label)
}
inline std::string* Footer::mutable_sub_label() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Footer.sub_label)
  return _internal_mutable_sub_label();
}
inline const std::string& Footer::_internal_sub_label() const {
  return sub_label_.Get();
}
inline void Footer::_internal_set_sub_label(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sub_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Footer::set_sub_label(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sub_label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Footer.sub_label)
}
inline void Footer::set_sub_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sub_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Footer.sub_label)
}
inline void Footer::set_sub_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sub_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Footer.sub_label)
}
inline std::string* Footer::_internal_mutable_sub_label() {
  _has_bits_[0] |= 0x00000002u;
  return sub_label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Footer::release_sub_label() {
  // @@protoc_insertion_point(field_release:mozc.commands.Footer.sub_label)
  if (!_internal_has_sub_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sub_label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Footer::set_allocated_sub_label(std::string* sub_label) {
  if (sub_label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sub_label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Footer.sub_label)
}
inline std::string* Footer::unsafe_arena_release_sub_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Footer.sub_label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return sub_label_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Footer::unsafe_arena_set_allocated_sub_label(
    std::string* sub_label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sub_label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sub_label_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sub_label, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Footer.sub_label)
}

// -------------------------------------------------------------------

// CandidateWord

// optional int32 id = 1;
inline bool CandidateWord::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CandidateWord::has_id() const {
  return _internal_has_id();
}
inline void CandidateWord::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateWord::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateWord::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.id)
  return _internal_id();
}
inline void CandidateWord::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CandidateWord::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.id)
}

// optional uint32 index = 2;
inline bool CandidateWord::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CandidateWord::has_index() const {
  return _internal_has_index();
}
inline void CandidateWord::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CandidateWord::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CandidateWord::index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.index)
  return _internal_index();
}
inline void CandidateWord::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void CandidateWord::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.index)
}

// optional string key = 3;
inline bool CandidateWord::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CandidateWord::has_key() const {
  return _internal_has_key();
}
inline void CandidateWord::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CandidateWord::key() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.key)
  return _internal_key();
}
inline void CandidateWord::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.key)
}
inline std::string* CandidateWord::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.key)
  return _internal_mutable_key();
}
inline const std::string& CandidateWord::_internal_key() const {
  return key_.Get();
}
inline void CandidateWord::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CandidateWord::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.CandidateWord.key)
}
inline void CandidateWord::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.CandidateWord.key)
}
inline void CandidateWord::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.CandidateWord.key)
}
inline std::string* CandidateWord::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CandidateWord::release_key() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandidateWord::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.key)
}
inline std::string* CandidateWord::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.CandidateWord.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CandidateWord::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.CandidateWord.key)
}

// optional string value = 4;
inline bool CandidateWord::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CandidateWord::has_value() const {
  return _internal_has_value();
}
inline void CandidateWord::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CandidateWord::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.value)
  return _internal_value();
}
inline void CandidateWord::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.value)
}
inline std::string* CandidateWord::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.value)
  return _internal_mutable_value();
}
inline const std::string& CandidateWord::_internal_value() const {
  return value_.Get();
}
inline void CandidateWord::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CandidateWord::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.CandidateWord.value)
}
inline void CandidateWord::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.CandidateWord.value)
}
inline void CandidateWord::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.CandidateWord.value)
}
inline std::string* CandidateWord::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CandidateWord::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CandidateWord::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.value)
}
inline std::string* CandidateWord::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.CandidateWord.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CandidateWord::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.CandidateWord.value)
}

// optional .mozc.commands.Annotation annotation = 5;
inline bool CandidateWord::_internal_has_annotation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || annotation_ != nullptr);
  return value;
}
inline bool CandidateWord::has_annotation() const {
  return _internal_has_annotation();
}
inline void CandidateWord::clear_annotation() {
  if (annotation_ != nullptr) annotation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::commands::Annotation& CandidateWord::_internal_annotation() const {
  const ::mozc::commands::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Annotation*>(
      &::mozc::commands::_Annotation_default_instance_);
}
inline const ::mozc::commands::Annotation& CandidateWord::annotation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.annotation)
  return _internal_annotation();
}
inline void CandidateWord::unsafe_arena_set_allocated_annotation(
    ::mozc::commands::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.CandidateWord.annotation)
}
inline ::mozc::commands::Annotation* CandidateWord::release_annotation() {
  auto temp = unsafe_arena_release_annotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Annotation* CandidateWord::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:mozc.commands.CandidateWord.annotation)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::commands::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::mozc::commands::Annotation* CandidateWord::_internal_mutable_annotation() {
  _has_bits_[0] |= 0x00000004u;
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::mozc::commands::Annotation* CandidateWord::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateWord.annotation)
  return _internal_mutable_annotation();
}
inline void CandidateWord::set_allocated_annotation(::mozc::commands::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.CandidateWord.annotation)
}

// repeated .mozc.commands.CandidateAttribute attributes = 6;
inline int CandidateWord::_internal_attributes_size() const {
  return attributes_.size();
}
inline int CandidateWord::attributes_size() const {
  return _internal_attributes_size();
}
inline void CandidateWord::clear_attributes() {
  attributes_.Clear();
}
inline ::mozc::commands::CandidateAttribute CandidateWord::_internal_attributes(int index) const {
  return static_cast< ::mozc::commands::CandidateAttribute >(attributes_.Get(index));
}
inline ::mozc::commands::CandidateAttribute CandidateWord::attributes(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.attributes)
  return _internal_attributes(index);
}
inline void CandidateWord::set_attributes(int index, ::mozc::commands::CandidateAttribute value) {
  assert(::mozc::commands::CandidateAttribute_IsValid(value));
  attributes_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.attributes)
}
inline void CandidateWord::_internal_add_attributes(::mozc::commands::CandidateAttribute value) {
  assert(::mozc::commands::CandidateAttribute_IsValid(value));
  attributes_.Add(value);
}
inline void CandidateWord::add_attributes(::mozc::commands::CandidateAttribute value) {
  // @@protoc_insertion_point(field_add:mozc.commands.CandidateWord.attributes)
  _internal_add_attributes(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CandidateWord::attributes() const {
  // @@protoc_insertion_point(field_list:mozc.commands.CandidateWord.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CandidateWord::_internal_mutable_attributes() {
  return &attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CandidateWord::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.CandidateWord.attributes)
  return _internal_mutable_attributes();
}

// optional int32 num_segments_in_candidate = 7;
inline bool CandidateWord::_internal_has_num_segments_in_candidate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CandidateWord::has_num_segments_in_candidate() const {
  return _internal_has_num_segments_in_candidate();
}
inline void CandidateWord::clear_num_segments_in_candidate() {
  num_segments_in_candidate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateWord::_internal_num_segments_in_candidate() const {
  return num_segments_in_candidate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandidateWord::num_segments_in_candidate() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateWord.num_segments_in_candidate)
  return _internal_num_segments_in_candidate();
}
inline void CandidateWord::_internal_set_num_segments_in_candidate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_segments_in_candidate_ = value;
}
inline void CandidateWord::set_num_segments_in_candidate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_segments_in_candidate(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateWord.num_segments_in_candidate)
}

// -------------------------------------------------------------------

// CandidateList

// optional uint32 focused_index = 1;
inline bool CandidateList::_internal_has_focused_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CandidateList::has_focused_index() const {
  return _internal_has_focused_index();
}
inline void CandidateList::clear_focused_index() {
  focused_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CandidateList::_internal_focused_index() const {
  return focused_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CandidateList::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.focused_index)
  return _internal_focused_index();
}
inline void CandidateList::_internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  focused_index_ = value;
}
inline void CandidateList::set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_focused_index(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateList.focused_index)
}

// repeated .mozc.commands.CandidateWord candidates = 2;
inline int CandidateList::_internal_candidates_size() const {
  return candidates_.size();
}
inline int CandidateList::candidates_size() const {
  return _internal_candidates_size();
}
inline void CandidateList::clear_candidates() {
  candidates_.Clear();
}
inline ::mozc::commands::CandidateWord* CandidateList::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.CandidateList.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::CandidateWord >*
CandidateList::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.CandidateList.candidates)
  return &candidates_;
}
inline const ::mozc::commands::CandidateWord& CandidateList::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::mozc::commands::CandidateWord& CandidateList::candidates(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.candidates)
  return _internal_candidates(index);
}
inline ::mozc::commands::CandidateWord* CandidateList::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::mozc::commands::CandidateWord* CandidateList::add_candidates() {
  // @@protoc_insertion_point(field_add:mozc.commands.CandidateList.candidates)
  return _internal_add_candidates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::CandidateWord >&
CandidateList::candidates() const {
  // @@protoc_insertion_point(field_list:mozc.commands.CandidateList.candidates)
  return candidates_;
}

// optional .mozc.commands.Category category = 3 [default = CONVERSION];
inline bool CandidateList::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CandidateList::has_category() const {
  return _internal_has_category();
}
inline void CandidateList::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mozc::commands::Category CandidateList::_internal_category() const {
  return static_cast< ::mozc::commands::Category >(category_);
}
inline ::mozc::commands::Category CandidateList::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.CandidateList.category)
  return _internal_category();
}
inline void CandidateList::_internal_set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  category_ = value;
}
inline void CandidateList::set_category(::mozc::commands::Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:mozc.commands.CandidateList.category)
}

// -------------------------------------------------------------------

// Candidates_Candidate

// required uint32 index = 4;
inline bool Candidates_Candidate::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Candidates_Candidate::has_index() const {
  return _internal_has_index();
}
inline void Candidates_Candidate::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates_Candidate::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates_Candidate::index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.index)
  return _internal_index();
}
inline void Candidates_Candidate::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
}
inline void Candidates_Candidate::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.index)
}

// required string value = 5;
inline bool Candidates_Candidate::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Candidates_Candidate::has_value() const {
  return _internal_has_value();
}
inline void Candidates_Candidate::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Candidates_Candidate::value() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.value)
  return _internal_value();
}
inline void Candidates_Candidate::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.value)
}
inline std::string* Candidates_Candidate::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.Candidate.value)
  return _internal_mutable_value();
}
inline const std::string& Candidates_Candidate::_internal_value() const {
  return value_.Get();
}
inline void Candidates_Candidate::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Candidates_Candidate::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.Candidates.Candidate.value)
}
inline void Candidates_Candidate::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.Candidates.Candidate.value)
}
inline void Candidates_Candidate::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.Candidates.Candidate.value)
}
inline std::string* Candidates_Candidate::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Candidates_Candidate::release_value() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.Candidate.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Candidates_Candidate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.Candidate.value)
}
inline std::string* Candidates_Candidate::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.Candidates.Candidate.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Candidates_Candidate::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Candidates.Candidate.value)
}

// optional int32 id = 9;
inline bool Candidates_Candidate::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Candidates_Candidate::has_id() const {
  return _internal_has_id();
}
inline void Candidates_Candidate::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidates_Candidate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidates_Candidate::id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.id)
  return _internal_id();
}
inline void Candidates_Candidate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void Candidates_Candidate::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.id)
}

// optional .mozc.commands.Annotation annotation = 7;
inline bool Candidates_Candidate::_internal_has_annotation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || annotation_ != nullptr);
  return value;
}
inline bool Candidates_Candidate::has_annotation() const {
  return _internal_has_annotation();
}
inline void Candidates_Candidate::clear_annotation() {
  if (annotation_ != nullptr) annotation_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::Annotation& Candidates_Candidate::_internal_annotation() const {
  const ::mozc::commands::Annotation* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Annotation*>(
      &::mozc::commands::_Annotation_default_instance_);
}
inline const ::mozc::commands::Annotation& Candidates_Candidate::annotation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.annotation)
  return _internal_annotation();
}
inline void Candidates_Candidate::unsafe_arena_set_allocated_annotation(
    ::mozc::commands::Annotation* annotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_);
  }
  annotation_ = annotation;
  if (annotation) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Candidates.Candidate.annotation)
}
inline ::mozc::commands::Annotation* Candidates_Candidate::release_annotation() {
  auto temp = unsafe_arena_release_annotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Annotation* Candidates_Candidate::unsafe_arena_release_annotation() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.Candidate.annotation)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::Annotation* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::mozc::commands::Annotation* Candidates_Candidate::_internal_mutable_annotation() {
  _has_bits_[0] |= 0x00000002u;
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Annotation>(GetArena());
    annotation_ = p;
  }
  return annotation_;
}
inline ::mozc::commands::Annotation* Candidates_Candidate::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.Candidate.annotation)
  return _internal_mutable_annotation();
}
inline void Candidates_Candidate::set_allocated_annotation(::mozc::commands::Annotation* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotation);
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.Candidate.annotation)
}

// optional int32 information_id = 10;
inline bool Candidates_Candidate::_internal_has_information_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Candidates_Candidate::has_information_id() const {
  return _internal_has_information_id();
}
inline void Candidates_Candidate::clear_information_id() {
  information_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidates_Candidate::_internal_information_id() const {
  return information_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Candidates_Candidate::information_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.Candidate.information_id)
  return _internal_information_id();
}
inline void Candidates_Candidate::_internal_set_information_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  information_id_ = value;
}
inline void Candidates_Candidate::set_information_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_information_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.Candidate.information_id)
}

// -------------------------------------------------------------------

// Candidates

// optional uint32 focused_index = 1;
inline bool Candidates::_internal_has_focused_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Candidates::has_focused_index() const {
  return _internal_has_focused_index();
}
inline void Candidates::clear_focused_index() {
  focused_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::_internal_focused_index() const {
  return focused_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::focused_index() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.focused_index)
  return _internal_focused_index();
}
inline void Candidates::_internal_set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  focused_index_ = value;
}
inline void Candidates::set_focused_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_focused_index(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.focused_index)
}

// required uint32 size = 2;
inline bool Candidates::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Candidates::has_size() const {
  return _internal_has_size();
}
inline void Candidates::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::size() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.size)
  return _internal_size();
}
inline void Candidates::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  size_ = value;
}
inline void Candidates::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.size)
}

// repeated group Candidate = 3 { ... };
inline int Candidates::_internal_candidate_size() const {
  return candidate_.size();
}
inline int Candidates::candidate_size() const {
  return _internal_candidate_size();
}
inline void Candidates::clear_candidate() {
  candidate_.Clear();
}
inline ::mozc::commands::Candidates_Candidate* Candidates::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >*
Candidates::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:mozc.commands.Candidates.candidate)
  return &candidate_;
}
inline const ::mozc::commands::Candidates_Candidate& Candidates::_internal_candidate(int index) const {
  return candidate_.Get(index);
}
inline const ::mozc::commands::Candidates_Candidate& Candidates::candidate(int index) const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.candidate)
  return _internal_candidate(index);
}
inline ::mozc::commands::Candidates_Candidate* Candidates::_internal_add_candidate() {
  return candidate_.Add();
}
inline ::mozc::commands::Candidates_Candidate* Candidates::add_candidate() {
  // @@protoc_insertion_point(field_add:mozc.commands.Candidates.candidate)
  return _internal_add_candidate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::commands::Candidates_Candidate >&
Candidates::candidate() const {
  // @@protoc_insertion_point(field_list:mozc.commands.Candidates.candidate)
  return candidate_;
}

// required uint32 position = 6;
inline bool Candidates::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Candidates::has_position() const {
  return _internal_has_position();
}
inline void Candidates::clear_position() {
  position_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.position)
  return _internal_position();
}
inline void Candidates::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  position_ = value;
}
inline void Candidates::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.position)
}

// optional .mozc.commands.Candidates subcandidates = 8;
inline bool Candidates::_internal_has_subcandidates() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || subcandidates_ != nullptr);
  return value;
}
inline bool Candidates::has_subcandidates() const {
  return _internal_has_subcandidates();
}
inline void Candidates::clear_subcandidates() {
  if (subcandidates_ != nullptr) subcandidates_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::Candidates& Candidates::_internal_subcandidates() const {
  const ::mozc::commands::Candidates* p = subcandidates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Candidates*>(
      &::mozc::commands::_Candidates_default_instance_);
}
inline const ::mozc::commands::Candidates& Candidates::subcandidates() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.subcandidates)
  return _internal_subcandidates();
}
inline void Candidates::unsafe_arena_set_allocated_subcandidates(
    ::mozc::commands::Candidates* subcandidates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subcandidates_);
  }
  subcandidates_ = subcandidates;
  if (subcandidates) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Candidates.subcandidates)
}
inline ::mozc::commands::Candidates* Candidates::release_subcandidates() {
  auto temp = unsafe_arena_release_subcandidates();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Candidates* Candidates::unsafe_arena_release_subcandidates() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.subcandidates)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::Candidates* temp = subcandidates_;
  subcandidates_ = nullptr;
  return temp;
}
inline ::mozc::commands::Candidates* Candidates::_internal_mutable_subcandidates() {
  _has_bits_[0] |= 0x00000001u;
  if (subcandidates_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Candidates>(GetArena());
    subcandidates_ = p;
  }
  return subcandidates_;
}
inline ::mozc::commands::Candidates* Candidates::mutable_subcandidates() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.subcandidates)
  return _internal_mutable_subcandidates();
}
inline void Candidates::set_allocated_subcandidates(::mozc::commands::Candidates* subcandidates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subcandidates_;
  }
  if (subcandidates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subcandidates);
    if (message_arena != submessage_arena) {
      subcandidates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subcandidates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subcandidates_ = subcandidates;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.subcandidates)
}

// optional .mozc.commands.InformationList usages = 10;
inline bool Candidates::_internal_has_usages() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || usages_ != nullptr);
  return value;
}
inline bool Candidates::has_usages() const {
  return _internal_has_usages();
}
inline void Candidates::clear_usages() {
  if (usages_ != nullptr) usages_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::InformationList& Candidates::_internal_usages() const {
  const ::mozc::commands::InformationList* p = usages_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::InformationList*>(
      &::mozc::commands::_InformationList_default_instance_);
}
inline const ::mozc::commands::InformationList& Candidates::usages() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.usages)
  return _internal_usages();
}
inline void Candidates::unsafe_arena_set_allocated_usages(
    ::mozc::commands::InformationList* usages) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usages_);
  }
  usages_ = usages;
  if (usages) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Candidates.usages)
}
inline ::mozc::commands::InformationList* Candidates::release_usages() {
  auto temp = unsafe_arena_release_usages();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::InformationList* Candidates::unsafe_arena_release_usages() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.usages)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::InformationList* temp = usages_;
  usages_ = nullptr;
  return temp;
}
inline ::mozc::commands::InformationList* Candidates::_internal_mutable_usages() {
  _has_bits_[0] |= 0x00000002u;
  if (usages_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::InformationList>(GetArena());
    usages_ = p;
  }
  return usages_;
}
inline ::mozc::commands::InformationList* Candidates::mutable_usages() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.usages)
  return _internal_mutable_usages();
}
inline void Candidates::set_allocated_usages(::mozc::commands::InformationList* usages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete usages_;
  }
  if (usages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(usages);
    if (message_arena != submessage_arena) {
      usages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usages, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  usages_ = usages;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.usages)
}

// optional .mozc.commands.Category category = 11 [default = CONVERSION];
inline bool Candidates::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Candidates::has_category() const {
  return _internal_has_category();
}
inline void Candidates::clear_category() {
  category_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mozc::commands::Category Candidates::_internal_category() const {
  return static_cast< ::mozc::commands::Category >(category_);
}
inline ::mozc::commands::Category Candidates::category() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.category)
  return _internal_category();
}
inline void Candidates::_internal_set_category(::mozc::commands::Category value) {
  assert(::mozc::commands::Category_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  category_ = value;
}
inline void Candidates::set_category(::mozc::commands::Category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.category)
}

// optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
inline bool Candidates::_internal_has_display_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Candidates::has_display_type() const {
  return _internal_has_display_type();
}
inline void Candidates::clear_display_type() {
  display_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::mozc::commands::DisplayType Candidates::_internal_display_type() const {
  return static_cast< ::mozc::commands::DisplayType >(display_type_);
}
inline ::mozc::commands::DisplayType Candidates::display_type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.display_type)
  return _internal_display_type();
}
inline void Candidates::_internal_set_display_type(::mozc::commands::DisplayType value) {
  assert(::mozc::commands::DisplayType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  display_type_ = value;
}
inline void Candidates::set_display_type(::mozc::commands::DisplayType value) {
  _internal_set_display_type(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.display_type)
}

// optional .mozc.commands.Footer footer = 13;
inline bool Candidates::_internal_has_footer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || footer_ != nullptr);
  return value;
}
inline bool Candidates::has_footer() const {
  return _internal_has_footer();
}
inline void Candidates::clear_footer() {
  if (footer_ != nullptr) footer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::commands::Footer& Candidates::_internal_footer() const {
  const ::mozc::commands::Footer* p = footer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Footer*>(
      &::mozc::commands::_Footer_default_instance_);
}
inline const ::mozc::commands::Footer& Candidates::footer() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.footer)
  return _internal_footer();
}
inline void Candidates::unsafe_arena_set_allocated_footer(
    ::mozc::commands::Footer* footer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footer_);
  }
  footer_ = footer;
  if (footer) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.Candidates.footer)
}
inline ::mozc::commands::Footer* Candidates::release_footer() {
  auto temp = unsafe_arena_release_footer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Footer* Candidates::unsafe_arena_release_footer() {
  // @@protoc_insertion_point(field_release:mozc.commands.Candidates.footer)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::commands::Footer* temp = footer_;
  footer_ = nullptr;
  return temp;
}
inline ::mozc::commands::Footer* Candidates::_internal_mutable_footer() {
  _has_bits_[0] |= 0x00000004u;
  if (footer_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Footer>(GetArena());
    footer_ = p;
  }
  return footer_;
}
inline ::mozc::commands::Footer* Candidates::mutable_footer() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.Candidates.footer)
  return _internal_mutable_footer();
}
inline void Candidates::set_allocated_footer(::mozc::commands::Footer* footer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footer_;
  }
  if (footer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footer);
    if (message_arena != submessage_arena) {
      footer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  footer_ = footer;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.Candidates.footer)
}

// optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
inline bool Candidates::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Candidates::has_direction() const {
  return _internal_has_direction();
}
inline void Candidates::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::mozc::commands::Candidates_Direction Candidates::_internal_direction() const {
  return static_cast< ::mozc::commands::Candidates_Direction >(direction_);
}
inline ::mozc::commands::Candidates_Direction Candidates::direction() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.direction)
  return _internal_direction();
}
inline void Candidates::_internal_set_direction(::mozc::commands::Candidates_Direction value) {
  assert(::mozc::commands::Candidates_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  direction_ = value;
}
inline void Candidates::set_direction(::mozc::commands::Candidates_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.direction)
}

// optional uint32 page_size = 18 [default = 9];
inline bool Candidates::_internal_has_page_size() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Candidates::has_page_size() const {
  return _internal_has_page_size();
}
inline void Candidates::clear_page_size() {
  page_size_ = 9u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Candidates::page_size() const {
  // @@protoc_insertion_point(field_get:mozc.commands.Candidates.page_size)
  return _internal_page_size();
}
inline void Candidates::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  page_size_ = value;
}
inline void Candidates::set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:mozc.commands.Candidates.page_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozc::commands::Candidates_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::Candidates_Direction>() {
  return ::mozc::commands::Candidates_Direction_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::Category>() {
  return ::mozc::commands::Category_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::DisplayType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::DisplayType>() {
  return ::mozc::commands::DisplayType_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::CandidateAttribute> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::CandidateAttribute>() {
  return ::mozc::commands::CandidateAttribute_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fcandidates_2eproto
