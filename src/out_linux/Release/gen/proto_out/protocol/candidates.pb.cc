// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/candidates.proto

#include "protocol/candidates.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Annotation_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateWord_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Candidates_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Footer_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Information_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InformationList_protocol_2fcandidates_2eproto;
namespace mozc {
namespace commands {
class AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Annotation> _instance;
} _Annotation_default_instance_;
class InformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Information> _instance;
} _Information_default_instance_;
class InformationListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InformationList> _instance;
} _InformationList_default_instance_;
class FooterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Footer> _instance;
} _Footer_default_instance_;
class CandidateWordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandidateWord> _instance;
} _CandidateWord_default_instance_;
class CandidateListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandidateList> _instance;
} _CandidateList_default_instance_;
class Candidates_CandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candidates_Candidate> _instance;
} _Candidates_Candidate_default_instance_;
class CandidatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Candidates> _instance;
} _Candidates_default_instance_;
}  // namespace commands
}  // namespace mozc
static void InitDefaultsscc_info_Annotation_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Annotation_default_instance_;
    new (ptr) ::mozc::commands::Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Annotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Annotation_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Annotation_protocol_2fcandidates_2eproto}, {}};

static void InitDefaultsscc_info_CandidateList_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CandidateList_default_instance_;
    new (ptr) ::mozc::commands::CandidateList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CandidateList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateList_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandidateList_protocol_2fcandidates_2eproto}, {
      &scc_info_CandidateWord_protocol_2fcandidates_2eproto.base,}};

static void InitDefaultsscc_info_CandidateWord_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CandidateWord_default_instance_;
    new (ptr) ::mozc::commands::CandidateWord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CandidateWord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateWord_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CandidateWord_protocol_2fcandidates_2eproto}, {
      &scc_info_Annotation_protocol_2fcandidates_2eproto.base,}};

static void InitDefaultsscc_info_Candidates_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Candidates_default_instance_;
    new (ptr) ::mozc::commands::Candidates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Candidates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Candidates_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Candidates_protocol_2fcandidates_2eproto}, {
      &scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto.base,
      &scc_info_InformationList_protocol_2fcandidates_2eproto.base,
      &scc_info_Footer_protocol_2fcandidates_2eproto.base,}};

static void InitDefaultsscc_info_Candidates_Candidate_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Candidates_Candidate_default_instance_;
    new (ptr) ::mozc::commands::Candidates_Candidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Candidates_Candidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Candidates_Candidate_protocol_2fcandidates_2eproto}, {
      &scc_info_Annotation_protocol_2fcandidates_2eproto.base,}};

static void InitDefaultsscc_info_Footer_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Footer_default_instance_;
    new (ptr) ::mozc::commands::Footer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Footer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Footer_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Footer_protocol_2fcandidates_2eproto}, {}};

static void InitDefaultsscc_info_Information_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Information_default_instance_;
    new (ptr) ::mozc::commands::Information();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Information::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Information_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Information_protocol_2fcandidates_2eproto}, {}};

static void InitDefaultsscc_info_InformationList_protocol_2fcandidates_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_InformationList_default_instance_;
    new (ptr) ::mozc::commands::InformationList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::InformationList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InformationList_protocol_2fcandidates_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InformationList_protocol_2fcandidates_2eproto}, {
      &scc_info_Information_protocol_2fcandidates_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fcandidates_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2fcandidates_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fcandidates_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fcandidates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, prefix_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, suffix_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, description_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, shortcut_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Annotation, deletable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, title_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, description_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Information, candidate_id_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, focused_index_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, information_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, category_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, display_type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::InformationList, delay_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, label_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, index_visible_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, logo_visible_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Footer, sub_label_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, index_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, annotation_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, attributes_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateWord, num_segments_in_candidate_),
  3,
  4,
  0,
  1,
  2,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateList, focused_index_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateList, candidates_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CandidateList, category_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, index_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, annotation_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates_Candidate, information_id_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, focused_index_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, size_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, candidate_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, position_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, subcandidates_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, usages_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, category_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, display_type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, footer_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, direction_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Candidates, page_size_),
  3,
  4,
  ~0u,
  5,
  0,
  1,
  6,
  7,
  2,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mozc::commands::Annotation)},
  { 15, 24, sizeof(::mozc::commands::Information)},
  { 28, 38, sizeof(::mozc::commands::InformationList)},
  { 43, 52, sizeof(::mozc::commands::Footer)},
  { 56, 68, sizeof(::mozc::commands::CandidateWord)},
  { 75, 83, sizeof(::mozc::commands::CandidateList)},
  { 86, 96, sizeof(::mozc::commands::Candidates_Candidate)},
  { 101, 117, sizeof(::mozc::commands::Candidates)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Annotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Information_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_InformationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Footer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_CandidateWord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_CandidateList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Candidates_Candidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Candidates_default_instance_),
};

const char descriptor_table_protodef_protocol_2fcandidates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031protocol/candidates.proto\022\rmozc.comman"
  "ds\"m\n\nAnnotation\022\016\n\006prefix\030\001 \001(\t\022\016\n\006suff"
  "ix\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\020\n\010shortcu"
  "t\030\004 \001(\t\022\030\n\tdeletable\030\005 \001(\010:\005false\"S\n\013Inf"
  "ormation\022\n\n\002id\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\023\n\013d"
  "escription\030\003 \001(\t\022\024\n\014candidate_id\030\004 \003(\005\"\337"
  "\001\n\017InformationList\022\025\n\rfocused_index\030\001 \001("
  "\r\022/\n\013information\030\002 \003(\0132\032.mozc.commands.I"
  "nformation\0225\n\010category\030\003 \001(\0162\027.mozc.comm"
  "ands.Category:\nCONVERSION\0229\n\014display_typ"
  "e\030\004 \001(\0162\032.mozc.commands.DisplayType:\007CAS"
  "CADE\022\022\n\005delay\030\005 \001(\r:\003500\"e\n\006Footer\022\r\n\005la"
  "bel\030\001 \001(\t\022\034\n\rindex_visible\030\002 \001(\010:\005false\022"
  "\033\n\014logo_visible\030\003 \001(\010:\005false\022\021\n\tsub_labe"
  "l\030\004 \001(\t\"\317\001\n\rCandidateWord\022\n\n\002id\030\001 \001(\005\022\r\n"
  "\005index\030\002 \001(\r\022\013\n\003key\030\003 \001(\t\022\r\n\005value\030\004 \001(\t"
  "\022-\n\nannotation\030\005 \001(\0132\031.mozc.commands.Ann"
  "otation\0225\n\nattributes\030\006 \003(\0162!.mozc.comma"
  "nds.CandidateAttribute\022!\n\031num_segments_i"
  "n_candidate\030\007 \001(\005\"\217\001\n\rCandidateList\022\025\n\rf"
  "ocused_index\030\001 \001(\r\0220\n\ncandidates\030\002 \003(\0132\034"
  ".mozc.commands.CandidateWord\0225\n\010category"
  "\030\003 \001(\0162\027.mozc.commands.Category:\nCONVERS"
  "ION\"\277\005\n\nCandidates\022\025\n\rfocused_index\030\001 \001("
  "\r\022\014\n\004size\030\002 \002(\r\0226\n\tcandidate\030\003 \003(\n2#.moz"
  "c.commands.Candidates.Candidate\022\020\n\010posit"
  "ion\030\006 \002(\r\0220\n\rsubcandidates\030\010 \001(\0132\031.mozc."
  "commands.Candidates\022.\n\006usages\030\n \001(\0132\036.mo"
  "zc.commands.InformationList\0225\n\010category\030"
  "\013 \001(\0162\027.mozc.commands.Category:\nCONVERSI"
  "ON\0226\n\014display_type\030\014 \001(\0162\032.mozc.commands"
  ".DisplayType:\004MAIN\022%\n\006footer\030\r \001(\0132\025.moz"
  "c.commands.Footer\022@\n\tdirection\030\016 \001(\0162#.m"
  "ozc.commands.Candidates.Direction:\010VERTI"
  "CAL\022\024\n\tpage_size\030\022 \001(\r:\0019\032|\n\tCandidate\022\r"
  "\n\005index\030\004 \002(\r\022\r\n\005value\030\005 \002(\t\022\n\n\002id\030\t \001(\005"
  "\022-\n\nannotation\030\007 \001(\0132\031.mozc.commands.Ann"
  "otation\022\026\n\016information_id\030\n \001(\005\")\n\tDirec"
  "tion\022\014\n\010VERTICAL\020\000\022\016\n\nHORIZONTAL\020\001J\004\010\017\020\020"
  "J\004\010\020\020\021J\004\010\021\020\022R\025composition_rectangleR\017car"
  "et_rectangleR\017window_location*Z\n\010Categor"
  "y\022\016\n\nCONVERSION\020\000\022\016\n\nPREDICTION\020\001\022\016\n\nSUG"
  "GESTION\020\002\022\023\n\017TRANSLITERATION\020\003\022\t\n\005USAGE\020"
  "\004*$\n\013DisplayType\022\010\n\004MAIN\020\000\022\013\n\007CASCADE\020\001*"
  "\202\001\n\022CandidateAttribute\022\025\n\021DEFAULT_ATTRIB"
  "UTE\020\000\022\023\n\017USER_DICTIONARY\020\001\022\020\n\014USER_HISTO"
  "RY\020\002\022\027\n\023SPELLING_CORRECTION\020\003\022\025\n\021TYPING_"
  "CORRECTION\020\004BA\n.org.mozc.android.inputme"
  "thod.japanese.protobufB\017ProtoCandidates"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fcandidates_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fcandidates_2eproto_sccs[8] = {
  &scc_info_Annotation_protocol_2fcandidates_2eproto.base,
  &scc_info_CandidateList_protocol_2fcandidates_2eproto.base,
  &scc_info_CandidateWord_protocol_2fcandidates_2eproto.base,
  &scc_info_Candidates_protocol_2fcandidates_2eproto.base,
  &scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto.base,
  &scc_info_Footer_protocol_2fcandidates_2eproto.base,
  &scc_info_Information_protocol_2fcandidates_2eproto.base,
  &scc_info_InformationList_protocol_2fcandidates_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fcandidates_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcandidates_2eproto = {
  false, false, descriptor_table_protodef_protocol_2fcandidates_2eproto, "protocol/candidates.proto", 1959,
  &descriptor_table_protocol_2fcandidates_2eproto_once, descriptor_table_protocol_2fcandidates_2eproto_sccs, descriptor_table_protocol_2fcandidates_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_protocol_2fcandidates_2eproto::offsets,
  file_level_metadata_protocol_2fcandidates_2eproto, 8, file_level_enum_descriptors_protocol_2fcandidates_2eproto, file_level_service_descriptors_protocol_2fcandidates_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fcandidates_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fcandidates_2eproto)), true);
namespace mozc {
namespace commands {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Candidates_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcandidates_2eproto);
  return file_level_enum_descriptors_protocol_2fcandidates_2eproto[0];
}
bool Candidates_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Candidates_Direction Candidates::VERTICAL;
constexpr Candidates_Direction Candidates::HORIZONTAL;
constexpr Candidates_Direction Candidates::Direction_MIN;
constexpr Candidates_Direction Candidates::Direction_MAX;
constexpr int Candidates::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcandidates_2eproto);
  return file_level_enum_descriptors_protocol_2fcandidates_2eproto[1];
}
bool Category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisplayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcandidates_2eproto);
  return file_level_enum_descriptors_protocol_2fcandidates_2eproto[2];
}
bool DisplayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandidateAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcandidates_2eproto);
  return file_level_enum_descriptors_protocol_2fcandidates_2eproto[3];
}
bool CandidateAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Annotation::InitAsDefaultInstance() {
}
class Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotation>()._has_bits_);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shortcut(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deletable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Annotation::Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prefix()) {
    prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prefix(),
      GetArena());
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suffix()) {
    suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suffix(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  shortcut_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shortcut()) {
    shortcut_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shortcut(),
      GetArena());
  }
  deletable_ = from.deletable_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Annotation)
}

void Annotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_protocol_2fcandidates_2eproto.base);
  prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcut_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deletable_ = false;
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:mozc.commands.Annotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Annotation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcut_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Annotation::ArenaDtor(void* object) {
  Annotation* _this = reinterpret_cast< Annotation* >(object);
  (void)_this;
}
void Annotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotation& Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      prefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      suffix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      shortcut_.ClearNonDefaultToEmpty();
    }
  }
  deletable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Annotation.prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suffix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_suffix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Annotation.suffix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Annotation.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shortcut = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_shortcut();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Annotation.shortcut");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool deletable = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_deletable(&has_bits);
          deletable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Annotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string prefix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prefix().data(), static_cast<int>(this->_internal_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_prefix(), target);
  }

  // optional string suffix = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suffix().data(), static_cast<int>(this->_internal_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.suffix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_suffix(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional string shortcut = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shortcut().data(), static_cast<int>(this->_internal_shortcut().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Annotation.shortcut");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_shortcut(), target);
  }

  // optional bool deletable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_deletable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Annotation)
  return target;
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Annotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string prefix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prefix());
    }

    // optional string suffix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suffix());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string shortcut = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shortcut());
    }

    // optional bool deletable = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Annotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Annotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Annotation)
    MergeFrom(*source);
  }
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prefix(from._internal_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_suffix(from._internal_suffix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_shortcut(from._internal_shortcut());
    }
    if (cached_has_bits & 0x00000010u) {
      deletable_ = from.deletable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Annotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_.Swap(&other->prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shortcut_.Swap(&other->shortcut_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(deletable_, other->deletable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Annotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Information::InitAsDefaultInstance() {
}
class Information::_Internal {
 public:
  using HasBits = decltype(std::declval<Information>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Information::Information(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candidate_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Information)
}
Information::Information(const Information& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_id_(from.candidate_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Information)
}

void Information::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Information_protocol_2fcandidates_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Information::~Information() {
  // @@protoc_insertion_point(destructor:mozc.commands.Information)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Information::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Information::ArenaDtor(void* object) {
  Information* _this = reinterpret_cast< Information* >(object);
  (void)_this;
}
void Information::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Information::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Information& Information::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Information_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void Information::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Information)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Information::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Information.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Information.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 candidate_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_candidate_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_candidate_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Information::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Information)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Information.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // repeated int32 candidate_id = 4;
  for (int i = 0, n = this->_internal_candidate_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_candidate_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Information)
  return target;
}

size_t Information::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Information)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 candidate_id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->candidate_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_candidate_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Information::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Information)
  GOOGLE_DCHECK_NE(&from, this);
  const Information* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Information>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Information)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Information)
    MergeFrom(*source);
  }
}

void Information::MergeFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Information)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_id_.MergeFrom(from.candidate_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Information::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Information::CopyFrom(const Information& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Information)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Information::IsInitialized() const {
  return true;
}

void Information::InternalSwap(Information* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_id_.InternalSwap(&other->candidate_id_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Information::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InformationList::InitAsDefaultInstance() {
}
class InformationList::_Internal {
 public:
  using HasBits = decltype(std::declval<InformationList>()._has_bits_);
  static void set_has_focused_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

InformationList::InformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.InformationList)
}
InformationList::InformationList(const InformationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      information_(from.information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.InformationList)
}

void InformationList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InformationList_protocol_2fcandidates_2eproto.base);
  ::memset(&focused_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  display_type_ = 1;
  delay_ = 500u;
}

InformationList::~InformationList() {
  // @@protoc_insertion_point(destructor:mozc.commands.InformationList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InformationList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InformationList::ArenaDtor(void* object) {
  InformationList* _this = reinterpret_cast< InformationList* >(object);
  (void)_this;
}
void InformationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InformationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InformationList& InformationList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InformationList_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void InformationList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.InformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  information_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
    display_type_ = 1;
    delay_ = 500u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InformationList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 focused_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_focused_index(&has_bits);
          focused_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.Information information = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Category_IsValid(val))) {
            _internal_set_category(static_cast<::mozc::commands::Category>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::DisplayType_IsValid(val))) {
            _internal_set_display_type(static_cast<::mozc::commands::DisplayType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 5 [default = 500];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InformationList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.InformationList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_focused_index(), target);
  }

  // repeated .mozc.commands.Information information = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_information(i), target, stream);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_display_type(), target);
  }

  // optional uint32 delay = 5 [default = 500];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.InformationList)
  return target;
}

size_t InformationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.InformationList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.Information information = 2;
  total_size += 1UL * this->_internal_information_size();
  for (const auto& msg : this->information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 focused_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .mozc.commands.DisplayType display_type = 4 [default = CASCADE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_type());
    }

    // optional uint32 delay = 5 [default = 500];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InformationList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.InformationList)
  GOOGLE_DCHECK_NE(&from, this);
  const InformationList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InformationList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.InformationList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.InformationList)
    MergeFrom(*source);
  }
}

void InformationList::MergeFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.InformationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  information_.MergeFrom(from.information_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_type_ = from.display_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      delay_ = from.delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InformationList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InformationList::CopyFrom(const InformationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.InformationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InformationList::IsInitialized() const {
  return true;
}

void InformationList::InternalSwap(InformationList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  information_.InternalSwap(&other->information_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InformationList, category_)
      + sizeof(InformationList::category_)
      - PROTOBUF_FIELD_OFFSET(InformationList, focused_index_)>(
          reinterpret_cast<char*>(&focused_index_),
          reinterpret_cast<char*>(&other->focused_index_));
  swap(display_type_, other->display_type_);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InformationList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Footer::InitAsDefaultInstance() {
}
class Footer::_Internal {
 public:
  using HasBits = decltype(std::declval<Footer>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_logo_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sub_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Footer::Footer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Footer)
}
Footer::Footer(const Footer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  sub_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_label()) {
    sub_label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_label(),
      GetArena());
  }
  ::memcpy(&index_visible_, &from.index_visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&logo_visible_) -
    reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Footer)
}

void Footer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Footer_protocol_2fcandidates_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logo_visible_) -
      reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
}

Footer::~Footer() {
  // @@protoc_insertion_point(destructor:mozc.commands.Footer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Footer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Footer::ArenaDtor(void* object) {
  Footer* _this = reinterpret_cast< Footer* >(object);
  (void)_this;
}
void Footer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Footer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Footer& Footer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Footer_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void Footer::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Footer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sub_label_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&index_visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logo_visible_) -
      reinterpret_cast<char*>(&index_visible_)) + sizeof(logo_visible_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Footer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Footer.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool index_visible = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index_visible(&has_bits);
          index_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool logo_visible = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_logo_visible(&has_bits);
          logo_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sub_label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sub_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Footer.sub_label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Footer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Footer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // optional bool index_visible = 2 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_index_visible(), target);
  }

  // optional bool logo_visible = 3 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_logo_visible(), target);
  }

  // optional string sub_label = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_label().data(), static_cast<int>(this->_internal_sub_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Footer.sub_label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sub_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Footer)
  return target;
}

size_t Footer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Footer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string label = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string sub_label = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_label());
    }

    // optional bool index_visible = 2 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool logo_visible = 3 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Footer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Footer)
  GOOGLE_DCHECK_NE(&from, this);
  const Footer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Footer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Footer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Footer)
    MergeFrom(*source);
  }
}

void Footer::MergeFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Footer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sub_label(from._internal_sub_label());
    }
    if (cached_has_bits & 0x00000004u) {
      index_visible_ = from.index_visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      logo_visible_ = from.logo_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Footer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Footer::CopyFrom(const Footer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Footer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Footer::IsInitialized() const {
  return true;
}

void Footer::InternalSwap(Footer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_label_.Swap(&other->sub_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Footer, logo_visible_)
      + sizeof(Footer::logo_visible_)
      - PROTOBUF_FIELD_OFFSET(Footer, index_visible_)>(
          reinterpret_cast<char*>(&index_visible_),
          reinterpret_cast<char*>(&other->index_visible_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Footer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CandidateWord::InitAsDefaultInstance() {
  ::mozc::commands::_CandidateWord_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::mozc::commands::Annotation*>(
      ::mozc::commands::Annotation::internal_default_instance());
}
class CandidateWord::_Internal {
 public:
  using HasBits = decltype(std::declval<CandidateWord>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::commands::Annotation& annotation(const CandidateWord* msg);
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_segments_in_candidate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mozc::commands::Annotation&
CandidateWord::_Internal::annotation(const CandidateWord* msg) {
  return *msg->annotation_;
}
CandidateWord::CandidateWord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.CandidateWord)
}
CandidateWord::CandidateWord(const CandidateWord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::mozc::commands::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_segments_in_candidate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_segments_in_candidate_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateWord)
}

void CandidateWord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandidateWord_protocol_2fcandidates_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_segments_in_candidate_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(num_segments_in_candidate_));
}

CandidateWord::~CandidateWord() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateWord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandidateWord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void CandidateWord::ArenaDtor(void* object) {
  CandidateWord* _this = reinterpret_cast< CandidateWord* >(object);
  (void)_this;
}
void CandidateWord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateWord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandidateWord& CandidateWord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandidateWord_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void CandidateWord::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(annotation_ != nullptr);
      annotation_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_segments_in_candidate_) -
        reinterpret_cast<char*>(&id_)) + sizeof(num_segments_in_candidate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateWord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.CandidateWord.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.CandidateWord.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Annotation annotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.CandidateAttribute attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CandidateAttribute_IsValid(val))) {
              _internal_add_attributes(static_cast<::mozc::commands::CandidateAttribute>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_attributes(), ptr, ctx, ::mozc::commands::CandidateAttribute_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_segments_in_candidate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_num_segments_in_candidate(&has_bits);
          num_segments_in_candidate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateWord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateWord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.CandidateWord.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::annotation(this), target, stream);
  }

  // repeated .mozc.commands.CandidateAttribute attributes = 6;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_attributes(i), target);
  }

  // optional int32 num_segments_in_candidate = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_segments_in_candidate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateWord)
  return target;
}

size_t CandidateWord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateWord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.CandidateAttribute attributes = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_attributes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_attributes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .mozc.commands.Annotation annotation = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotation_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional int32 num_segments_in_candidate = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_segments_in_candidate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateWord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateWord)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateWord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandidateWord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateWord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateWord)
    MergeFrom(*source);
  }
}

void CandidateWord::MergeFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateWord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from._internal_annotation());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_segments_in_candidate_ = from.num_segments_in_candidate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CandidateWord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateWord::CopyFrom(const CandidateWord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateWord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateWord::IsInitialized() const {
  return true;
}

void CandidateWord::InternalSwap(CandidateWord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attributes_.InternalSwap(&other->attributes_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidateWord, num_segments_in_candidate_)
      + sizeof(CandidateWord::num_segments_in_candidate_)
      - PROTOBUF_FIELD_OFFSET(CandidateWord, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateWord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CandidateList::InitAsDefaultInstance() {
}
class CandidateList::_Internal {
 public:
  using HasBits = decltype(std::declval<CandidateList>()._has_bits_);
  static void set_has_focused_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CandidateList::CandidateList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candidates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.CandidateList)
}
CandidateList::CandidateList(const CandidateList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CandidateList)
}

void CandidateList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandidateList_protocol_2fcandidates_2eproto.base);
  ::memset(&focused_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
}

CandidateList::~CandidateList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CandidateList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CandidateList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CandidateList::ArenaDtor(void* object) {
  CandidateList* _this = reinterpret_cast< CandidateList* >(object);
  (void)_this;
}
void CandidateList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandidateList& CandidateList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandidateList_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void CandidateList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&category_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(category_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 focused_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_focused_index(&has_bits);
          focused_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.CandidateWord candidates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Category category = 3 [default = CONVERSION];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Category_IsValid(val))) {
            _internal_set_category(static_cast<::mozc::commands::Category>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CandidateList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_focused_index(), target);
  }

  // repeated .mozc.commands.CandidateWord candidates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_candidates(i), target, stream);
  }

  // optional .mozc.commands.Category category = 3 [default = CONVERSION];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_category(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CandidateList)
  return target;
}

size_t CandidateList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CandidateList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.CandidateWord candidates = 2;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 focused_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_focused_index());
    }

    // optional .mozc.commands.Category category = 3 [default = CONVERSION];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandidateList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CandidateList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CandidateList)
    MergeFrom(*source);
  }
}

void CandidateList::MergeFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CandidateList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CandidateList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateList::CopyFrom(const CandidateList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CandidateList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateList::IsInitialized() const {
  return true;
}

void CandidateList::InternalSwap(CandidateList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidates_.InternalSwap(&other->candidates_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidateList, category_)
      + sizeof(CandidateList::category_)
      - PROTOBUF_FIELD_OFFSET(CandidateList, focused_index_)>(
          reinterpret_cast<char*>(&focused_index_),
          reinterpret_cast<char*>(&other->focused_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Candidates_Candidate::InitAsDefaultInstance() {
  ::mozc::commands::_Candidates_Candidate_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::mozc::commands::Annotation*>(
      ::mozc::commands::Annotation::internal_default_instance());
}
class Candidates_Candidate::_Internal {
 public:
  using HasBits = decltype(std::declval<Candidates_Candidate>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mozc::commands::Annotation& annotation(const Candidates_Candidate* msg);
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_information_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::mozc::commands::Annotation&
Candidates_Candidate::_Internal::annotation(const Candidates_Candidate* msg) {
  return *msg->annotation_;
}
Candidates_Candidate::Candidates_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Candidates.Candidate)
}
Candidates_Candidate::Candidates_Candidate(const Candidates_Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_annotation()) {
    annotation_ = new ::mozc::commands::Annotation(*from.annotation_);
  } else {
    annotation_ = nullptr;
  }
  ::memcpy(&information_id_, &from.information_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&information_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates.Candidate)
}

void Candidates_Candidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(id_));
}

Candidates_Candidate::~Candidates_Candidate() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates.Candidate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Candidates_Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void Candidates_Candidate::ArenaDtor(void* object) {
  Candidates_Candidate* _this = reinterpret_cast< Candidates_Candidate* >(object);
  (void)_this;
}
void Candidates_Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candidates_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candidates_Candidate& Candidates_Candidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candidates_Candidate_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void Candidates_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(annotation_ != nullptr);
      annotation_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&information_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&information_id_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candidates_Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Candidates.Candidate.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Annotation annotation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 information_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_information_id(&has_bits);
          information_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candidates_Candidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // required string value = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Candidates.Candidate.value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  // optional .mozc.commands.Annotation annotation = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::annotation(this), target, stream);
  }

  // optional int32 id = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_id(), target);
  }

  // optional int32 information_id = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_information_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates.Candidate)
  return target;
}

size_t Candidates_Candidate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates.Candidate)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_index()) {
    // required uint32 index = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  return total_size;
}
size_t Candidates_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates.Candidate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string value = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 index = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .mozc.commands.Annotation annotation = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *annotation_);
    }

    // optional int32 information_id = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_information_id());
    }

  }
  // optional int32 id = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candidates_Candidate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  const Candidates_Candidate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candidates_Candidate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates.Candidate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates.Candidate)
    MergeFrom(*source);
  }
}

void Candidates_Candidate::MergeFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_annotation()->::mozc::commands::Annotation::MergeFrom(from._internal_annotation());
    }
    if (cached_has_bits & 0x00000004u) {
      information_id_ = from.information_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Candidates_Candidate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates_Candidate::CopyFrom(const Candidates_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates_Candidate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Candidates_Candidate::InternalSwap(Candidates_Candidate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candidates_Candidate, id_)
      + sizeof(Candidates_Candidate::id_)
      - PROTOBUF_FIELD_OFFSET(Candidates_Candidate, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Candidates_Candidate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Candidates::InitAsDefaultInstance() {
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->subcandidates_ = const_cast< ::mozc::commands::Candidates*>(
      ::mozc::commands::Candidates::internal_default_instance());
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->usages_ = const_cast< ::mozc::commands::InformationList*>(
      ::mozc::commands::InformationList::internal_default_instance());
  ::mozc::commands::_Candidates_default_instance_._instance.get_mutable()->footer_ = const_cast< ::mozc::commands::Footer*>(
      ::mozc::commands::Footer::internal_default_instance());
}
class Candidates::_Internal {
 public:
  using HasBits = decltype(std::declval<Candidates>()._has_bits_);
  static void set_has_focused_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozc::commands::Candidates& subcandidates(const Candidates* msg);
  static void set_has_subcandidates(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::commands::InformationList& usages(const Candidates* msg);
  static void set_has_usages(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_display_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mozc::commands::Footer& footer(const Candidates* msg);
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000030) ^ 0x00000030) != 0;
  }
};

const ::mozc::commands::Candidates&
Candidates::_Internal::subcandidates(const Candidates* msg) {
  return *msg->subcandidates_;
}
const ::mozc::commands::InformationList&
Candidates::_Internal::usages(const Candidates* msg) {
  return *msg->usages_;
}
const ::mozc::commands::Footer&
Candidates::_Internal::footer(const Candidates* msg) {
  return *msg->footer_;
}
Candidates::Candidates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  candidate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Candidates)
}
Candidates::Candidates(const Candidates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subcandidates()) {
    subcandidates_ = new ::mozc::commands::Candidates(*from.subcandidates_);
  } else {
    subcandidates_ = nullptr;
  }
  if (from._internal_has_usages()) {
    usages_ = new ::mozc::commands::InformationList(*from.usages_);
  } else {
    usages_ = nullptr;
  }
  if (from._internal_has_footer()) {
    footer_ = new ::mozc::commands::Footer(*from.footer_);
  } else {
    footer_ = nullptr;
  }
  ::memcpy(&focused_index_, &from.focused_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&focused_index_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Candidates)
}

void Candidates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Candidates_protocol_2fcandidates_2eproto.base);
  ::memset(&subcandidates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&subcandidates_)) + sizeof(direction_));
  page_size_ = 9u;
}

Candidates::~Candidates() {
  // @@protoc_insertion_point(destructor:mozc.commands.Candidates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Candidates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete subcandidates_;
  if (this != internal_default_instance()) delete usages_;
  if (this != internal_default_instance()) delete footer_;
}

void Candidates::ArenaDtor(void* object) {
  Candidates* _this = reinterpret_cast< Candidates* >(object);
  (void)_this;
}
void Candidates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Candidates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Candidates& Candidates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Candidates_protocol_2fcandidates_2eproto.base);
  return *internal_default_instance();
}


void Candidates::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Candidates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(subcandidates_ != nullptr);
      subcandidates_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(usages_ != nullptr);
      usages_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(footer_ != nullptr);
      footer_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&focused_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&display_type_) -
        reinterpret_cast<char*>(&focused_index_)) + sizeof(display_type_));
  }
  if (cached_has_bits & 0x00000300u) {
    direction_ = 0;
    page_size_ = 9u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Candidates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 focused_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_focused_index(&has_bits);
          focused_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Candidate = 3 { ... };
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 27)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_candidate(), ptr, 27);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<27>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Candidates subcandidates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_subcandidates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.InformationList usages = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_usages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Category category = 11 [default = CONVERSION];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Category_IsValid(val))) {
            _internal_set_category(static_cast<::mozc::commands::Category>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::DisplayType_IsValid(val))) {
            _internal_set_display_type(static_cast<::mozc::commands::DisplayType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Footer footer = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Candidates_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::mozc::commands::Candidates_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 page_size = 18 [default = 9];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_page_size(&has_bits);
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Candidates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Candidates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 focused_index = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_focused_index(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // repeated group Candidate = 3 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(3, this->_internal_candidate(i), target, stream);
  }

  // required uint32 position = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_position(), target);
  }

  // optional .mozc.commands.Candidates subcandidates = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::subcandidates(this), target, stream);
  }

  // optional .mozc.commands.InformationList usages = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::usages(this), target, stream);
  }

  // optional .mozc.commands.Category category = 11 [default = CONVERSION];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_category(), target);
  }

  // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_display_type(), target);
  }

  // optional .mozc.commands.Footer footer = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::footer(this), target, stream);
  }

  // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_direction(), target);
  }

  // optional uint32 page_size = 18 [default = 9];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Candidates)
  return target;
}

size_t Candidates::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Candidates)
  size_t total_size = 0;

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_position()) {
    // required uint32 position = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());
  }

  return total_size;
}
size_t Candidates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Candidates)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000030) ^ 0x00000030) == 0) {  // All required fields are present.
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 position = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_position());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Candidate = 3 { ... };
  total_size += 2UL * this->_internal_candidate_size();
  for (const auto& msg : this->candidate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mozc.commands.Candidates subcandidates = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subcandidates_);
    }

    // optional .mozc.commands.InformationList usages = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usages_);
    }

    // optional .mozc.commands.Footer footer = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *footer_);
    }

    // optional uint32 focused_index = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_focused_index());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional .mozc.commands.Category category = 11 [default = CONVERSION];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional .mozc.commands.DisplayType display_type = 12 [default = MAIN];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_display_type());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .mozc.commands.Candidates.Direction direction = 14 [default = VERTICAL];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
    }

    // optional uint32 page_size = 18 [default = 9];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Candidates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Candidates)
  GOOGLE_DCHECK_NE(&from, this);
  const Candidates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Candidates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Candidates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Candidates)
    MergeFrom(*source);
  }
}

void Candidates::MergeFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Candidates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_subcandidates()->::mozc::commands::Candidates::MergeFrom(from._internal_subcandidates());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_usages()->::mozc::commands::InformationList::MergeFrom(from._internal_usages());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_footer()->::mozc::commands::Footer::MergeFrom(from._internal_footer());
    }
    if (cached_has_bits & 0x00000008u) {
      focused_index_ = from.focused_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000040u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000080u) {
      display_type_ = from.display_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      page_size_ = from.page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Candidates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Candidates::CopyFrom(const Candidates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Candidates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Candidates::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(candidate_)) return false;
  if (_internal_has_subcandidates()) {
    if (!subcandidates_->IsInitialized()) return false;
  }
  return true;
}

void Candidates::InternalSwap(Candidates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  candidate_.InternalSwap(&other->candidate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Candidates, direction_)
      + sizeof(Candidates::direction_)
      - PROTOBUF_FIELD_OFFSET(Candidates, subcandidates_)>(
          reinterpret_cast<char*>(&subcandidates_),
          reinterpret_cast<char*>(&other->subcandidates_));
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Candidates::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::commands::Annotation* Arena::CreateMaybeMessage< ::mozc::commands::Annotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Information* Arena::CreateMaybeMessage< ::mozc::commands::Information >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Information >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::InformationList* Arena::CreateMaybeMessage< ::mozc::commands::InformationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::InformationList >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Footer* Arena::CreateMaybeMessage< ::mozc::commands::Footer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Footer >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::CandidateWord* Arena::CreateMaybeMessage< ::mozc::commands::CandidateWord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::CandidateWord >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::CandidateList* Arena::CreateMaybeMessage< ::mozc::commands::CandidateList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::CandidateList >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Candidates_Candidate* Arena::CreateMaybeMessage< ::mozc::commands::Candidates_Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Candidates_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Candidates* Arena::CreateMaybeMessage< ::mozc::commands::Candidates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Candidates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
