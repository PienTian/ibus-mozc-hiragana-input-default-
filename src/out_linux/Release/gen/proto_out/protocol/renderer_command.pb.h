// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/renderer_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2frenderer_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2frenderer_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol/commands.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2frenderer_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2frenderer_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2frenderer_5fcommand_2eproto;
namespace mozc {
namespace commands {
class RendererCommand;
class RendererCommandDefaultTypeInternal;
extern RendererCommandDefaultTypeInternal _RendererCommand_default_instance_;
class RendererCommand_ApplicationInfo;
class RendererCommand_ApplicationInfoDefaultTypeInternal;
extern RendererCommand_ApplicationInfoDefaultTypeInternal _RendererCommand_ApplicationInfo_default_instance_;
class RendererCommand_CandidateForm;
class RendererCommand_CandidateFormDefaultTypeInternal;
extern RendererCommand_CandidateFormDefaultTypeInternal _RendererCommand_CandidateForm_default_instance_;
class RendererCommand_CaretInfo;
class RendererCommand_CaretInfoDefaultTypeInternal;
extern RendererCommand_CaretInfoDefaultTypeInternal _RendererCommand_CaretInfo_default_instance_;
class RendererCommand_CharacterPosition;
class RendererCommand_CharacterPositionDefaultTypeInternal;
extern RendererCommand_CharacterPositionDefaultTypeInternal _RendererCommand_CharacterPosition_default_instance_;
class RendererCommand_CompositionForm;
class RendererCommand_CompositionFormDefaultTypeInternal;
extern RendererCommand_CompositionFormDefaultTypeInternal _RendererCommand_CompositionForm_default_instance_;
class RendererCommand_IndicatorInfo;
class RendererCommand_IndicatorInfoDefaultTypeInternal;
extern RendererCommand_IndicatorInfoDefaultTypeInternal _RendererCommand_IndicatorInfo_default_instance_;
class RendererCommand_Point;
class RendererCommand_PointDefaultTypeInternal;
extern RendererCommand_PointDefaultTypeInternal _RendererCommand_Point_default_instance_;
class RendererCommand_Rectangle;
class RendererCommand_RectangleDefaultTypeInternal;
extern RendererCommand_RectangleDefaultTypeInternal _RendererCommand_Rectangle_default_instance_;
class RendererCommand_WinLogFont;
class RendererCommand_WinLogFontDefaultTypeInternal;
extern RendererCommand_WinLogFontDefaultTypeInternal _RendererCommand_WinLogFont_default_instance_;
}  // namespace commands
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::commands::RendererCommand* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand>(Arena*);
template<> ::mozc::commands::RendererCommand_ApplicationInfo* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_ApplicationInfo>(Arena*);
template<> ::mozc::commands::RendererCommand_CandidateForm* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_CandidateForm>(Arena*);
template<> ::mozc::commands::RendererCommand_CaretInfo* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_CaretInfo>(Arena*);
template<> ::mozc::commands::RendererCommand_CharacterPosition* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_CharacterPosition>(Arena*);
template<> ::mozc::commands::RendererCommand_CompositionForm* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_CompositionForm>(Arena*);
template<> ::mozc::commands::RendererCommand_IndicatorInfo* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_IndicatorInfo>(Arena*);
template<> ::mozc::commands::RendererCommand_Point* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_Point>(Arena*);
template<> ::mozc::commands::RendererCommand_Rectangle* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(Arena*);
template<> ::mozc::commands::RendererCommand_WinLogFont* Arena::CreateMaybeMessage<::mozc::commands::RendererCommand_WinLogFont>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace commands {

enum RendererCommand_CompositionForm_Style : int {
  RendererCommand_CompositionForm_Style_DEFAULT = 0,
  RendererCommand_CompositionForm_Style_RECT = 1,
  RendererCommand_CompositionForm_Style_POINT = 2,
  RendererCommand_CompositionForm_Style_FORCE_POSITION = 32
};
bool RendererCommand_CompositionForm_Style_IsValid(int value);
constexpr RendererCommand_CompositionForm_Style RendererCommand_CompositionForm_Style_Style_MIN = RendererCommand_CompositionForm_Style_DEFAULT;
constexpr RendererCommand_CompositionForm_Style RendererCommand_CompositionForm_Style_Style_MAX = RendererCommand_CompositionForm_Style_FORCE_POSITION;
constexpr int RendererCommand_CompositionForm_Style_Style_ARRAYSIZE = RendererCommand_CompositionForm_Style_Style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererCommand_CompositionForm_Style_descriptor();
template<typename T>
inline const std::string& RendererCommand_CompositionForm_Style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererCommand_CompositionForm_Style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererCommand_CompositionForm_Style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererCommand_CompositionForm_Style_descriptor(), enum_t_value);
}
inline bool RendererCommand_CompositionForm_Style_Parse(
    const std::string& name, RendererCommand_CompositionForm_Style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererCommand_CompositionForm_Style>(
    RendererCommand_CompositionForm_Style_descriptor(), name, value);
}
enum RendererCommand_CandidateForm_Style : int {
  RendererCommand_CandidateForm_Style_DEFAULT = 0,
  RendererCommand_CandidateForm_Style_CANDIDATEPOS = 64,
  RendererCommand_CandidateForm_Style_EXCLUDE = 128
};
bool RendererCommand_CandidateForm_Style_IsValid(int value);
constexpr RendererCommand_CandidateForm_Style RendererCommand_CandidateForm_Style_Style_MIN = RendererCommand_CandidateForm_Style_DEFAULT;
constexpr RendererCommand_CandidateForm_Style RendererCommand_CandidateForm_Style_Style_MAX = RendererCommand_CandidateForm_Style_EXCLUDE;
constexpr int RendererCommand_CandidateForm_Style_Style_ARRAYSIZE = RendererCommand_CandidateForm_Style_Style_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererCommand_CandidateForm_Style_descriptor();
template<typename T>
inline const std::string& RendererCommand_CandidateForm_Style_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererCommand_CandidateForm_Style>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererCommand_CandidateForm_Style_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererCommand_CandidateForm_Style_descriptor(), enum_t_value);
}
inline bool RendererCommand_CandidateForm_Style_Parse(
    const std::string& name, RendererCommand_CandidateForm_Style* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererCommand_CandidateForm_Style>(
    RendererCommand_CandidateForm_Style_descriptor(), name, value);
}
enum RendererCommand_ApplicationInfo_InputFrameworkType : int {
  RendererCommand_ApplicationInfo_InputFrameworkType_UNKNOWN_FRAMEWORK = 0,
  RendererCommand_ApplicationInfo_InputFrameworkType_TSF = 1,
  RendererCommand_ApplicationInfo_InputFrameworkType_IMM32 = 2,
  RendererCommand_ApplicationInfo_InputFrameworkType_IMKit = 3,
  RendererCommand_ApplicationInfo_InputFrameworkType_IBus = 4
};
bool RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(int value);
constexpr RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_MIN = RendererCommand_ApplicationInfo_InputFrameworkType_UNKNOWN_FRAMEWORK;
constexpr RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_MAX = RendererCommand_ApplicationInfo_InputFrameworkType_IBus;
constexpr int RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_ARRAYSIZE = RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererCommand_ApplicationInfo_InputFrameworkType_descriptor();
template<typename T>
inline const std::string& RendererCommand_ApplicationInfo_InputFrameworkType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererCommand_ApplicationInfo_InputFrameworkType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererCommand_ApplicationInfo_InputFrameworkType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererCommand_ApplicationInfo_InputFrameworkType_descriptor(), enum_t_value);
}
inline bool RendererCommand_ApplicationInfo_InputFrameworkType_Parse(
    const std::string& name, RendererCommand_ApplicationInfo_InputFrameworkType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererCommand_ApplicationInfo_InputFrameworkType>(
    RendererCommand_ApplicationInfo_InputFrameworkType_descriptor(), name, value);
}
enum RendererCommand_ApplicationInfo_UIVisibility : int {
  RendererCommand_ApplicationInfo_UIVisibility_ShowUIDefault = 0,
  RendererCommand_ApplicationInfo_UIVisibility_ShowCompositionWindow = 1,
  RendererCommand_ApplicationInfo_UIVisibility_ShowCandidateWindow = 2,
  RendererCommand_ApplicationInfo_UIVisibility_ShowSuggestWindow = 4
};
bool RendererCommand_ApplicationInfo_UIVisibility_IsValid(int value);
constexpr RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_MIN = RendererCommand_ApplicationInfo_UIVisibility_ShowUIDefault;
constexpr RendererCommand_ApplicationInfo_UIVisibility RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_MAX = RendererCommand_ApplicationInfo_UIVisibility_ShowSuggestWindow;
constexpr int RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_ARRAYSIZE = RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererCommand_ApplicationInfo_UIVisibility_descriptor();
template<typename T>
inline const std::string& RendererCommand_ApplicationInfo_UIVisibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererCommand_ApplicationInfo_UIVisibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererCommand_ApplicationInfo_UIVisibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererCommand_ApplicationInfo_UIVisibility_descriptor(), enum_t_value);
}
inline bool RendererCommand_ApplicationInfo_UIVisibility_Parse(
    const std::string& name, RendererCommand_ApplicationInfo_UIVisibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererCommand_ApplicationInfo_UIVisibility>(
    RendererCommand_ApplicationInfo_UIVisibility_descriptor(), name, value);
}
enum RendererCommand_CommandType : int {
  RendererCommand_CommandType_NOOP = 0,
  RendererCommand_CommandType_UPDATE = 1,
  RendererCommand_CommandType_SHUTDOWN = 2
};
bool RendererCommand_CommandType_IsValid(int value);
constexpr RendererCommand_CommandType RendererCommand_CommandType_CommandType_MIN = RendererCommand_CommandType_NOOP;
constexpr RendererCommand_CommandType RendererCommand_CommandType_CommandType_MAX = RendererCommand_CommandType_SHUTDOWN;
constexpr int RendererCommand_CommandType_CommandType_ARRAYSIZE = RendererCommand_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RendererCommand_CommandType_descriptor();
template<typename T>
inline const std::string& RendererCommand_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RendererCommand_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RendererCommand_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RendererCommand_CommandType_descriptor(), enum_t_value);
}
inline bool RendererCommand_CommandType_Parse(
    const std::string& name, RendererCommand_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RendererCommand_CommandType>(
    RendererCommand_CommandType_descriptor(), name, value);
}
// ===================================================================

class RendererCommand_Rectangle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.Rectangle) */ {
 public:
  inline RendererCommand_Rectangle() : RendererCommand_Rectangle(nullptr) {};
  virtual ~RendererCommand_Rectangle();

  RendererCommand_Rectangle(const RendererCommand_Rectangle& from);
  RendererCommand_Rectangle(RendererCommand_Rectangle&& from) noexcept
    : RendererCommand_Rectangle() {
    *this = ::std::move(from);
  }

  inline RendererCommand_Rectangle& operator=(const RendererCommand_Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_Rectangle& operator=(RendererCommand_Rectangle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_Rectangle* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_Rectangle*>(
               &_RendererCommand_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RendererCommand_Rectangle& a, RendererCommand_Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_Rectangle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_Rectangle* New() const final {
    return CreateMaybeMessage<RendererCommand_Rectangle>(nullptr);
  }

  RendererCommand_Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_Rectangle& from);
  void MergeFrom(const RendererCommand_Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.Rectangle";
  }
  protected:
  explicit RendererCommand_Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kTopFieldNumber = 2,
    kRightFieldNumber = 3,
    kBottomFieldNumber = 4,
  };
  // optional int32 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 top = 2;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  ::PROTOBUF_NAMESPACE_ID::int32 top() const;
  void set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top() const;
  void _internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bottom = 4;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  ::PROTOBUF_NAMESPACE_ID::int32 bottom() const;
  void set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bottom() const;
  void _internal_set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  ::PROTOBUF_NAMESPACE_ID::int32 bottom_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.Point) */ {
 public:
  inline RendererCommand_Point() : RendererCommand_Point(nullptr) {};
  virtual ~RendererCommand_Point();

  RendererCommand_Point(const RendererCommand_Point& from);
  RendererCommand_Point(RendererCommand_Point&& from) noexcept
    : RendererCommand_Point() {
    *this = ::std::move(from);
  }

  inline RendererCommand_Point& operator=(const RendererCommand_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_Point& operator=(RendererCommand_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_Point* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_Point*>(
               &_RendererCommand_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RendererCommand_Point& a, RendererCommand_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_Point* New() const final {
    return CreateMaybeMessage<RendererCommand_Point>(nullptr);
  }

  RendererCommand_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_Point& from);
  void MergeFrom(const RendererCommand_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.Point";
  }
  protected:
  explicit RendererCommand_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_WinLogFont PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.WinLogFont) */ {
 public:
  inline RendererCommand_WinLogFont() : RendererCommand_WinLogFont(nullptr) {};
  virtual ~RendererCommand_WinLogFont();

  RendererCommand_WinLogFont(const RendererCommand_WinLogFont& from);
  RendererCommand_WinLogFont(RendererCommand_WinLogFont&& from) noexcept
    : RendererCommand_WinLogFont() {
    *this = ::std::move(from);
  }

  inline RendererCommand_WinLogFont& operator=(const RendererCommand_WinLogFont& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_WinLogFont& operator=(RendererCommand_WinLogFont&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_WinLogFont& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_WinLogFont* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_WinLogFont*>(
               &_RendererCommand_WinLogFont_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RendererCommand_WinLogFont& a, RendererCommand_WinLogFont& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_WinLogFont* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_WinLogFont* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_WinLogFont* New() const final {
    return CreateMaybeMessage<RendererCommand_WinLogFont>(nullptr);
  }

  RendererCommand_WinLogFont* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_WinLogFont>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_WinLogFont& from);
  void MergeFrom(const RendererCommand_WinLogFont& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_WinLogFont* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.WinLogFont";
  }
  protected:
  explicit RendererCommand_WinLogFont(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceNameFieldNumber = 14,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kEscapementFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kWeightFieldNumber = 5,
    kItalicFieldNumber = 6,
    kUnderlineFieldNumber = 7,
    kStrikeOutFieldNumber = 8,
    kOutPrecisionFieldNumber = 10,
    kClipPrecisionFieldNumber = 11,
    kQualityFieldNumber = 12,
    kPitchAndFamilyFieldNumber = 13,
    kCharSetFieldNumber = 9,
  };
  // optional string face_name = 14;
  bool has_face_name() const;
  private:
  bool _internal_has_face_name() const;
  public:
  void clear_face_name();
  const std::string& face_name() const;
  void set_face_name(const std::string& value);
  void set_face_name(std::string&& value);
  void set_face_name(const char* value);
  void set_face_name(const char* value, size_t size);
  std::string* mutable_face_name();
  std::string* release_face_name();
  void set_allocated_face_name(std::string* face_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_face_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_face_name(
      std::string* face_name);
  private:
  const std::string& _internal_face_name() const;
  void _internal_set_face_name(const std::string& value);
  std::string* _internal_mutable_face_name();
  public:

  // optional int32 height = 1 [default = 0];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 width = 2 [default = 0];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 escapement = 3 [default = 0];
  bool has_escapement() const;
  private:
  bool _internal_has_escapement() const;
  public:
  void clear_escapement();
  ::PROTOBUF_NAMESPACE_ID::int32 escapement() const;
  void set_escapement(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_escapement() const;
  void _internal_set_escapement(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 orientation = 4 [default = 0];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::PROTOBUF_NAMESPACE_ID::int32 orientation() const;
  void set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_orientation() const;
  void _internal_set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 weight = 5 [default = 0];
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool italic = 6 [default = false];
  bool has_italic() const;
  private:
  bool _internal_has_italic() const;
  public:
  void clear_italic();
  bool italic() const;
  void set_italic(bool value);
  private:
  bool _internal_italic() const;
  void _internal_set_italic(bool value);
  public:

  // optional bool underline = 7 [default = false];
  bool has_underline() const;
  private:
  bool _internal_has_underline() const;
  public:
  void clear_underline();
  bool underline() const;
  void set_underline(bool value);
  private:
  bool _internal_underline() const;
  void _internal_set_underline(bool value);
  public:

  // optional bool strike_out = 8 [default = false];
  bool has_strike_out() const;
  private:
  bool _internal_has_strike_out() const;
  public:
  void clear_strike_out();
  bool strike_out() const;
  void set_strike_out(bool value);
  private:
  bool _internal_strike_out() const;
  void _internal_set_strike_out(bool value);
  public:

  // optional int32 out_precision = 10 [default = 0];
  bool has_out_precision() const;
  private:
  bool _internal_has_out_precision() const;
  public:
  void clear_out_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 out_precision() const;
  void set_out_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_precision() const;
  void _internal_set_out_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clip_precision = 11 [default = 0];
  bool has_clip_precision() const;
  private:
  bool _internal_has_clip_precision() const;
  public:
  void clear_clip_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 clip_precision() const;
  void set_clip_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clip_precision() const;
  void _internal_set_clip_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 quality = 12 [default = 0];
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch_and_family = 13 [default = 0];
  bool has_pitch_and_family() const;
  private:
  bool _internal_has_pitch_and_family() const;
  public:
  void clear_pitch_and_family();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_and_family() const;
  void set_pitch_and_family(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch_and_family() const;
  void _internal_set_pitch_and_family(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 char_set = 9 [default = 1];
  bool has_char_set() const;
  private:
  bool _internal_has_char_set() const;
  public:
  void clear_char_set();
  ::PROTOBUF_NAMESPACE_ID::int32 char_set() const;
  void set_char_set(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_char_set() const;
  void _internal_set_char_set(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.WinLogFont)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 escapement_;
  ::PROTOBUF_NAMESPACE_ID::int32 orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  bool italic_;
  bool underline_;
  bool strike_out_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 clip_precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_and_family_;
  ::PROTOBUF_NAMESPACE_ID::int32 char_set_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_CompositionForm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.CompositionForm) */ {
 public:
  inline RendererCommand_CompositionForm() : RendererCommand_CompositionForm(nullptr) {};
  virtual ~RendererCommand_CompositionForm();

  RendererCommand_CompositionForm(const RendererCommand_CompositionForm& from);
  RendererCommand_CompositionForm(RendererCommand_CompositionForm&& from) noexcept
    : RendererCommand_CompositionForm() {
    *this = ::std::move(from);
  }

  inline RendererCommand_CompositionForm& operator=(const RendererCommand_CompositionForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_CompositionForm& operator=(RendererCommand_CompositionForm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_CompositionForm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_CompositionForm* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_CompositionForm*>(
               &_RendererCommand_CompositionForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RendererCommand_CompositionForm& a, RendererCommand_CompositionForm& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_CompositionForm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_CompositionForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_CompositionForm* New() const final {
    return CreateMaybeMessage<RendererCommand_CompositionForm>(nullptr);
  }

  RendererCommand_CompositionForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_CompositionForm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_CompositionForm& from);
  void MergeFrom(const RendererCommand_CompositionForm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_CompositionForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.CompositionForm";
  }
  protected:
  explicit RendererCommand_CompositionForm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RendererCommand_CompositionForm_Style Style;
  static constexpr Style DEFAULT =
    RendererCommand_CompositionForm_Style_DEFAULT;
  static constexpr Style RECT =
    RendererCommand_CompositionForm_Style_RECT;
  static constexpr Style POINT =
    RendererCommand_CompositionForm_Style_POINT;
  static constexpr Style FORCE_POSITION =
    RendererCommand_CompositionForm_Style_FORCE_POSITION;
  static inline bool Style_IsValid(int value) {
    return RendererCommand_CompositionForm_Style_IsValid(value);
  }
  static constexpr Style Style_MIN =
    RendererCommand_CompositionForm_Style_Style_MIN;
  static constexpr Style Style_MAX =
    RendererCommand_CompositionForm_Style_Style_MAX;
  static constexpr int Style_ARRAYSIZE =
    RendererCommand_CompositionForm_Style_Style_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Style_descriptor() {
    return RendererCommand_CompositionForm_Style_descriptor();
  }
  template<typename T>
  static inline const std::string& Style_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Style>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Style_Name.");
    return RendererCommand_CompositionForm_Style_Name(enum_t_value);
  }
  static inline bool Style_Parse(const std::string& name,
      Style* value) {
    return RendererCommand_CompositionForm_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPositionFieldNumber = 2,
    kAreaFieldNumber = 3,
    kStyleBitsFieldNumber = 4,
  };
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  bool has_current_position() const;
  private:
  bool _internal_has_current_position() const;
  public:
  void clear_current_position();
  const ::mozc::commands::RendererCommand_Point& current_position() const;
  ::mozc::commands::RendererCommand_Point* release_current_position();
  ::mozc::commands::RendererCommand_Point* mutable_current_position();
  void set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position);
  private:
  const ::mozc::commands::RendererCommand_Point& _internal_current_position() const;
  ::mozc::commands::RendererCommand_Point* _internal_mutable_current_position();
  public:
  void unsafe_arena_set_allocated_current_position(
      ::mozc::commands::RendererCommand_Point* current_position);
  ::mozc::commands::RendererCommand_Point* unsafe_arena_release_current_position();

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const ::mozc::commands::RendererCommand_Rectangle& area() const;
  ::mozc::commands::RendererCommand_Rectangle* release_area();
  ::mozc::commands::RendererCommand_Rectangle* mutable_area();
  void set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area);
  private:
  const ::mozc::commands::RendererCommand_Rectangle& _internal_area() const;
  ::mozc::commands::RendererCommand_Rectangle* _internal_mutable_area();
  public:
  void unsafe_arena_set_allocated_area(
      ::mozc::commands::RendererCommand_Rectangle* area);
  ::mozc::commands::RendererCommand_Rectangle* unsafe_arena_release_area();

  // optional uint32 style_bits = 4 [default = 0];
  bool has_style_bits() const;
  private:
  bool _internal_has_style_bits() const;
  public:
  void clear_style_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 style_bits() const;
  void set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style_bits() const;
  void _internal_set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.CompositionForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::RendererCommand_Point* current_position_;
  ::mozc::commands::RendererCommand_Rectangle* area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_bits_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_CandidateForm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.CandidateForm) */ {
 public:
  inline RendererCommand_CandidateForm() : RendererCommand_CandidateForm(nullptr) {};
  virtual ~RendererCommand_CandidateForm();

  RendererCommand_CandidateForm(const RendererCommand_CandidateForm& from);
  RendererCommand_CandidateForm(RendererCommand_CandidateForm&& from) noexcept
    : RendererCommand_CandidateForm() {
    *this = ::std::move(from);
  }

  inline RendererCommand_CandidateForm& operator=(const RendererCommand_CandidateForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_CandidateForm& operator=(RendererCommand_CandidateForm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_CandidateForm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_CandidateForm* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_CandidateForm*>(
               &_RendererCommand_CandidateForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RendererCommand_CandidateForm& a, RendererCommand_CandidateForm& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_CandidateForm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_CandidateForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_CandidateForm* New() const final {
    return CreateMaybeMessage<RendererCommand_CandidateForm>(nullptr);
  }

  RendererCommand_CandidateForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_CandidateForm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_CandidateForm& from);
  void MergeFrom(const RendererCommand_CandidateForm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_CandidateForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.CandidateForm";
  }
  protected:
  explicit RendererCommand_CandidateForm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RendererCommand_CandidateForm_Style Style;
  static constexpr Style DEFAULT =
    RendererCommand_CandidateForm_Style_DEFAULT;
  static constexpr Style CANDIDATEPOS =
    RendererCommand_CandidateForm_Style_CANDIDATEPOS;
  static constexpr Style EXCLUDE =
    RendererCommand_CandidateForm_Style_EXCLUDE;
  static inline bool Style_IsValid(int value) {
    return RendererCommand_CandidateForm_Style_IsValid(value);
  }
  static constexpr Style Style_MIN =
    RendererCommand_CandidateForm_Style_Style_MIN;
  static constexpr Style Style_MAX =
    RendererCommand_CandidateForm_Style_Style_MAX;
  static constexpr int Style_ARRAYSIZE =
    RendererCommand_CandidateForm_Style_Style_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Style_descriptor() {
    return RendererCommand_CandidateForm_Style_descriptor();
  }
  template<typename T>
  static inline const std::string& Style_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Style>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Style_Name.");
    return RendererCommand_CandidateForm_Style_Name(enum_t_value);
  }
  static inline bool Style_Parse(const std::string& name,
      Style* value) {
    return RendererCommand_CandidateForm_Style_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPositionFieldNumber = 2,
    kAreaFieldNumber = 3,
    kStyleBitsFieldNumber = 4,
  };
  // optional .mozc.commands.RendererCommand.Point current_position = 2;
  bool has_current_position() const;
  private:
  bool _internal_has_current_position() const;
  public:
  void clear_current_position();
  const ::mozc::commands::RendererCommand_Point& current_position() const;
  ::mozc::commands::RendererCommand_Point* release_current_position();
  ::mozc::commands::RendererCommand_Point* mutable_current_position();
  void set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position);
  private:
  const ::mozc::commands::RendererCommand_Point& _internal_current_position() const;
  ::mozc::commands::RendererCommand_Point* _internal_mutable_current_position();
  public:
  void unsafe_arena_set_allocated_current_position(
      ::mozc::commands::RendererCommand_Point* current_position);
  ::mozc::commands::RendererCommand_Point* unsafe_arena_release_current_position();

  // optional .mozc.commands.RendererCommand.Rectangle area = 3;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const ::mozc::commands::RendererCommand_Rectangle& area() const;
  ::mozc::commands::RendererCommand_Rectangle* release_area();
  ::mozc::commands::RendererCommand_Rectangle* mutable_area();
  void set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area);
  private:
  const ::mozc::commands::RendererCommand_Rectangle& _internal_area() const;
  ::mozc::commands::RendererCommand_Rectangle* _internal_mutable_area();
  public:
  void unsafe_arena_set_allocated_area(
      ::mozc::commands::RendererCommand_Rectangle* area);
  ::mozc::commands::RendererCommand_Rectangle* unsafe_arena_release_area();

  // optional uint32 style_bits = 4 [default = 0];
  bool has_style_bits() const;
  private:
  bool _internal_has_style_bits() const;
  public:
  void clear_style_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 style_bits() const;
  void set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style_bits() const;
  void _internal_set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.CandidateForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::RendererCommand_Point* current_position_;
  ::mozc::commands::RendererCommand_Rectangle* area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_bits_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_CharacterPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.CharacterPosition) */ {
 public:
  inline RendererCommand_CharacterPosition() : RendererCommand_CharacterPosition(nullptr) {};
  virtual ~RendererCommand_CharacterPosition();

  RendererCommand_CharacterPosition(const RendererCommand_CharacterPosition& from);
  RendererCommand_CharacterPosition(RendererCommand_CharacterPosition&& from) noexcept
    : RendererCommand_CharacterPosition() {
    *this = ::std::move(from);
  }

  inline RendererCommand_CharacterPosition& operator=(const RendererCommand_CharacterPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_CharacterPosition& operator=(RendererCommand_CharacterPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_CharacterPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_CharacterPosition* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_CharacterPosition*>(
               &_RendererCommand_CharacterPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RendererCommand_CharacterPosition& a, RendererCommand_CharacterPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_CharacterPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_CharacterPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_CharacterPosition* New() const final {
    return CreateMaybeMessage<RendererCommand_CharacterPosition>(nullptr);
  }

  RendererCommand_CharacterPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_CharacterPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_CharacterPosition& from);
  void MergeFrom(const RendererCommand_CharacterPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_CharacterPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.CharacterPosition";
  }
  protected:
  explicit RendererCommand_CharacterPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftFieldNumber = 2,
    kDocumentAreaFieldNumber = 4,
    kPositionFieldNumber = 1,
    kLineHeightFieldNumber = 3,
  };
  // optional .mozc.commands.RendererCommand.Point top_left = 2;
  bool has_top_left() const;
  private:
  bool _internal_has_top_left() const;
  public:
  void clear_top_left();
  const ::mozc::commands::RendererCommand_Point& top_left() const;
  ::mozc::commands::RendererCommand_Point* release_top_left();
  ::mozc::commands::RendererCommand_Point* mutable_top_left();
  void set_allocated_top_left(::mozc::commands::RendererCommand_Point* top_left);
  private:
  const ::mozc::commands::RendererCommand_Point& _internal_top_left() const;
  ::mozc::commands::RendererCommand_Point* _internal_mutable_top_left();
  public:
  void unsafe_arena_set_allocated_top_left(
      ::mozc::commands::RendererCommand_Point* top_left);
  ::mozc::commands::RendererCommand_Point* unsafe_arena_release_top_left();

  // optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
  bool has_document_area() const;
  private:
  bool _internal_has_document_area() const;
  public:
  void clear_document_area();
  const ::mozc::commands::RendererCommand_Rectangle& document_area() const;
  ::mozc::commands::RendererCommand_Rectangle* release_document_area();
  ::mozc::commands::RendererCommand_Rectangle* mutable_document_area();
  void set_allocated_document_area(::mozc::commands::RendererCommand_Rectangle* document_area);
  private:
  const ::mozc::commands::RendererCommand_Rectangle& _internal_document_area() const;
  ::mozc::commands::RendererCommand_Rectangle* _internal_mutable_document_area();
  public:
  void unsafe_arena_set_allocated_document_area(
      ::mozc::commands::RendererCommand_Rectangle* document_area);
  ::mozc::commands::RendererCommand_Rectangle* unsafe_arena_release_document_area();

  // optional uint32 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::uint32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 line_height = 3;
  bool has_line_height() const;
  private:
  bool _internal_has_line_height() const;
  public:
  void clear_line_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_height() const;
  void set_line_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line_height() const;
  void _internal_set_line_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.CharacterPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::RendererCommand_Point* top_left_;
  ::mozc::commands::RendererCommand_Rectangle* document_area_;
  ::PROTOBUF_NAMESPACE_ID::uint32 position_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_height_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_CaretInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.CaretInfo) */ {
 public:
  inline RendererCommand_CaretInfo() : RendererCommand_CaretInfo(nullptr) {};
  virtual ~RendererCommand_CaretInfo();

  RendererCommand_CaretInfo(const RendererCommand_CaretInfo& from);
  RendererCommand_CaretInfo(RendererCommand_CaretInfo&& from) noexcept
    : RendererCommand_CaretInfo() {
    *this = ::std::move(from);
  }

  inline RendererCommand_CaretInfo& operator=(const RendererCommand_CaretInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_CaretInfo& operator=(RendererCommand_CaretInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_CaretInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_CaretInfo* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_CaretInfo*>(
               &_RendererCommand_CaretInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RendererCommand_CaretInfo& a, RendererCommand_CaretInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_CaretInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_CaretInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_CaretInfo* New() const final {
    return CreateMaybeMessage<RendererCommand_CaretInfo>(nullptr);
  }

  RendererCommand_CaretInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_CaretInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_CaretInfo& from);
  void MergeFrom(const RendererCommand_CaretInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_CaretInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.CaretInfo";
  }
  protected:
  explicit RendererCommand_CaretInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaretRectFieldNumber = 2,
    kBlinkingFieldNumber = 1,
    kTargetWindowHandleFieldNumber = 3,
  };
  // optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
  bool has_caret_rect() const;
  private:
  bool _internal_has_caret_rect() const;
  public:
  void clear_caret_rect();
  const ::mozc::commands::RendererCommand_Rectangle& caret_rect() const;
  ::mozc::commands::RendererCommand_Rectangle* release_caret_rect();
  ::mozc::commands::RendererCommand_Rectangle* mutable_caret_rect();
  void set_allocated_caret_rect(::mozc::commands::RendererCommand_Rectangle* caret_rect);
  private:
  const ::mozc::commands::RendererCommand_Rectangle& _internal_caret_rect() const;
  ::mozc::commands::RendererCommand_Rectangle* _internal_mutable_caret_rect();
  public:
  void unsafe_arena_set_allocated_caret_rect(
      ::mozc::commands::RendererCommand_Rectangle* caret_rect);
  ::mozc::commands::RendererCommand_Rectangle* unsafe_arena_release_caret_rect();

  // optional bool blinking = 1 [default = false];
  bool has_blinking() const;
  private:
  bool _internal_has_blinking() const;
  public:
  void clear_blinking();
  bool blinking() const;
  void set_blinking(bool value);
  private:
  bool _internal_blinking() const;
  void _internal_set_blinking(bool value);
  public:

  // optional uint32 target_window_handle = 3;
  bool has_target_window_handle() const;
  private:
  bool _internal_has_target_window_handle() const;
  public:
  void clear_target_window_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_window_handle() const;
  void set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_window_handle() const;
  void _internal_set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.CaretInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::RendererCommand_Rectangle* caret_rect_;
  bool blinking_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_window_handle_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_IndicatorInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.IndicatorInfo) */ {
 public:
  inline RendererCommand_IndicatorInfo() : RendererCommand_IndicatorInfo(nullptr) {};
  virtual ~RendererCommand_IndicatorInfo();

  RendererCommand_IndicatorInfo(const RendererCommand_IndicatorInfo& from);
  RendererCommand_IndicatorInfo(RendererCommand_IndicatorInfo&& from) noexcept
    : RendererCommand_IndicatorInfo() {
    *this = ::std::move(from);
  }

  inline RendererCommand_IndicatorInfo& operator=(const RendererCommand_IndicatorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_IndicatorInfo& operator=(RendererCommand_IndicatorInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_IndicatorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_IndicatorInfo* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_IndicatorInfo*>(
               &_RendererCommand_IndicatorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RendererCommand_IndicatorInfo& a, RendererCommand_IndicatorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_IndicatorInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_IndicatorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_IndicatorInfo* New() const final {
    return CreateMaybeMessage<RendererCommand_IndicatorInfo>(nullptr);
  }

  RendererCommand_IndicatorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_IndicatorInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_IndicatorInfo& from);
  void MergeFrom(const RendererCommand_IndicatorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_IndicatorInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.IndicatorInfo";
  }
  protected:
  explicit RendererCommand_IndicatorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .mozc.commands.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::mozc::commands::Status& status() const;
  ::mozc::commands::Status* release_status();
  ::mozc::commands::Status* mutable_status();
  void set_allocated_status(::mozc::commands::Status* status);
  private:
  const ::mozc::commands::Status& _internal_status() const;
  ::mozc::commands::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::mozc::commands::Status* status);
  ::mozc::commands::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.IndicatorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::Status* status_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand_ApplicationInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand.ApplicationInfo) */ {
 public:
  inline RendererCommand_ApplicationInfo() : RendererCommand_ApplicationInfo(nullptr) {};
  virtual ~RendererCommand_ApplicationInfo();

  RendererCommand_ApplicationInfo(const RendererCommand_ApplicationInfo& from);
  RendererCommand_ApplicationInfo(RendererCommand_ApplicationInfo&& from) noexcept
    : RendererCommand_ApplicationInfo() {
    *this = ::std::move(from);
  }

  inline RendererCommand_ApplicationInfo& operator=(const RendererCommand_ApplicationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand_ApplicationInfo& operator=(RendererCommand_ApplicationInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand_ApplicationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand_ApplicationInfo* internal_default_instance() {
    return reinterpret_cast<const RendererCommand_ApplicationInfo*>(
               &_RendererCommand_ApplicationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RendererCommand_ApplicationInfo& a, RendererCommand_ApplicationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand_ApplicationInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand_ApplicationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand_ApplicationInfo* New() const final {
    return CreateMaybeMessage<RendererCommand_ApplicationInfo>(nullptr);
  }

  RendererCommand_ApplicationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand_ApplicationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand_ApplicationInfo& from);
  void MergeFrom(const RendererCommand_ApplicationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand_ApplicationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand.ApplicationInfo";
  }
  protected:
  explicit RendererCommand_ApplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RendererCommand_ApplicationInfo_InputFrameworkType InputFrameworkType;
  static constexpr InputFrameworkType UNKNOWN_FRAMEWORK =
    RendererCommand_ApplicationInfo_InputFrameworkType_UNKNOWN_FRAMEWORK;
  static constexpr InputFrameworkType TSF =
    RendererCommand_ApplicationInfo_InputFrameworkType_TSF;
  static constexpr InputFrameworkType IMM32 =
    RendererCommand_ApplicationInfo_InputFrameworkType_IMM32;
  static constexpr InputFrameworkType IMKit =
    RendererCommand_ApplicationInfo_InputFrameworkType_IMKit;
  static constexpr InputFrameworkType IBus =
    RendererCommand_ApplicationInfo_InputFrameworkType_IBus;
  static inline bool InputFrameworkType_IsValid(int value) {
    return RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(value);
  }
  static constexpr InputFrameworkType InputFrameworkType_MIN =
    RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_MIN;
  static constexpr InputFrameworkType InputFrameworkType_MAX =
    RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_MAX;
  static constexpr int InputFrameworkType_ARRAYSIZE =
    RendererCommand_ApplicationInfo_InputFrameworkType_InputFrameworkType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InputFrameworkType_descriptor() {
    return RendererCommand_ApplicationInfo_InputFrameworkType_descriptor();
  }
  template<typename T>
  static inline const std::string& InputFrameworkType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InputFrameworkType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InputFrameworkType_Name.");
    return RendererCommand_ApplicationInfo_InputFrameworkType_Name(enum_t_value);
  }
  static inline bool InputFrameworkType_Parse(const std::string& name,
      InputFrameworkType* value) {
    return RendererCommand_ApplicationInfo_InputFrameworkType_Parse(name, value);
  }

  typedef RendererCommand_ApplicationInfo_UIVisibility UIVisibility;
  static constexpr UIVisibility ShowUIDefault =
    RendererCommand_ApplicationInfo_UIVisibility_ShowUIDefault;
  static constexpr UIVisibility ShowCompositionWindow =
    RendererCommand_ApplicationInfo_UIVisibility_ShowCompositionWindow;
  static constexpr UIVisibility ShowCandidateWindow =
    RendererCommand_ApplicationInfo_UIVisibility_ShowCandidateWindow;
  static constexpr UIVisibility ShowSuggestWindow =
    RendererCommand_ApplicationInfo_UIVisibility_ShowSuggestWindow;
  static inline bool UIVisibility_IsValid(int value) {
    return RendererCommand_ApplicationInfo_UIVisibility_IsValid(value);
  }
  static constexpr UIVisibility UIVisibility_MIN =
    RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_MIN;
  static constexpr UIVisibility UIVisibility_MAX =
    RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_MAX;
  static constexpr int UIVisibility_ARRAYSIZE =
    RendererCommand_ApplicationInfo_UIVisibility_UIVisibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UIVisibility_descriptor() {
    return RendererCommand_ApplicationInfo_UIVisibility_descriptor();
  }
  template<typename T>
  static inline const std::string& UIVisibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UIVisibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UIVisibility_Name.");
    return RendererCommand_ApplicationInfo_UIVisibility_Name(enum_t_value);
  }
  static inline bool UIVisibility_Parse(const std::string& name,
      UIVisibility* value) {
    return RendererCommand_ApplicationInfo_UIVisibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPangoFontDescriptionFieldNumber = 13,
    kCompositionFontFieldNumber = 5,
    kCompositionFormFieldNumber = 7,
    kCandidateFormFieldNumber = 8,
    kCompositionTargetFieldNumber = 10,
    kCaretInfoFieldNumber = 11,
    kIndicatorInfoFieldNumber = 14,
    kProcessIdFieldNumber = 1,
    kThreadIdFieldNumber = 2,
    kReceiverHandleFieldNumber = 3,
    kTargetWindowHandleFieldNumber = 4,
    kInputFrameworkFieldNumber = 6,
    kUiVisibilitiesFieldNumber = 9,
  };
  // optional string pango_font_description = 13;
  bool has_pango_font_description() const;
  private:
  bool _internal_has_pango_font_description() const;
  public:
  void clear_pango_font_description();
  const std::string& pango_font_description() const;
  void set_pango_font_description(const std::string& value);
  void set_pango_font_description(std::string&& value);
  void set_pango_font_description(const char* value);
  void set_pango_font_description(const char* value, size_t size);
  std::string* mutable_pango_font_description();
  std::string* release_pango_font_description();
  void set_allocated_pango_font_description(std::string* pango_font_description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pango_font_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pango_font_description(
      std::string* pango_font_description);
  private:
  const std::string& _internal_pango_font_description() const;
  void _internal_set_pango_font_description(const std::string& value);
  std::string* _internal_mutable_pango_font_description();
  public:

  // optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
  bool has_composition_font() const;
  private:
  bool _internal_has_composition_font() const;
  public:
  void clear_composition_font();
  const ::mozc::commands::RendererCommand_WinLogFont& composition_font() const;
  ::mozc::commands::RendererCommand_WinLogFont* release_composition_font();
  ::mozc::commands::RendererCommand_WinLogFont* mutable_composition_font();
  void set_allocated_composition_font(::mozc::commands::RendererCommand_WinLogFont* composition_font);
  private:
  const ::mozc::commands::RendererCommand_WinLogFont& _internal_composition_font() const;
  ::mozc::commands::RendererCommand_WinLogFont* _internal_mutable_composition_font();
  public:
  void unsafe_arena_set_allocated_composition_font(
      ::mozc::commands::RendererCommand_WinLogFont* composition_font);
  ::mozc::commands::RendererCommand_WinLogFont* unsafe_arena_release_composition_font();

  // optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
  bool has_composition_form() const;
  private:
  bool _internal_has_composition_form() const;
  public:
  void clear_composition_form();
  const ::mozc::commands::RendererCommand_CompositionForm& composition_form() const;
  ::mozc::commands::RendererCommand_CompositionForm* release_composition_form();
  ::mozc::commands::RendererCommand_CompositionForm* mutable_composition_form();
  void set_allocated_composition_form(::mozc::commands::RendererCommand_CompositionForm* composition_form);
  private:
  const ::mozc::commands::RendererCommand_CompositionForm& _internal_composition_form() const;
  ::mozc::commands::RendererCommand_CompositionForm* _internal_mutable_composition_form();
  public:
  void unsafe_arena_set_allocated_composition_form(
      ::mozc::commands::RendererCommand_CompositionForm* composition_form);
  ::mozc::commands::RendererCommand_CompositionForm* unsafe_arena_release_composition_form();

  // optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
  bool has_candidate_form() const;
  private:
  bool _internal_has_candidate_form() const;
  public:
  void clear_candidate_form();
  const ::mozc::commands::RendererCommand_CandidateForm& candidate_form() const;
  ::mozc::commands::RendererCommand_CandidateForm* release_candidate_form();
  ::mozc::commands::RendererCommand_CandidateForm* mutable_candidate_form();
  void set_allocated_candidate_form(::mozc::commands::RendererCommand_CandidateForm* candidate_form);
  private:
  const ::mozc::commands::RendererCommand_CandidateForm& _internal_candidate_form() const;
  ::mozc::commands::RendererCommand_CandidateForm* _internal_mutable_candidate_form();
  public:
  void unsafe_arena_set_allocated_candidate_form(
      ::mozc::commands::RendererCommand_CandidateForm* candidate_form);
  ::mozc::commands::RendererCommand_CandidateForm* unsafe_arena_release_candidate_form();

  // optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
  bool has_composition_target() const;
  private:
  bool _internal_has_composition_target() const;
  public:
  void clear_composition_target();
  const ::mozc::commands::RendererCommand_CharacterPosition& composition_target() const;
  ::mozc::commands::RendererCommand_CharacterPosition* release_composition_target();
  ::mozc::commands::RendererCommand_CharacterPosition* mutable_composition_target();
  void set_allocated_composition_target(::mozc::commands::RendererCommand_CharacterPosition* composition_target);
  private:
  const ::mozc::commands::RendererCommand_CharacterPosition& _internal_composition_target() const;
  ::mozc::commands::RendererCommand_CharacterPosition* _internal_mutable_composition_target();
  public:
  void unsafe_arena_set_allocated_composition_target(
      ::mozc::commands::RendererCommand_CharacterPosition* composition_target);
  ::mozc::commands::RendererCommand_CharacterPosition* unsafe_arena_release_composition_target();

  // optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
  bool has_caret_info() const;
  private:
  bool _internal_has_caret_info() const;
  public:
  void clear_caret_info();
  const ::mozc::commands::RendererCommand_CaretInfo& caret_info() const;
  ::mozc::commands::RendererCommand_CaretInfo* release_caret_info();
  ::mozc::commands::RendererCommand_CaretInfo* mutable_caret_info();
  void set_allocated_caret_info(::mozc::commands::RendererCommand_CaretInfo* caret_info);
  private:
  const ::mozc::commands::RendererCommand_CaretInfo& _internal_caret_info() const;
  ::mozc::commands::RendererCommand_CaretInfo* _internal_mutable_caret_info();
  public:
  void unsafe_arena_set_allocated_caret_info(
      ::mozc::commands::RendererCommand_CaretInfo* caret_info);
  ::mozc::commands::RendererCommand_CaretInfo* unsafe_arena_release_caret_info();

  // optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
  bool has_indicator_info() const;
  private:
  bool _internal_has_indicator_info() const;
  public:
  void clear_indicator_info();
  const ::mozc::commands::RendererCommand_IndicatorInfo& indicator_info() const;
  ::mozc::commands::RendererCommand_IndicatorInfo* release_indicator_info();
  ::mozc::commands::RendererCommand_IndicatorInfo* mutable_indicator_info();
  void set_allocated_indicator_info(::mozc::commands::RendererCommand_IndicatorInfo* indicator_info);
  private:
  const ::mozc::commands::RendererCommand_IndicatorInfo& _internal_indicator_info() const;
  ::mozc::commands::RendererCommand_IndicatorInfo* _internal_mutable_indicator_info();
  public:
  void unsafe_arena_set_allocated_indicator_info(
      ::mozc::commands::RendererCommand_IndicatorInfo* indicator_info);
  ::mozc::commands::RendererCommand_IndicatorInfo* unsafe_arena_release_indicator_info();

  // optional uint32 process_id = 1;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_process_id() const;
  void _internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thread_id = 2;
  bool has_thread_id() const;
  private:
  bool _internal_has_thread_id() const;
  public:
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 receiver_handle = 3;
  bool has_receiver_handle() const;
  private:
  bool _internal_has_receiver_handle() const;
  public:
  void clear_receiver_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_handle() const;
  void set_receiver_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiver_handle() const;
  void _internal_set_receiver_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 target_window_handle = 4;
  bool has_target_window_handle() const;
  private:
  bool _internal_has_target_window_handle() const;
  public:
  void clear_target_window_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_window_handle() const;
  void set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_window_handle() const;
  void _internal_set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
  bool has_input_framework() const;
  private:
  bool _internal_has_input_framework() const;
  public:
  void clear_input_framework();
  ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType input_framework() const;
  void set_input_framework(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType value);
  private:
  ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType _internal_input_framework() const;
  void _internal_set_input_framework(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType value);
  public:

  // optional int32 ui_visibilities = 9 [default = 0];
  bool has_ui_visibilities() const;
  private:
  bool _internal_has_ui_visibilities() const;
  public:
  void clear_ui_visibilities();
  ::PROTOBUF_NAMESPACE_ID::int32 ui_visibilities() const;
  void set_ui_visibilities(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ui_visibilities() const;
  void _internal_set_ui_visibilities(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand.ApplicationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pango_font_description_;
  ::mozc::commands::RendererCommand_WinLogFont* composition_font_;
  ::mozc::commands::RendererCommand_CompositionForm* composition_form_;
  ::mozc::commands::RendererCommand_CandidateForm* candidate_form_;
  ::mozc::commands::RendererCommand_CharacterPosition* composition_target_;
  ::mozc::commands::RendererCommand_CaretInfo* caret_info_;
  ::mozc::commands::RendererCommand_IndicatorInfo* indicator_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 receiver_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_window_handle_;
  int input_framework_;
  ::PROTOBUF_NAMESPACE_ID::int32 ui_visibilities_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class RendererCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.commands.RendererCommand) */ {
 public:
  inline RendererCommand() : RendererCommand(nullptr) {};
  virtual ~RendererCommand();

  RendererCommand(const RendererCommand& from);
  RendererCommand(RendererCommand&& from) noexcept
    : RendererCommand() {
    *this = ::std::move(from);
  }

  inline RendererCommand& operator=(const RendererCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RendererCommand& operator=(RendererCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RendererCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RendererCommand* internal_default_instance() {
    return reinterpret_cast<const RendererCommand*>(
               &_RendererCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RendererCommand& a, RendererCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RendererCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RendererCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RendererCommand* New() const final {
    return CreateMaybeMessage<RendererCommand>(nullptr);
  }

  RendererCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RendererCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RendererCommand& from);
  void MergeFrom(const RendererCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RendererCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.commands.RendererCommand";
  }
  protected:
  explicit RendererCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2frenderer_5fcommand_2eproto);
    return ::descriptor_table_protocol_2frenderer_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RendererCommand_Rectangle Rectangle;
  typedef RendererCommand_Point Point;
  typedef RendererCommand_WinLogFont WinLogFont;
  typedef RendererCommand_CompositionForm CompositionForm;
  typedef RendererCommand_CandidateForm CandidateForm;
  typedef RendererCommand_CharacterPosition CharacterPosition;
  typedef RendererCommand_CaretInfo CaretInfo;
  typedef RendererCommand_IndicatorInfo IndicatorInfo;
  typedef RendererCommand_ApplicationInfo ApplicationInfo;

  typedef RendererCommand_CommandType CommandType;
  static constexpr CommandType NOOP =
    RendererCommand_CommandType_NOOP;
  static constexpr CommandType UPDATE =
    RendererCommand_CommandType_UPDATE;
  static constexpr CommandType SHUTDOWN =
    RendererCommand_CommandType_SHUTDOWN;
  static inline bool CommandType_IsValid(int value) {
    return RendererCommand_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    RendererCommand_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    RendererCommand_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    RendererCommand_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return RendererCommand_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return RendererCommand_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(const std::string& name,
      CommandType* value) {
    return RendererCommand_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 3,
    kPreeditRectangleFieldNumber = 4,
    kApplicationInfoFieldNumber = 5,
    kTypeFieldNumber = 1,
    kVisibleFieldNumber = 2,
  };
  // optional .mozc.commands.Output output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::mozc::commands::Output& output() const;
  ::mozc::commands::Output* release_output();
  ::mozc::commands::Output* mutable_output();
  void set_allocated_output(::mozc::commands::Output* output);
  private:
  const ::mozc::commands::Output& _internal_output() const;
  ::mozc::commands::Output* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::mozc::commands::Output* output);
  ::mozc::commands::Output* unsafe_arena_release_output();

  // optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
  bool has_preedit_rectangle() const;
  private:
  bool _internal_has_preedit_rectangle() const;
  public:
  void clear_preedit_rectangle();
  const ::mozc::commands::RendererCommand_Rectangle& preedit_rectangle() const;
  ::mozc::commands::RendererCommand_Rectangle* release_preedit_rectangle();
  ::mozc::commands::RendererCommand_Rectangle* mutable_preedit_rectangle();
  void set_allocated_preedit_rectangle(::mozc::commands::RendererCommand_Rectangle* preedit_rectangle);
  private:
  const ::mozc::commands::RendererCommand_Rectangle& _internal_preedit_rectangle() const;
  ::mozc::commands::RendererCommand_Rectangle* _internal_mutable_preedit_rectangle();
  public:
  void unsafe_arena_set_allocated_preedit_rectangle(
      ::mozc::commands::RendererCommand_Rectangle* preedit_rectangle);
  ::mozc::commands::RendererCommand_Rectangle* unsafe_arena_release_preedit_rectangle();

  // optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
  bool has_application_info() const;
  private:
  bool _internal_has_application_info() const;
  public:
  void clear_application_info();
  const ::mozc::commands::RendererCommand_ApplicationInfo& application_info() const;
  ::mozc::commands::RendererCommand_ApplicationInfo* release_application_info();
  ::mozc::commands::RendererCommand_ApplicationInfo* mutable_application_info();
  void set_allocated_application_info(::mozc::commands::RendererCommand_ApplicationInfo* application_info);
  private:
  const ::mozc::commands::RendererCommand_ApplicationInfo& _internal_application_info() const;
  ::mozc::commands::RendererCommand_ApplicationInfo* _internal_mutable_application_info();
  public:
  void unsafe_arena_set_allocated_application_info(
      ::mozc::commands::RendererCommand_ApplicationInfo* application_info);
  ::mozc::commands::RendererCommand_ApplicationInfo* unsafe_arena_release_application_info();

  // optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mozc::commands::RendererCommand_CommandType type() const;
  void set_type(::mozc::commands::RendererCommand_CommandType value);
  private:
  ::mozc::commands::RendererCommand_CommandType _internal_type() const;
  void _internal_set_type(::mozc::commands::RendererCommand_CommandType value);
  public:

  // optional bool visible = 2 [default = false];
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.commands.RendererCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::commands::Output* output_;
  ::mozc::commands::RendererCommand_Rectangle* preedit_rectangle_;
  ::mozc::commands::RendererCommand_ApplicationInfo* application_info_;
  int type_;
  bool visible_;
  friend struct ::TableStruct_protocol_2frenderer_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RendererCommand_Rectangle

// optional int32 left = 1;
inline bool RendererCommand_Rectangle::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RendererCommand_Rectangle::has_left() const {
  return _internal_has_left();
}
inline void RendererCommand_Rectangle::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::left() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.left)
  return _internal_left();
}
inline void RendererCommand_Rectangle::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void RendererCommand_Rectangle::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.left)
}

// optional int32 top = 2;
inline bool RendererCommand_Rectangle::_internal_has_top() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RendererCommand_Rectangle::has_top() const {
  return _internal_has_top();
}
inline void RendererCommand_Rectangle::clear_top() {
  top_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::_internal_top() const {
  return top_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::top() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.top)
  return _internal_top();
}
inline void RendererCommand_Rectangle::_internal_set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_ = value;
}
inline void RendererCommand_Rectangle::set_top(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.top)
}

// optional int32 right = 3;
inline bool RendererCommand_Rectangle::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_Rectangle::has_right() const {
  return _internal_has_right();
}
inline void RendererCommand_Rectangle::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::right() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.right)
  return _internal_right();
}
inline void RendererCommand_Rectangle::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  right_ = value;
}
inline void RendererCommand_Rectangle::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.right)
}

// optional int32 bottom = 4;
inline bool RendererCommand_Rectangle::_internal_has_bottom() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RendererCommand_Rectangle::has_bottom() const {
  return _internal_has_bottom();
}
inline void RendererCommand_Rectangle::clear_bottom() {
  bottom_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::_internal_bottom() const {
  return bottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Rectangle::bottom() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Rectangle.bottom)
  return _internal_bottom();
}
inline void RendererCommand_Rectangle::_internal_set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bottom_ = value;
}
inline void RendererCommand_Rectangle::set_bottom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Rectangle.bottom)
}

// -------------------------------------------------------------------

// RendererCommand_Point

// optional int32 x = 1;
inline bool RendererCommand_Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RendererCommand_Point::has_x() const {
  return _internal_has_x();
}
inline void RendererCommand_Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Point::x() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Point.x)
  return _internal_x();
}
inline void RendererCommand_Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void RendererCommand_Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Point.x)
}

// optional int32 y = 2;
inline bool RendererCommand_Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RendererCommand_Point::has_y() const {
  return _internal_has_y();
}
inline void RendererCommand_Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_Point::y() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.Point.y)
  return _internal_y();
}
inline void RendererCommand_Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void RendererCommand_Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.Point.y)
}

// -------------------------------------------------------------------

// RendererCommand_WinLogFont

// optional int32 height = 1 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_height() const {
  return _internal_has_height();
}
inline void RendererCommand_WinLogFont::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::height() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.height)
  return _internal_height();
}
inline void RendererCommand_WinLogFont::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void RendererCommand_WinLogFont::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.height)
}

// optional int32 width = 2 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_width() const {
  return _internal_has_width();
}
inline void RendererCommand_WinLogFont::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::width() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.width)
  return _internal_width();
}
inline void RendererCommand_WinLogFont::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void RendererCommand_WinLogFont::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.width)
}

// optional int32 escapement = 3 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_escapement() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_escapement() const {
  return _internal_has_escapement();
}
inline void RendererCommand_WinLogFont::clear_escapement() {
  escapement_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_escapement() const {
  return escapement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::escapement() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.escapement)
  return _internal_escapement();
}
inline void RendererCommand_WinLogFont::_internal_set_escapement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  escapement_ = value;
}
inline void RendererCommand_WinLogFont::set_escapement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_escapement(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.escapement)
}

// optional int32 orientation = 4 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_orientation() const {
  return _internal_has_orientation();
}
inline void RendererCommand_WinLogFont::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_orientation() const {
  return orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::orientation() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.orientation)
  return _internal_orientation();
}
inline void RendererCommand_WinLogFont::_internal_set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  orientation_ = value;
}
inline void RendererCommand_WinLogFont::set_orientation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.orientation)
}

// optional int32 weight = 5 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_weight() const {
  return _internal_has_weight();
}
inline void RendererCommand_WinLogFont::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::weight() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.weight)
  return _internal_weight();
}
inline void RendererCommand_WinLogFont::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  weight_ = value;
}
inline void RendererCommand_WinLogFont::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.weight)
}

// optional bool italic = 6 [default = false];
inline bool RendererCommand_WinLogFont::_internal_has_italic() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_italic() const {
  return _internal_has_italic();
}
inline void RendererCommand_WinLogFont::clear_italic() {
  italic_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RendererCommand_WinLogFont::_internal_italic() const {
  return italic_;
}
inline bool RendererCommand_WinLogFont::italic() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.italic)
  return _internal_italic();
}
inline void RendererCommand_WinLogFont::_internal_set_italic(bool value) {
  _has_bits_[0] |= 0x00000040u;
  italic_ = value;
}
inline void RendererCommand_WinLogFont::set_italic(bool value) {
  _internal_set_italic(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.italic)
}

// optional bool underline = 7 [default = false];
inline bool RendererCommand_WinLogFont::_internal_has_underline() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_underline() const {
  return _internal_has_underline();
}
inline void RendererCommand_WinLogFont::clear_underline() {
  underline_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RendererCommand_WinLogFont::_internal_underline() const {
  return underline_;
}
inline bool RendererCommand_WinLogFont::underline() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.underline)
  return _internal_underline();
}
inline void RendererCommand_WinLogFont::_internal_set_underline(bool value) {
  _has_bits_[0] |= 0x00000080u;
  underline_ = value;
}
inline void RendererCommand_WinLogFont::set_underline(bool value) {
  _internal_set_underline(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.underline)
}

// optional bool strike_out = 8 [default = false];
inline bool RendererCommand_WinLogFont::_internal_has_strike_out() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_strike_out() const {
  return _internal_has_strike_out();
}
inline void RendererCommand_WinLogFont::clear_strike_out() {
  strike_out_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RendererCommand_WinLogFont::_internal_strike_out() const {
  return strike_out_;
}
inline bool RendererCommand_WinLogFont::strike_out() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.strike_out)
  return _internal_strike_out();
}
inline void RendererCommand_WinLogFont::_internal_set_strike_out(bool value) {
  _has_bits_[0] |= 0x00000100u;
  strike_out_ = value;
}
inline void RendererCommand_WinLogFont::set_strike_out(bool value) {
  _internal_set_strike_out(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.strike_out)
}

// optional int32 char_set = 9 [default = 1];
inline bool RendererCommand_WinLogFont::_internal_has_char_set() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_char_set() const {
  return _internal_has_char_set();
}
inline void RendererCommand_WinLogFont::clear_char_set() {
  char_set_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_char_set() const {
  return char_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::char_set() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.char_set)
  return _internal_char_set();
}
inline void RendererCommand_WinLogFont::_internal_set_char_set(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  char_set_ = value;
}
inline void RendererCommand_WinLogFont::set_char_set(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_char_set(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.char_set)
}

// optional int32 out_precision = 10 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_out_precision() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_out_precision() const {
  return _internal_has_out_precision();
}
inline void RendererCommand_WinLogFont::clear_out_precision() {
  out_precision_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_out_precision() const {
  return out_precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::out_precision() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.out_precision)
  return _internal_out_precision();
}
inline void RendererCommand_WinLogFont::_internal_set_out_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  out_precision_ = value;
}
inline void RendererCommand_WinLogFont::set_out_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_precision(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.out_precision)
}

// optional int32 clip_precision = 11 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_clip_precision() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_clip_precision() const {
  return _internal_has_clip_precision();
}
inline void RendererCommand_WinLogFont::clear_clip_precision() {
  clip_precision_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_clip_precision() const {
  return clip_precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::clip_precision() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.clip_precision)
  return _internal_clip_precision();
}
inline void RendererCommand_WinLogFont::_internal_set_clip_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  clip_precision_ = value;
}
inline void RendererCommand_WinLogFont::set_clip_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clip_precision(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.clip_precision)
}

// optional int32 quality = 12 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_quality() const {
  return _internal_has_quality();
}
inline void RendererCommand_WinLogFont::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::quality() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.quality)
  return _internal_quality();
}
inline void RendererCommand_WinLogFont::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  quality_ = value;
}
inline void RendererCommand_WinLogFont::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.quality)
}

// optional int32 pitch_and_family = 13 [default = 0];
inline bool RendererCommand_WinLogFont::_internal_has_pitch_and_family() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_pitch_and_family() const {
  return _internal_has_pitch_and_family();
}
inline void RendererCommand_WinLogFont::clear_pitch_and_family() {
  pitch_and_family_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::_internal_pitch_and_family() const {
  return pitch_and_family_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_WinLogFont::pitch_and_family() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.pitch_and_family)
  return _internal_pitch_and_family();
}
inline void RendererCommand_WinLogFont::_internal_set_pitch_and_family(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  pitch_and_family_ = value;
}
inline void RendererCommand_WinLogFont::set_pitch_and_family(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch_and_family(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.pitch_and_family)
}

// optional string face_name = 14;
inline bool RendererCommand_WinLogFont::_internal_has_face_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RendererCommand_WinLogFont::has_face_name() const {
  return _internal_has_face_name();
}
inline void RendererCommand_WinLogFont::clear_face_name() {
  face_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RendererCommand_WinLogFont::face_name() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.WinLogFont.face_name)
  return _internal_face_name();
}
inline void RendererCommand_WinLogFont::set_face_name(const std::string& value) {
  _internal_set_face_name(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.WinLogFont.face_name)
}
inline std::string* RendererCommand_WinLogFont::mutable_face_name() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.WinLogFont.face_name)
  return _internal_mutable_face_name();
}
inline const std::string& RendererCommand_WinLogFont::_internal_face_name() const {
  return face_name_.Get();
}
inline void RendererCommand_WinLogFont::_internal_set_face_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  face_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RendererCommand_WinLogFont::set_face_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  face_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.RendererCommand.WinLogFont.face_name)
}
inline void RendererCommand_WinLogFont::set_face_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  face_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.RendererCommand.WinLogFont.face_name)
}
inline void RendererCommand_WinLogFont::set_face_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  face_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.RendererCommand.WinLogFont.face_name)
}
inline std::string* RendererCommand_WinLogFont::_internal_mutable_face_name() {
  _has_bits_[0] |= 0x00000001u;
  return face_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RendererCommand_WinLogFont::release_face_name() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.WinLogFont.face_name)
  if (!_internal_has_face_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return face_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RendererCommand_WinLogFont::set_allocated_face_name(std::string* face_name) {
  if (face_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  face_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.WinLogFont.face_name)
}
inline std::string* RendererCommand_WinLogFont::unsafe_arena_release_face_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.RendererCommand.WinLogFont.face_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return face_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RendererCommand_WinLogFont::unsafe_arena_set_allocated_face_name(
    std::string* face_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (face_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  face_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      face_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.WinLogFont.face_name)
}

// -------------------------------------------------------------------

// RendererCommand_CompositionForm

// optional .mozc.commands.RendererCommand.Point current_position = 2;
inline bool RendererCommand_CompositionForm::_internal_has_current_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_position_ != nullptr);
  return value;
}
inline bool RendererCommand_CompositionForm::has_current_position() const {
  return _internal_has_current_position();
}
inline void RendererCommand_CompositionForm::clear_current_position() {
  if (current_position_ != nullptr) current_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CompositionForm::_internal_current_position() const {
  const ::mozc::commands::RendererCommand_Point* p = current_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Point*>(
      &::mozc::commands::_RendererCommand_Point_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CompositionForm::current_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.current_position)
  return _internal_current_position();
}
inline void RendererCommand_CompositionForm::unsafe_arena_set_allocated_current_position(
    ::mozc::commands::RendererCommand_Point* current_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_position_);
  }
  current_position_ = current_position;
  if (current_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CompositionForm.current_position)
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::release_current_position() {
  auto temp = unsafe_arena_release_current_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::unsafe_arena_release_current_position() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CompositionForm.current_position)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::RendererCommand_Point* temp = current_position_;
  current_position_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::_internal_mutable_current_position() {
  _has_bits_[0] |= 0x00000001u;
  if (current_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Point>(GetArena());
    current_position_ = p;
  }
  return current_position_;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CompositionForm::mutable_current_position() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CompositionForm.current_position)
  return _internal_mutable_current_position();
}
inline void RendererCommand_CompositionForm::set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_position_;
  }
  if (current_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_position);
    if (message_arena != submessage_arena) {
      current_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_position_ = current_position;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CompositionForm.current_position)
}

// optional .mozc.commands.RendererCommand.Rectangle area = 3;
inline bool RendererCommand_CompositionForm::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || area_ != nullptr);
  return value;
}
inline bool RendererCommand_CompositionForm::has_area() const {
  return _internal_has_area();
}
inline void RendererCommand_CompositionForm::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CompositionForm::_internal_area() const {
  const ::mozc::commands::RendererCommand_Rectangle* p = area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Rectangle*>(
      &::mozc::commands::_RendererCommand_Rectangle_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CompositionForm::area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.area)
  return _internal_area();
}
inline void RendererCommand_CompositionForm::unsafe_arena_set_allocated_area(
    ::mozc::commands::RendererCommand_Rectangle* area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(area_);
  }
  area_ = area;
  if (area) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CompositionForm.area)
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::release_area() {
  auto temp = unsafe_arena_release_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::unsafe_arena_release_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CompositionForm.area)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::RendererCommand_Rectangle* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::_internal_mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(GetArena());
    area_ = p;
  }
  return area_;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CompositionForm::mutable_area() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CompositionForm.area)
  return _internal_mutable_area();
}
inline void RendererCommand_CompositionForm::set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(area);
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CompositionForm.area)
}

// optional uint32 style_bits = 4 [default = 0];
inline bool RendererCommand_CompositionForm::_internal_has_style_bits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_CompositionForm::has_style_bits() const {
  return _internal_has_style_bits();
}
inline void RendererCommand_CompositionForm::clear_style_bits() {
  style_bits_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CompositionForm::_internal_style_bits() const {
  return style_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CompositionForm::style_bits() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CompositionForm.style_bits)
  return _internal_style_bits();
}
inline void RendererCommand_CompositionForm::_internal_set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  style_bits_ = value;
}
inline void RendererCommand_CompositionForm::set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style_bits(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CompositionForm.style_bits)
}

// -------------------------------------------------------------------

// RendererCommand_CandidateForm

// optional .mozc.commands.RendererCommand.Point current_position = 2;
inline bool RendererCommand_CandidateForm::_internal_has_current_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_position_ != nullptr);
  return value;
}
inline bool RendererCommand_CandidateForm::has_current_position() const {
  return _internal_has_current_position();
}
inline void RendererCommand_CandidateForm::clear_current_position() {
  if (current_position_ != nullptr) current_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CandidateForm::_internal_current_position() const {
  const ::mozc::commands::RendererCommand_Point* p = current_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Point*>(
      &::mozc::commands::_RendererCommand_Point_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CandidateForm::current_position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.current_position)
  return _internal_current_position();
}
inline void RendererCommand_CandidateForm::unsafe_arena_set_allocated_current_position(
    ::mozc::commands::RendererCommand_Point* current_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_position_);
  }
  current_position_ = current_position;
  if (current_position) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CandidateForm.current_position)
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::release_current_position() {
  auto temp = unsafe_arena_release_current_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::unsafe_arena_release_current_position() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CandidateForm.current_position)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::RendererCommand_Point* temp = current_position_;
  current_position_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::_internal_mutable_current_position() {
  _has_bits_[0] |= 0x00000001u;
  if (current_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Point>(GetArena());
    current_position_ = p;
  }
  return current_position_;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CandidateForm::mutable_current_position() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CandidateForm.current_position)
  return _internal_mutable_current_position();
}
inline void RendererCommand_CandidateForm::set_allocated_current_position(::mozc::commands::RendererCommand_Point* current_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_position_;
  }
  if (current_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_position);
    if (message_arena != submessage_arena) {
      current_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_position_ = current_position;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CandidateForm.current_position)
}

// optional .mozc.commands.RendererCommand.Rectangle area = 3;
inline bool RendererCommand_CandidateForm::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || area_ != nullptr);
  return value;
}
inline bool RendererCommand_CandidateForm::has_area() const {
  return _internal_has_area();
}
inline void RendererCommand_CandidateForm::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CandidateForm::_internal_area() const {
  const ::mozc::commands::RendererCommand_Rectangle* p = area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Rectangle*>(
      &::mozc::commands::_RendererCommand_Rectangle_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CandidateForm::area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.area)
  return _internal_area();
}
inline void RendererCommand_CandidateForm::unsafe_arena_set_allocated_area(
    ::mozc::commands::RendererCommand_Rectangle* area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(area_);
  }
  area_ = area;
  if (area) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CandidateForm.area)
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::release_area() {
  auto temp = unsafe_arena_release_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::unsafe_arena_release_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CandidateForm.area)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::RendererCommand_Rectangle* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::_internal_mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(GetArena());
    area_ = p;
  }
  return area_;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CandidateForm::mutable_area() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CandidateForm.area)
  return _internal_mutable_area();
}
inline void RendererCommand_CandidateForm::set_allocated_area(::mozc::commands::RendererCommand_Rectangle* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(area);
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CandidateForm.area)
}

// optional uint32 style_bits = 4 [default = 0];
inline bool RendererCommand_CandidateForm::_internal_has_style_bits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_CandidateForm::has_style_bits() const {
  return _internal_has_style_bits();
}
inline void RendererCommand_CandidateForm::clear_style_bits() {
  style_bits_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CandidateForm::_internal_style_bits() const {
  return style_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CandidateForm::style_bits() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CandidateForm.style_bits)
  return _internal_style_bits();
}
inline void RendererCommand_CandidateForm::_internal_set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  style_bits_ = value;
}
inline void RendererCommand_CandidateForm::set_style_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style_bits(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CandidateForm.style_bits)
}

// -------------------------------------------------------------------

// RendererCommand_CharacterPosition

// optional uint32 position = 1;
inline bool RendererCommand_CharacterPosition::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_CharacterPosition::has_position() const {
  return _internal_has_position();
}
inline void RendererCommand_CharacterPosition::clear_position() {
  position_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CharacterPosition::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CharacterPosition::position() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.position)
  return _internal_position();
}
inline void RendererCommand_CharacterPosition::_internal_set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void RendererCommand_CharacterPosition::set_position(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CharacterPosition.position)
}

// optional .mozc.commands.RendererCommand.Point top_left = 2;
inline bool RendererCommand_CharacterPosition::_internal_has_top_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || top_left_ != nullptr);
  return value;
}
inline bool RendererCommand_CharacterPosition::has_top_left() const {
  return _internal_has_top_left();
}
inline void RendererCommand_CharacterPosition::clear_top_left() {
  if (top_left_ != nullptr) top_left_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CharacterPosition::_internal_top_left() const {
  const ::mozc::commands::RendererCommand_Point* p = top_left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Point*>(
      &::mozc::commands::_RendererCommand_Point_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Point& RendererCommand_CharacterPosition::top_left() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.top_left)
  return _internal_top_left();
}
inline void RendererCommand_CharacterPosition::unsafe_arena_set_allocated_top_left(
    ::mozc::commands::RendererCommand_Point* top_left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(top_left_);
  }
  top_left_ = top_left;
  if (top_left) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CharacterPosition.top_left)
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::release_top_left() {
  auto temp = unsafe_arena_release_top_left();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::unsafe_arena_release_top_left() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CharacterPosition.top_left)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::RendererCommand_Point* temp = top_left_;
  top_left_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::_internal_mutable_top_left() {
  _has_bits_[0] |= 0x00000001u;
  if (top_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Point>(GetArena());
    top_left_ = p;
  }
  return top_left_;
}
inline ::mozc::commands::RendererCommand_Point* RendererCommand_CharacterPosition::mutable_top_left() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CharacterPosition.top_left)
  return _internal_mutable_top_left();
}
inline void RendererCommand_CharacterPosition::set_allocated_top_left(::mozc::commands::RendererCommand_Point* top_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete top_left_;
  }
  if (top_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(top_left);
    if (message_arena != submessage_arena) {
      top_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  top_left_ = top_left;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CharacterPosition.top_left)
}

// optional uint32 line_height = 3;
inline bool RendererCommand_CharacterPosition::_internal_has_line_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RendererCommand_CharacterPosition::has_line_height() const {
  return _internal_has_line_height();
}
inline void RendererCommand_CharacterPosition::clear_line_height() {
  line_height_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CharacterPosition::_internal_line_height() const {
  return line_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CharacterPosition::line_height() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.line_height)
  return _internal_line_height();
}
inline void RendererCommand_CharacterPosition::_internal_set_line_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  line_height_ = value;
}
inline void RendererCommand_CharacterPosition::set_line_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line_height(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CharacterPosition.line_height)
}

// optional .mozc.commands.RendererCommand.Rectangle document_area = 4;
inline bool RendererCommand_CharacterPosition::_internal_has_document_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || document_area_ != nullptr);
  return value;
}
inline bool RendererCommand_CharacterPosition::has_document_area() const {
  return _internal_has_document_area();
}
inline void RendererCommand_CharacterPosition::clear_document_area() {
  if (document_area_ != nullptr) document_area_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CharacterPosition::_internal_document_area() const {
  const ::mozc::commands::RendererCommand_Rectangle* p = document_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Rectangle*>(
      &::mozc::commands::_RendererCommand_Rectangle_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CharacterPosition::document_area() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CharacterPosition.document_area)
  return _internal_document_area();
}
inline void RendererCommand_CharacterPosition::unsafe_arena_set_allocated_document_area(
    ::mozc::commands::RendererCommand_Rectangle* document_area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_area_);
  }
  document_area_ = document_area;
  if (document_area) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CharacterPosition.document_area)
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::release_document_area() {
  auto temp = unsafe_arena_release_document_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::unsafe_arena_release_document_area() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CharacterPosition.document_area)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::RendererCommand_Rectangle* temp = document_area_;
  document_area_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::_internal_mutable_document_area() {
  _has_bits_[0] |= 0x00000002u;
  if (document_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(GetArena());
    document_area_ = p;
  }
  return document_area_;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CharacterPosition::mutable_document_area() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CharacterPosition.document_area)
  return _internal_mutable_document_area();
}
inline void RendererCommand_CharacterPosition::set_allocated_document_area(::mozc::commands::RendererCommand_Rectangle* document_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete document_area_;
  }
  if (document_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(document_area);
    if (message_arena != submessage_arena) {
      document_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  document_area_ = document_area;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CharacterPosition.document_area)
}

// -------------------------------------------------------------------

// RendererCommand_CaretInfo

// optional bool blinking = 1 [default = false];
inline bool RendererCommand_CaretInfo::_internal_has_blinking() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RendererCommand_CaretInfo::has_blinking() const {
  return _internal_has_blinking();
}
inline void RendererCommand_CaretInfo::clear_blinking() {
  blinking_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RendererCommand_CaretInfo::_internal_blinking() const {
  return blinking_;
}
inline bool RendererCommand_CaretInfo::blinking() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.blinking)
  return _internal_blinking();
}
inline void RendererCommand_CaretInfo::_internal_set_blinking(bool value) {
  _has_bits_[0] |= 0x00000002u;
  blinking_ = value;
}
inline void RendererCommand_CaretInfo::set_blinking(bool value) {
  _internal_set_blinking(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CaretInfo.blinking)
}

// optional .mozc.commands.RendererCommand.Rectangle caret_rect = 2;
inline bool RendererCommand_CaretInfo::_internal_has_caret_rect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || caret_rect_ != nullptr);
  return value;
}
inline bool RendererCommand_CaretInfo::has_caret_rect() const {
  return _internal_has_caret_rect();
}
inline void RendererCommand_CaretInfo::clear_caret_rect() {
  if (caret_rect_ != nullptr) caret_rect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CaretInfo::_internal_caret_rect() const {
  const ::mozc::commands::RendererCommand_Rectangle* p = caret_rect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Rectangle*>(
      &::mozc::commands::_RendererCommand_Rectangle_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand_CaretInfo::caret_rect() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  return _internal_caret_rect();
}
inline void RendererCommand_CaretInfo::unsafe_arena_set_allocated_caret_rect(
    ::mozc::commands::RendererCommand_Rectangle* caret_rect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caret_rect_);
  }
  caret_rect_ = caret_rect;
  if (caret_rect) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.CaretInfo.caret_rect)
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::release_caret_rect() {
  auto temp = unsafe_arena_release_caret_rect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::unsafe_arena_release_caret_rect() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::RendererCommand_Rectangle* temp = caret_rect_;
  caret_rect_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::_internal_mutable_caret_rect() {
  _has_bits_[0] |= 0x00000001u;
  if (caret_rect_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(GetArena());
    caret_rect_ = p;
  }
  return caret_rect_;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand_CaretInfo::mutable_caret_rect() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.CaretInfo.caret_rect)
  return _internal_mutable_caret_rect();
}
inline void RendererCommand_CaretInfo::set_allocated_caret_rect(::mozc::commands::RendererCommand_Rectangle* caret_rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caret_rect_;
  }
  if (caret_rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caret_rect);
    if (message_arena != submessage_arena) {
      caret_rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caret_rect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caret_rect_ = caret_rect;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.CaretInfo.caret_rect)
}

// optional uint32 target_window_handle = 3;
inline bool RendererCommand_CaretInfo::_internal_has_target_window_handle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RendererCommand_CaretInfo::has_target_window_handle() const {
  return _internal_has_target_window_handle();
}
inline void RendererCommand_CaretInfo::clear_target_window_handle() {
  target_window_handle_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CaretInfo::_internal_target_window_handle() const {
  return target_window_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_CaretInfo::target_window_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.CaretInfo.target_window_handle)
  return _internal_target_window_handle();
}
inline void RendererCommand_CaretInfo::_internal_set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  target_window_handle_ = value;
}
inline void RendererCommand_CaretInfo::set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_window_handle(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.CaretInfo.target_window_handle)
}

// -------------------------------------------------------------------

// RendererCommand_IndicatorInfo

// optional .mozc.commands.Status status = 1;
inline bool RendererCommand_IndicatorInfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool RendererCommand_IndicatorInfo::has_status() const {
  return _internal_has_status();
}
inline const ::mozc::commands::Status& RendererCommand_IndicatorInfo::_internal_status() const {
  const ::mozc::commands::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Status*>(
      &::mozc::commands::_Status_default_instance_);
}
inline const ::mozc::commands::Status& RendererCommand_IndicatorInfo::status() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.IndicatorInfo.status)
  return _internal_status();
}
inline void RendererCommand_IndicatorInfo::unsafe_arena_set_allocated_status(
    ::mozc::commands::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.IndicatorInfo.status)
}
inline ::mozc::commands::Status* RendererCommand_IndicatorInfo::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Status* RendererCommand_IndicatorInfo::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.IndicatorInfo.status)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::mozc::commands::Status* RendererCommand_IndicatorInfo::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::mozc::commands::Status* RendererCommand_IndicatorInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.IndicatorInfo.status)
  return _internal_mutable_status();
}
inline void RendererCommand_IndicatorInfo::set_allocated_status(::mozc::commands::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.IndicatorInfo.status)
}

// -------------------------------------------------------------------

// RendererCommand_ApplicationInfo

// optional uint32 process_id = 1;
inline bool RendererCommand_ApplicationInfo::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_process_id() const {
  return _internal_has_process_id();
}
inline void RendererCommand_ApplicationInfo::clear_process_id() {
  process_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::_internal_process_id() const {
  return process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.process_id)
  return _internal_process_id();
}
inline void RendererCommand_ApplicationInfo::_internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  process_id_ = value;
}
inline void RendererCommand_ApplicationInfo::set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.process_id)
}

// optional uint32 thread_id = 2;
inline bool RendererCommand_ApplicationInfo::_internal_has_thread_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_thread_id() const {
  return _internal_has_thread_id();
}
inline void RendererCommand_ApplicationInfo::clear_thread_id() {
  thread_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.thread_id)
  return _internal_thread_id();
}
inline void RendererCommand_ApplicationInfo::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  thread_id_ = value;
}
inline void RendererCommand_ApplicationInfo::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.thread_id)
}

// optional uint32 receiver_handle = 3;
inline bool RendererCommand_ApplicationInfo::_internal_has_receiver_handle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_receiver_handle() const {
  return _internal_has_receiver_handle();
}
inline void RendererCommand_ApplicationInfo::clear_receiver_handle() {
  receiver_handle_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::_internal_receiver_handle() const {
  return receiver_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::receiver_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.receiver_handle)
  return _internal_receiver_handle();
}
inline void RendererCommand_ApplicationInfo::_internal_set_receiver_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  receiver_handle_ = value;
}
inline void RendererCommand_ApplicationInfo::set_receiver_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_receiver_handle(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.receiver_handle)
}

// optional uint32 target_window_handle = 4;
inline bool RendererCommand_ApplicationInfo::_internal_has_target_window_handle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_target_window_handle() const {
  return _internal_has_target_window_handle();
}
inline void RendererCommand_ApplicationInfo::clear_target_window_handle() {
  target_window_handle_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::_internal_target_window_handle() const {
  return target_window_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RendererCommand_ApplicationInfo::target_window_handle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.target_window_handle)
  return _internal_target_window_handle();
}
inline void RendererCommand_ApplicationInfo::_internal_set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  target_window_handle_ = value;
}
inline void RendererCommand_ApplicationInfo::set_target_window_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_window_handle(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.target_window_handle)
}

// optional .mozc.commands.RendererCommand.WinLogFont composition_font = 5;
inline bool RendererCommand_ApplicationInfo::_internal_has_composition_font() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || composition_font_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_composition_font() const {
  return _internal_has_composition_font();
}
inline void RendererCommand_ApplicationInfo::clear_composition_font() {
  if (composition_font_ != nullptr) composition_font_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::RendererCommand_WinLogFont& RendererCommand_ApplicationInfo::_internal_composition_font() const {
  const ::mozc::commands::RendererCommand_WinLogFont* p = composition_font_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_WinLogFont*>(
      &::mozc::commands::_RendererCommand_WinLogFont_default_instance_);
}
inline const ::mozc::commands::RendererCommand_WinLogFont& RendererCommand_ApplicationInfo::composition_font() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  return _internal_composition_font();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_composition_font(
    ::mozc::commands::RendererCommand_WinLogFont* composition_font) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(composition_font_);
  }
  composition_font_ = composition_font;
  if (composition_font) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
}
inline ::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::release_composition_font() {
  auto temp = unsafe_arena_release_composition_font();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::unsafe_arena_release_composition_font() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::RendererCommand_WinLogFont* temp = composition_font_;
  composition_font_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::_internal_mutable_composition_font() {
  _has_bits_[0] |= 0x00000002u;
  if (composition_font_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_WinLogFont>(GetArena());
    composition_font_ = p;
  }
  return composition_font_;
}
inline ::mozc::commands::RendererCommand_WinLogFont* RendererCommand_ApplicationInfo::mutable_composition_font() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
  return _internal_mutable_composition_font();
}
inline void RendererCommand_ApplicationInfo::set_allocated_composition_font(::mozc::commands::RendererCommand_WinLogFont* composition_font) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete composition_font_;
  }
  if (composition_font) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(composition_font);
    if (message_arena != submessage_arena) {
      composition_font = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composition_font, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  composition_font_ = composition_font;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_font)
}

// optional .mozc.commands.RendererCommand.ApplicationInfo.InputFrameworkType input_framework = 6 [default = UNKNOWN_FRAMEWORK];
inline bool RendererCommand_ApplicationInfo::_internal_has_input_framework() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_input_framework() const {
  return _internal_has_input_framework();
}
inline void RendererCommand_ApplicationInfo::clear_input_framework() {
  input_framework_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::_internal_input_framework() const {
  return static_cast< ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType >(input_framework_);
}
inline ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType RendererCommand_ApplicationInfo::input_framework() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.input_framework)
  return _internal_input_framework();
}
inline void RendererCommand_ApplicationInfo::_internal_set_input_framework(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType value) {
  assert(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  input_framework_ = value;
}
inline void RendererCommand_ApplicationInfo::set_input_framework(::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType value) {
  _internal_set_input_framework(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.input_framework)
}

// optional .mozc.commands.RendererCommand.CompositionForm composition_form = 7;
inline bool RendererCommand_ApplicationInfo::_internal_has_composition_form() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || composition_form_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_composition_form() const {
  return _internal_has_composition_form();
}
inline void RendererCommand_ApplicationInfo::clear_composition_form() {
  if (composition_form_ != nullptr) composition_form_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::commands::RendererCommand_CompositionForm& RendererCommand_ApplicationInfo::_internal_composition_form() const {
  const ::mozc::commands::RendererCommand_CompositionForm* p = composition_form_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_CompositionForm*>(
      &::mozc::commands::_RendererCommand_CompositionForm_default_instance_);
}
inline const ::mozc::commands::RendererCommand_CompositionForm& RendererCommand_ApplicationInfo::composition_form() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  return _internal_composition_form();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_composition_form(
    ::mozc::commands::RendererCommand_CompositionForm* composition_form) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(composition_form_);
  }
  composition_form_ = composition_form;
  if (composition_form) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
}
inline ::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::release_composition_form() {
  auto temp = unsafe_arena_release_composition_form();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::unsafe_arena_release_composition_form() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::commands::RendererCommand_CompositionForm* temp = composition_form_;
  composition_form_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::_internal_mutable_composition_form() {
  _has_bits_[0] |= 0x00000004u;
  if (composition_form_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_CompositionForm>(GetArena());
    composition_form_ = p;
  }
  return composition_form_;
}
inline ::mozc::commands::RendererCommand_CompositionForm* RendererCommand_ApplicationInfo::mutable_composition_form() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
  return _internal_mutable_composition_form();
}
inline void RendererCommand_ApplicationInfo::set_allocated_composition_form(::mozc::commands::RendererCommand_CompositionForm* composition_form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete composition_form_;
  }
  if (composition_form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(composition_form);
    if (message_arena != submessage_arena) {
      composition_form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composition_form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  composition_form_ = composition_form;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_form)
}

// optional .mozc.commands.RendererCommand.CandidateForm candidate_form = 8;
inline bool RendererCommand_ApplicationInfo::_internal_has_candidate_form() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || candidate_form_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_candidate_form() const {
  return _internal_has_candidate_form();
}
inline void RendererCommand_ApplicationInfo::clear_candidate_form() {
  if (candidate_form_ != nullptr) candidate_form_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mozc::commands::RendererCommand_CandidateForm& RendererCommand_ApplicationInfo::_internal_candidate_form() const {
  const ::mozc::commands::RendererCommand_CandidateForm* p = candidate_form_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_CandidateForm*>(
      &::mozc::commands::_RendererCommand_CandidateForm_default_instance_);
}
inline const ::mozc::commands::RendererCommand_CandidateForm& RendererCommand_ApplicationInfo::candidate_form() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  return _internal_candidate_form();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_candidate_form(
    ::mozc::commands::RendererCommand_CandidateForm* candidate_form) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_form_);
  }
  candidate_form_ = candidate_form;
  if (candidate_form) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
}
inline ::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::release_candidate_form() {
  auto temp = unsafe_arena_release_candidate_form();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::unsafe_arena_release_candidate_form() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  _has_bits_[0] &= ~0x00000008u;
  ::mozc::commands::RendererCommand_CandidateForm* temp = candidate_form_;
  candidate_form_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::_internal_mutable_candidate_form() {
  _has_bits_[0] |= 0x00000008u;
  if (candidate_form_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_CandidateForm>(GetArena());
    candidate_form_ = p;
  }
  return candidate_form_;
}
inline ::mozc::commands::RendererCommand_CandidateForm* RendererCommand_ApplicationInfo::mutable_candidate_form() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
  return _internal_mutable_candidate_form();
}
inline void RendererCommand_ApplicationInfo::set_allocated_candidate_form(::mozc::commands::RendererCommand_CandidateForm* candidate_form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete candidate_form_;
  }
  if (candidate_form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(candidate_form);
    if (message_arena != submessage_arena) {
      candidate_form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  candidate_form_ = candidate_form;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.candidate_form)
}

// optional int32 ui_visibilities = 9 [default = 0];
inline bool RendererCommand_ApplicationInfo::_internal_has_ui_visibilities() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_ui_visibilities() const {
  return _internal_has_ui_visibilities();
}
inline void RendererCommand_ApplicationInfo::clear_ui_visibilities() {
  ui_visibilities_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_ApplicationInfo::_internal_ui_visibilities() const {
  return ui_visibilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RendererCommand_ApplicationInfo::ui_visibilities() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.ui_visibilities)
  return _internal_ui_visibilities();
}
inline void RendererCommand_ApplicationInfo::_internal_set_ui_visibilities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  ui_visibilities_ = value;
}
inline void RendererCommand_ApplicationInfo::set_ui_visibilities(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ui_visibilities(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.ui_visibilities)
}

// optional .mozc.commands.RendererCommand.CharacterPosition composition_target = 10;
inline bool RendererCommand_ApplicationInfo::_internal_has_composition_target() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || composition_target_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_composition_target() const {
  return _internal_has_composition_target();
}
inline void RendererCommand_ApplicationInfo::clear_composition_target() {
  if (composition_target_ != nullptr) composition_target_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mozc::commands::RendererCommand_CharacterPosition& RendererCommand_ApplicationInfo::_internal_composition_target() const {
  const ::mozc::commands::RendererCommand_CharacterPosition* p = composition_target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_CharacterPosition*>(
      &::mozc::commands::_RendererCommand_CharacterPosition_default_instance_);
}
inline const ::mozc::commands::RendererCommand_CharacterPosition& RendererCommand_ApplicationInfo::composition_target() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  return _internal_composition_target();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_composition_target(
    ::mozc::commands::RendererCommand_CharacterPosition* composition_target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(composition_target_);
  }
  composition_target_ = composition_target;
  if (composition_target) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
}
inline ::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::release_composition_target() {
  auto temp = unsafe_arena_release_composition_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::unsafe_arena_release_composition_target() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  _has_bits_[0] &= ~0x00000010u;
  ::mozc::commands::RendererCommand_CharacterPosition* temp = composition_target_;
  composition_target_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::_internal_mutable_composition_target() {
  _has_bits_[0] |= 0x00000010u;
  if (composition_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_CharacterPosition>(GetArena());
    composition_target_ = p;
  }
  return composition_target_;
}
inline ::mozc::commands::RendererCommand_CharacterPosition* RendererCommand_ApplicationInfo::mutable_composition_target() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
  return _internal_mutable_composition_target();
}
inline void RendererCommand_ApplicationInfo::set_allocated_composition_target(::mozc::commands::RendererCommand_CharacterPosition* composition_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete composition_target_;
  }
  if (composition_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(composition_target);
    if (message_arena != submessage_arena) {
      composition_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composition_target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  composition_target_ = composition_target;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.composition_target)
}

// optional .mozc.commands.RendererCommand.CaretInfo caret_info = 11;
inline bool RendererCommand_ApplicationInfo::_internal_has_caret_info() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || caret_info_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_caret_info() const {
  return _internal_has_caret_info();
}
inline void RendererCommand_ApplicationInfo::clear_caret_info() {
  if (caret_info_ != nullptr) caret_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mozc::commands::RendererCommand_CaretInfo& RendererCommand_ApplicationInfo::_internal_caret_info() const {
  const ::mozc::commands::RendererCommand_CaretInfo* p = caret_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_CaretInfo*>(
      &::mozc::commands::_RendererCommand_CaretInfo_default_instance_);
}
inline const ::mozc::commands::RendererCommand_CaretInfo& RendererCommand_ApplicationInfo::caret_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  return _internal_caret_info();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_caret_info(
    ::mozc::commands::RendererCommand_CaretInfo* caret_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caret_info_);
  }
  caret_info_ = caret_info;
  if (caret_info) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
}
inline ::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::release_caret_info() {
  auto temp = unsafe_arena_release_caret_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::unsafe_arena_release_caret_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  _has_bits_[0] &= ~0x00000020u;
  ::mozc::commands::RendererCommand_CaretInfo* temp = caret_info_;
  caret_info_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::_internal_mutable_caret_info() {
  _has_bits_[0] |= 0x00000020u;
  if (caret_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_CaretInfo>(GetArena());
    caret_info_ = p;
  }
  return caret_info_;
}
inline ::mozc::commands::RendererCommand_CaretInfo* RendererCommand_ApplicationInfo::mutable_caret_info() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
  return _internal_mutable_caret_info();
}
inline void RendererCommand_ApplicationInfo::set_allocated_caret_info(::mozc::commands::RendererCommand_CaretInfo* caret_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete caret_info_;
  }
  if (caret_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(caret_info);
    if (message_arena != submessage_arena) {
      caret_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caret_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  caret_info_ = caret_info;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.caret_info)
}

// optional string pango_font_description = 13;
inline bool RendererCommand_ApplicationInfo::_internal_has_pango_font_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_pango_font_description() const {
  return _internal_has_pango_font_description();
}
inline void RendererCommand_ApplicationInfo::clear_pango_font_description() {
  pango_font_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RendererCommand_ApplicationInfo::pango_font_description() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  return _internal_pango_font_description();
}
inline void RendererCommand_ApplicationInfo::set_pango_font_description(const std::string& value) {
  _internal_set_pango_font_description(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
inline std::string* RendererCommand_ApplicationInfo::mutable_pango_font_description() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  return _internal_mutable_pango_font_description();
}
inline const std::string& RendererCommand_ApplicationInfo::_internal_pango_font_description() const {
  return pango_font_description_.Get();
}
inline void RendererCommand_ApplicationInfo::_internal_set_pango_font_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pango_font_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RendererCommand_ApplicationInfo::set_pango_font_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pango_font_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
inline void RendererCommand_ApplicationInfo::set_pango_font_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pango_font_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
inline void RendererCommand_ApplicationInfo::set_pango_font_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pango_font_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
inline std::string* RendererCommand_ApplicationInfo::_internal_mutable_pango_font_description() {
  _has_bits_[0] |= 0x00000001u;
  return pango_font_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RendererCommand_ApplicationInfo::release_pango_font_description() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  if (!_internal_has_pango_font_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pango_font_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RendererCommand_ApplicationInfo::set_allocated_pango_font_description(std::string* pango_font_description) {
  if (pango_font_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pango_font_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pango_font_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}
inline std::string* RendererCommand_ApplicationInfo::unsafe_arena_release_pango_font_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return pango_font_description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_pango_font_description(
    std::string* pango_font_description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pango_font_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pango_font_description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pango_font_description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.pango_font_description)
}

// optional .mozc.commands.RendererCommand.IndicatorInfo indicator_info = 14;
inline bool RendererCommand_ApplicationInfo::_internal_has_indicator_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || indicator_info_ != nullptr);
  return value;
}
inline bool RendererCommand_ApplicationInfo::has_indicator_info() const {
  return _internal_has_indicator_info();
}
inline void RendererCommand_ApplicationInfo::clear_indicator_info() {
  if (indicator_info_ != nullptr) indicator_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mozc::commands::RendererCommand_IndicatorInfo& RendererCommand_ApplicationInfo::_internal_indicator_info() const {
  const ::mozc::commands::RendererCommand_IndicatorInfo* p = indicator_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_IndicatorInfo*>(
      &::mozc::commands::_RendererCommand_IndicatorInfo_default_instance_);
}
inline const ::mozc::commands::RendererCommand_IndicatorInfo& RendererCommand_ApplicationInfo::indicator_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  return _internal_indicator_info();
}
inline void RendererCommand_ApplicationInfo::unsafe_arena_set_allocated_indicator_info(
    ::mozc::commands::RendererCommand_IndicatorInfo* indicator_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(indicator_info_);
  }
  indicator_info_ = indicator_info;
  if (indicator_info) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
}
inline ::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::release_indicator_info() {
  auto temp = unsafe_arena_release_indicator_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::unsafe_arena_release_indicator_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  _has_bits_[0] &= ~0x00000040u;
  ::mozc::commands::RendererCommand_IndicatorInfo* temp = indicator_info_;
  indicator_info_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::_internal_mutable_indicator_info() {
  _has_bits_[0] |= 0x00000040u;
  if (indicator_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_IndicatorInfo>(GetArena());
    indicator_info_ = p;
  }
  return indicator_info_;
}
inline ::mozc::commands::RendererCommand_IndicatorInfo* RendererCommand_ApplicationInfo::mutable_indicator_info() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
  return _internal_mutable_indicator_info();
}
inline void RendererCommand_ApplicationInfo::set_allocated_indicator_info(::mozc::commands::RendererCommand_IndicatorInfo* indicator_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete indicator_info_;
  }
  if (indicator_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(indicator_info);
    if (message_arena != submessage_arena) {
      indicator_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indicator_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  indicator_info_ = indicator_info;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.ApplicationInfo.indicator_info)
}

// -------------------------------------------------------------------

// RendererCommand

// optional .mozc.commands.RendererCommand.CommandType type = 1 [default = NOOP];
inline bool RendererCommand::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RendererCommand::has_type() const {
  return _internal_has_type();
}
inline void RendererCommand::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mozc::commands::RendererCommand_CommandType RendererCommand::_internal_type() const {
  return static_cast< ::mozc::commands::RendererCommand_CommandType >(type_);
}
inline ::mozc::commands::RendererCommand_CommandType RendererCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.type)
  return _internal_type();
}
inline void RendererCommand::_internal_set_type(::mozc::commands::RendererCommand_CommandType value) {
  assert(::mozc::commands::RendererCommand_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void RendererCommand::set_type(::mozc::commands::RendererCommand_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.type)
}

// optional bool visible = 2 [default = false];
inline bool RendererCommand::_internal_has_visible() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RendererCommand::has_visible() const {
  return _internal_has_visible();
}
inline void RendererCommand::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RendererCommand::_internal_visible() const {
  return visible_;
}
inline bool RendererCommand::visible() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.visible)
  return _internal_visible();
}
inline void RendererCommand::_internal_set_visible(bool value) {
  _has_bits_[0] |= 0x00000010u;
  visible_ = value;
}
inline void RendererCommand::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:mozc.commands.RendererCommand.visible)
}

// optional .mozc.commands.Output output = 3;
inline bool RendererCommand::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || output_ != nullptr);
  return value;
}
inline bool RendererCommand::has_output() const {
  return _internal_has_output();
}
inline const ::mozc::commands::Output& RendererCommand::_internal_output() const {
  const ::mozc::commands::Output* p = output_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::Output*>(
      &::mozc::commands::_Output_default_instance_);
}
inline const ::mozc::commands::Output& RendererCommand::output() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.output)
  return _internal_output();
}
inline void RendererCommand::unsafe_arena_set_allocated_output(
    ::mozc::commands::Output* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.output)
}
inline ::mozc::commands::Output* RendererCommand::release_output() {
  auto temp = unsafe_arena_release_output();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::Output* RendererCommand::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.output)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::commands::Output* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::mozc::commands::Output* RendererCommand::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000001u;
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::Output>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::mozc::commands::Output* RendererCommand::mutable_output() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.output)
  return _internal_mutable_output();
}
inline void RendererCommand::set_allocated_output(::mozc::commands::Output* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output)->GetArena();
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.output)
}

// optional .mozc.commands.RendererCommand.Rectangle preedit_rectangle = 4;
inline bool RendererCommand::_internal_has_preedit_rectangle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || preedit_rectangle_ != nullptr);
  return value;
}
inline bool RendererCommand::has_preedit_rectangle() const {
  return _internal_has_preedit_rectangle();
}
inline void RendererCommand::clear_preedit_rectangle() {
  if (preedit_rectangle_ != nullptr) preedit_rectangle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand::_internal_preedit_rectangle() const {
  const ::mozc::commands::RendererCommand_Rectangle* p = preedit_rectangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_Rectangle*>(
      &::mozc::commands::_RendererCommand_Rectangle_default_instance_);
}
inline const ::mozc::commands::RendererCommand_Rectangle& RendererCommand::preedit_rectangle() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.preedit_rectangle)
  return _internal_preedit_rectangle();
}
inline void RendererCommand::unsafe_arena_set_allocated_preedit_rectangle(
    ::mozc::commands::RendererCommand_Rectangle* preedit_rectangle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preedit_rectangle_);
  }
  preedit_rectangle_ = preedit_rectangle;
  if (preedit_rectangle) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.preedit_rectangle)
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand::release_preedit_rectangle() {
  auto temp = unsafe_arena_release_preedit_rectangle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand::unsafe_arena_release_preedit_rectangle() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.preedit_rectangle)
  _has_bits_[0] &= ~0x00000002u;
  ::mozc::commands::RendererCommand_Rectangle* temp = preedit_rectangle_;
  preedit_rectangle_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand::_internal_mutable_preedit_rectangle() {
  _has_bits_[0] |= 0x00000002u;
  if (preedit_rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_Rectangle>(GetArena());
    preedit_rectangle_ = p;
  }
  return preedit_rectangle_;
}
inline ::mozc::commands::RendererCommand_Rectangle* RendererCommand::mutable_preedit_rectangle() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.preedit_rectangle)
  return _internal_mutable_preedit_rectangle();
}
inline void RendererCommand::set_allocated_preedit_rectangle(::mozc::commands::RendererCommand_Rectangle* preedit_rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete preedit_rectangle_;
  }
  if (preedit_rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(preedit_rectangle);
    if (message_arena != submessage_arena) {
      preedit_rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preedit_rectangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preedit_rectangle_ = preedit_rectangle;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.preedit_rectangle)
}

// optional .mozc.commands.RendererCommand.ApplicationInfo application_info = 5;
inline bool RendererCommand::_internal_has_application_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || application_info_ != nullptr);
  return value;
}
inline bool RendererCommand::has_application_info() const {
  return _internal_has_application_info();
}
inline void RendererCommand::clear_application_info() {
  if (application_info_ != nullptr) application_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::commands::RendererCommand_ApplicationInfo& RendererCommand::_internal_application_info() const {
  const ::mozc::commands::RendererCommand_ApplicationInfo* p = application_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::commands::RendererCommand_ApplicationInfo*>(
      &::mozc::commands::_RendererCommand_ApplicationInfo_default_instance_);
}
inline const ::mozc::commands::RendererCommand_ApplicationInfo& RendererCommand::application_info() const {
  // @@protoc_insertion_point(field_get:mozc.commands.RendererCommand.application_info)
  return _internal_application_info();
}
inline void RendererCommand::unsafe_arena_set_allocated_application_info(
    ::mozc::commands::RendererCommand_ApplicationInfo* application_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(application_info_);
  }
  application_info_ = application_info;
  if (application_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.commands.RendererCommand.application_info)
}
inline ::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::release_application_info() {
  auto temp = unsafe_arena_release_application_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::unsafe_arena_release_application_info() {
  // @@protoc_insertion_point(field_release:mozc.commands.RendererCommand.application_info)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::commands::RendererCommand_ApplicationInfo* temp = application_info_;
  application_info_ = nullptr;
  return temp;
}
inline ::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::_internal_mutable_application_info() {
  _has_bits_[0] |= 0x00000004u;
  if (application_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::commands::RendererCommand_ApplicationInfo>(GetArena());
    application_info_ = p;
  }
  return application_info_;
}
inline ::mozc::commands::RendererCommand_ApplicationInfo* RendererCommand::mutable_application_info() {
  // @@protoc_insertion_point(field_mutable:mozc.commands.RendererCommand.application_info)
  return _internal_mutable_application_info();
}
inline void RendererCommand::set_allocated_application_info(::mozc::commands::RendererCommand_ApplicationInfo* application_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete application_info_;
  }
  if (application_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(application_info);
    if (message_arena != submessage_arena) {
      application_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  application_info_ = application_info;
  // @@protoc_insertion_point(field_set_allocated:mozc.commands.RendererCommand.application_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commands
}  // namespace mozc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozc::commands::RendererCommand_CompositionForm_Style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::RendererCommand_CompositionForm_Style>() {
  return ::mozc::commands::RendererCommand_CompositionForm_Style_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::RendererCommand_CandidateForm_Style> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::RendererCommand_CandidateForm_Style>() {
  return ::mozc::commands::RendererCommand_CandidateForm_Style_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType>() {
  return ::mozc::commands::RendererCommand_ApplicationInfo_InputFrameworkType_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::RendererCommand_ApplicationInfo_UIVisibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::RendererCommand_ApplicationInfo_UIVisibility>() {
  return ::mozc::commands::RendererCommand_ApplicationInfo_UIVisibility_descriptor();
}
template <> struct is_proto_enum< ::mozc::commands::RendererCommand_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::commands::RendererCommand_CommandType>() {
  return ::mozc::commands::RendererCommand_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2frenderer_5fcommand_2eproto
