// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/user_dictionary_storage.proto

#include "protocol/user_dictionary_storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto;
namespace mozc {
namespace user_dictionary {
class UserDictionary_EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDictionary_Entry> _instance;
} _UserDictionary_Entry_default_instance_;
class UserDictionaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDictionary> _instance;
} _UserDictionary_default_instance_;
class UserDictionaryStorageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDictionaryStorage> _instance;
} _UserDictionaryStorage_default_instance_;
class UserDictionaryCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDictionaryCommand> _instance;
} _UserDictionaryCommand_default_instance_;
class UserDictionaryCommandStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserDictionaryCommandStatus> _instance;
} _UserDictionaryCommandStatus_default_instance_;
}  // namespace user_dictionary
}  // namespace mozc
static void InitDefaultsscc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionary_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto}, {
      &scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,}};

static void InitDefaultsscc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionary_Entry_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionary_Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionary_Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto}, {}};

static void InitDefaultsscc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryCommand_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto}, {
      &scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,}};

static void InitDefaultsscc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryCommandStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryCommandStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto}, {
      &scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
      &scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,}};

static void InitDefaultsscc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::user_dictionary::_UserDictionaryStorage_default_instance_;
    new (ptr) ::mozc::user_dictionary::UserDictionaryStorage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::user_dictionary::UserDictionaryStorage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto}, {
      &scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fuser_5fdictionary_5fstorage_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, comment_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, pos_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, locale_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, removed_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary_Entry, auto_registered_),
  0,
  1,
  2,
  6,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, enabled_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, name_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, entries_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, removed_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionary, syncable_),
  1,
  4,
  0,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, version_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, dictionaries_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryStorage, storage_type_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, session_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, dictionary_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, dictionary_name_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, entry_index_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, entry_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, data_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, ensure_non_empty_storage_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommand, ignore_invalid_entries_),
  5,
  3,
  4,
  0,
  ~0u,
  2,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, status_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, session_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, storage_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, dictionary_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, entry_size_),
  PROTOBUF_FIELD_OFFSET(::mozc::user_dictionary::UserDictionaryCommandStatus, entries_),
  4,
  1,
  0,
  2,
  3,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::mozc::user_dictionary::UserDictionary_Entry)},
  { 19, 30, sizeof(::mozc::user_dictionary::UserDictionary)},
  { 36, 44, sizeof(::mozc::user_dictionary::UserDictionaryStorage)},
  { 47, 61, sizeof(::mozc::user_dictionary::UserDictionaryCommand)},
  { 70, 81, sizeof(::mozc::user_dictionary::UserDictionaryCommandStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_dictionary::_UserDictionary_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_dictionary::_UserDictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_dictionary::_UserDictionaryStorage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_dictionary::_UserDictionaryCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_),
};

const char descriptor_table_protodef_protocol_2fuser_5fdictionary_5fstorage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&protocol/user_dictionary_storage.proto"
  "\022\024mozc.user_dictionary\"\340\t\n\016UserDictionar"
  "y\022\021\n\002id\030\001 \001(\004:\0010B\0020\001\022\025\n\007enabled\030\002 \001(\010:\004t"
  "rue\022\016\n\004name\030\003 \001(\t:\000\022;\n\007entries\030\004 \003(\0132*.m"
  "ozc.user_dictionary.UserDictionary.Entry"
  "\022\026\n\007removed\030\005 \001(\010:\005false\022\027\n\010syncable\030\006 \001"
  "(\010:\005false\032\305\001\n\005Entry\022\r\n\003key\030\001 \001(\t:\000\022\017\n\005va"
  "lue\030\002 \001(\t:\000\022\021\n\007comment\030\004 \001(\t:\000\0229\n\003pos\030\005 "
  "\001(\0162,.mozc.user_dictionary.UserDictionar"
  "y.PosType\022\020\n\006locale\030\014 \001(\t:\000\022\026\n\007removed\030\n"
  " \001(\010:\005false\022\036\n\017auto_registered\030\013 \001(\010:\005fa"
  "lseJ\004\010\003\020\004\"\335\006\n\007PosType\022\010\n\004NOUN\020\001\022\020\n\014ABBRE"
  "VIATION\020\002\022\023\n\017SUGGESTION_ONLY\020\003\022\017\n\013PROPER"
  "_NOUN\020\004\022\021\n\rPERSONAL_NAME\020\005\022\017\n\013FAMILY_NAM"
  "E\020\006\022\016\n\nFIRST_NAME\020\007\022\025\n\021ORGANIZATION_NAME"
  "\020\010\022\016\n\nPLACE_NAME\020\t\022!\n\035SA_IRREGULAR_CONJU"
  "GATION_NOUN\020\n\022\031\n\025ADJECTIVE_VERBAL_NOUN\020\013"
  "\022\n\n\006NUMBER\020\014\022\014\n\010ALPHABET\020\r\022\n\n\006SYMBOL\020\016\022\014"
  "\n\010EMOTICON\020\017\022\n\n\006ADVERB\020\020\022\026\n\022PRENOUN_ADJE"
  "CTIVAL\020\021\022\017\n\013CONJUNCTION\020\022\022\020\n\014INTERJECTIO"
  "N\020\023\022\n\n\006PREFIX\020\024\022\022\n\016COUNTER_SUFFIX\020\025\022\022\n\016G"
  "ENERIC_SUFFIX\020\026\022\026\n\022PERSON_NAME_SUFFIX\020\027\022"
  "\025\n\021PLACE_NAME_SUFFIX\020\030\022\022\n\016WA_GROUP1_VERB"
  "\020\031\022\022\n\016KA_GROUP1_VERB\020\032\022\022\n\016SA_GROUP1_VERB"
  "\020\033\022\022\n\016TA_GROUP1_VERB\020\034\022\022\n\016NA_GROUP1_VERB"
  "\020\035\022\022\n\016MA_GROUP1_VERB\020\036\022\022\n\016RA_GROUP1_VERB"
  "\020\037\022\022\n\016GA_GROUP1_VERB\020 \022\022\n\016BA_GROUP1_VERB"
  "\020!\022\022\n\016HA_GROUP1_VERB\020\"\022\017\n\013GROUP2_VERB\020#\022"
  "\024\n\020KURU_GROUP3_VERB\020$\022\024\n\020SURU_GROUP3_VER"
  "B\020%\022\024\n\020ZURU_GROUP3_VERB\020&\022\022\n\016RU_GROUP3_V"
  "ERB\020\'\022\r\n\tADJECTIVE\020(\022\034\n\030SENTENCE_ENDING_"
  "PARTICLE\020)\022\017\n\013PUNCTUATION\020*\022\026\n\022FREE_STAN"
  "DING_WORD\020+\022\024\n\020SUPPRESSION_WORD\020,\"\351\001\n\025Us"
  "erDictionaryStorage\022\022\n\007version\030\001 \001(\005:\0010\022"
  ":\n\014dictionaries\030\002 \003(\0132$.mozc.user_dictio"
  "nary.UserDictionary\022W\n\014storage_type\030\n \001("
  "\01627.mozc.user_dictionary.UserDictionaryS"
  "torage.StorageType:\010SNAPSHOT\"\'\n\013StorageT"
  "ype\022\014\n\010SNAPSHOT\020\001\022\n\n\006UPDATE\020\002\"\300\006\n\025UserDi"
  "ctionaryCommand\022E\n\004type\030\001 \002(\01627.mozc.use"
  "r_dictionary.UserDictionaryCommand.Comma"
  "ndType\022\026\n\nsession_id\030\002 \001(\004B\0020\001\022\031\n\rdictio"
  "nary_id\030\003 \001(\004B\0020\001\022\027\n\017dictionary_name\030\004 \001"
  "(\t\022\023\n\013entry_index\030\005 \003(\005\0229\n\005entry\030\006 \001(\0132*"
  ".mozc.user_dictionary.UserDictionary.Ent"
  "ry\022\014\n\004data\030\007 \001(\t\022 \n\030ensure_non_empty_sto"
  "rage\030\010 \001(\010\022\036\n\026ignore_invalid_entries\030\t \001"
  "(\010\"\363\003\n\013CommandType\022\020\n\014NO_OPERATION\020\000\022\021\n\r"
  "CLEAR_STORAGE\020\001\022\022\n\016CREATE_SESSION\020\002\022\022\n\016D"
  "ELETE_SESSION\020\003\022\037\n\033SET_DEFAULT_DICTIONAR"
  "Y_NAME\020\004\022\025\n\021CHECK_UNDOABILITY\020\005\022\010\n\004UNDO\020"
  "\006\022\010\n\004LOAD\020\007\022\010\n\004SAVE\020\010\022!\n\035GET_USER_DICTIO"
  "NARY_NAME_LIST\020\t\022\022\n\016GET_ENTRY_SIZE\020\n\022%\n!"
  "CHECK_NEW_DICTIONARY_AVAILABILITY\020\014\022\025\n\021C"
  "REATE_DICTIONARY\020\r\022\025\n\021DELETE_DICTIONARY\020"
  "\016\022\025\n\021RENAME_DICTIONARY\020\017\022 \n\034CHECK_NEW_EN"
  "TRY_AVAILABILITY\020\020\022\r\n\tADD_ENTRY\020\021\022\016\n\nEDI"
  "T_ENTRY\020\022\022\020\n\014DELETE_ENTRY\020\023\022\017\n\013IMPORT_DA"
  "TA\020\024\022\017\n\013GET_STORAGE\020\025\022\017\n\013GET_ENTRIES\020\026\"\004"
  "\010\013\020\013*\022OBSOLETE_GET_ENTRY\"\276\010\n\033UserDiction"
  "aryCommandStatus\022H\n\006status\030\001 \002(\01628.mozc."
  "user_dictionary.UserDictionaryCommandSta"
  "tus.Status\022\026\n\nsession_id\030\002 \001(\004B\0020\001\022<\n\007st"
  "orage\030\003 \001(\0132+.mozc.user_dictionary.UserD"
  "ictionaryStorage\022\031\n\rdictionary_id\030\005 \001(\004B"
  "\0020\001\022\022\n\nentry_size\030\006 \001(\r\022;\n\007entries\030\007 \003(\013"
  "2*.mozc.user_dictionary.UserDictionary.E"
  "ntry\"\214\006\n\006Status\022#\n\037USER_DICTIONARY_COMMA"
  "ND_SUCCESS\020\001\022\021\n\rUNKNOWN_ERROR\020\002\022\023\n\017UNKNO"
  "WN_COMMAND\020\003\022\024\n\020INVALID_ARGUMENT\020\004\022\026\n\022UN"
  "KNOWN_SESSION_ID\020\005\022\022\n\016FILE_NOT_FOUND\020\006\022\027"
  "\n\023INVALID_FILE_FORMAT\020\007\022\034\n\030FILE_SIZE_LIM"
  "IT_EXCEEDED\020\010\022\"\n\036DICTIONARY_SIZE_LIMIT_E"
  "XCEEDED\020\t\022\035\n\031ENTRY_SIZE_LIMIT_EXCEEDED\020\n"
  "\022\031\n\025UNKNOWN_DICTIONARY_ID\020\013\022\034\n\030ENTRY_IND"
  "EX_OUT_OF_RANGE\020\014\022\031\n\025DICTIONARY_NAME_EMP"
  "TY\020\r\022\034\n\030DICTIONARY_NAME_TOO_LONG\020\016\022.\n*DI"
  "CTIONARY_NAME_CONTAINS_INVALID_CHARACTER"
  "\020\017\022\036\n\032DICTIONARY_NAME_DUPLICATED\020\020\022\021\n\rRE"
  "ADING_EMPTY\020\021\022\024\n\020READING_TOO_LONG\020\022\022&\n\"R"
  "EADING_CONTAINS_INVALID_CHARACTER\020\023\022\016\n\nW"
  "ORD_EMPTY\020\024\022\021\n\rWORD_TOO_LONG\020\025\022#\n\037WORD_C"
  "ONTAINS_INVALID_CHARACTER\020\026\022\024\n\020INVALID_P"
  "OS_TYPE\020\027\022\024\n\020COMMENT_TOO_LONG\020\030\022&\n\"COMME"
  "NT_CONTAINS_INVALID_CHARACTER\020\031\022\031\n\025IMPOR"
  "T_TOO_MANY_WORDS\020\032\022\032\n\026IMPORT_INVALID_ENT"
  "RIES\020\033\022\023\n\017NO_UNDO_HISTORY\020\034J\004\010\004\020\005BL\n.org"
  ".mozc.android.inputmethod.japanese.proto"
  "bufB\032ProtoUserDictionaryStorage"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_sccs[5] = {
  &scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
  &scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
  &scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
  &scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
  &scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto = {
  false, false, descriptor_table_protodef_protocol_2fuser_5fdictionary_5fstorage_2eproto, "protocol/user_dictionary_storage.proto", 3551,
  &descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_once, descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_sccs, descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto::offsets,
  file_level_metadata_protocol_2fuser_5fdictionary_5fstorage_2eproto, 5, file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto, file_level_service_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fuser_5fdictionary_5fstorage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto)), true);
namespace mozc {
namespace user_dictionary {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionary_PosType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
  return file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto[0];
}
bool UserDictionary_PosType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDictionary_PosType UserDictionary::NOUN;
constexpr UserDictionary_PosType UserDictionary::ABBREVIATION;
constexpr UserDictionary_PosType UserDictionary::SUGGESTION_ONLY;
constexpr UserDictionary_PosType UserDictionary::PROPER_NOUN;
constexpr UserDictionary_PosType UserDictionary::PERSONAL_NAME;
constexpr UserDictionary_PosType UserDictionary::FAMILY_NAME;
constexpr UserDictionary_PosType UserDictionary::FIRST_NAME;
constexpr UserDictionary_PosType UserDictionary::ORGANIZATION_NAME;
constexpr UserDictionary_PosType UserDictionary::PLACE_NAME;
constexpr UserDictionary_PosType UserDictionary::SA_IRREGULAR_CONJUGATION_NOUN;
constexpr UserDictionary_PosType UserDictionary::ADJECTIVE_VERBAL_NOUN;
constexpr UserDictionary_PosType UserDictionary::NUMBER;
constexpr UserDictionary_PosType UserDictionary::ALPHABET;
constexpr UserDictionary_PosType UserDictionary::SYMBOL;
constexpr UserDictionary_PosType UserDictionary::EMOTICON;
constexpr UserDictionary_PosType UserDictionary::ADVERB;
constexpr UserDictionary_PosType UserDictionary::PRENOUN_ADJECTIVAL;
constexpr UserDictionary_PosType UserDictionary::CONJUNCTION;
constexpr UserDictionary_PosType UserDictionary::INTERJECTION;
constexpr UserDictionary_PosType UserDictionary::PREFIX;
constexpr UserDictionary_PosType UserDictionary::COUNTER_SUFFIX;
constexpr UserDictionary_PosType UserDictionary::GENERIC_SUFFIX;
constexpr UserDictionary_PosType UserDictionary::PERSON_NAME_SUFFIX;
constexpr UserDictionary_PosType UserDictionary::PLACE_NAME_SUFFIX;
constexpr UserDictionary_PosType UserDictionary::WA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::KA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::SA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::TA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::NA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::MA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::RA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::GA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::BA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::HA_GROUP1_VERB;
constexpr UserDictionary_PosType UserDictionary::GROUP2_VERB;
constexpr UserDictionary_PosType UserDictionary::KURU_GROUP3_VERB;
constexpr UserDictionary_PosType UserDictionary::SURU_GROUP3_VERB;
constexpr UserDictionary_PosType UserDictionary::ZURU_GROUP3_VERB;
constexpr UserDictionary_PosType UserDictionary::RU_GROUP3_VERB;
constexpr UserDictionary_PosType UserDictionary::ADJECTIVE;
constexpr UserDictionary_PosType UserDictionary::SENTENCE_ENDING_PARTICLE;
constexpr UserDictionary_PosType UserDictionary::PUNCTUATION;
constexpr UserDictionary_PosType UserDictionary::FREE_STANDING_WORD;
constexpr UserDictionary_PosType UserDictionary::SUPPRESSION_WORD;
constexpr UserDictionary_PosType UserDictionary::PosType_MIN;
constexpr UserDictionary_PosType UserDictionary::PosType_MAX;
constexpr int UserDictionary::PosType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
  return file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto[1];
}
bool UserDictionaryStorage_StorageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage::SNAPSHOT;
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage::UPDATE;
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MIN;
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage::StorageType_MAX;
constexpr int UserDictionaryStorage::StorageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
  return file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto[2];
}
bool UserDictionaryCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::NO_OPERATION;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CLEAR_STORAGE;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_SESSION;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_SESSION;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::SET_DEFAULT_DICTIONARY_NAME;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_UNDOABILITY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::UNDO;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::LOAD;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::SAVE;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::GET_USER_DICTIONARY_NAME_LIST;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRY_SIZE;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_DICTIONARY_AVAILABILITY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CREATE_DICTIONARY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_DICTIONARY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::RENAME_DICTIONARY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CHECK_NEW_ENTRY_AVAILABILITY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::ADD_ENTRY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::EDIT_ENTRY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::DELETE_ENTRY;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::IMPORT_DATA;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::GET_STORAGE;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::GET_ENTRIES;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MIN;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand::CommandType_MAX;
constexpr int UserDictionaryCommand::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
  return file_level_enum_descriptors_protocol_2fuser_5fdictionary_5fstorage_2eproto[3];
}
bool UserDictionaryCommandStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::USER_DICTIONARY_COMMAND_SUCCESS;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_ERROR;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_COMMAND;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_ARGUMENT;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_SESSION_ID;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_NOT_FOUND;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_FILE_FORMAT;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::FILE_SIZE_LIMIT_EXCEEDED;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_SIZE_LIMIT_EXCEEDED;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_SIZE_LIMIT_EXCEEDED;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::UNKNOWN_DICTIONARY_ID;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::ENTRY_INDEX_OUT_OF_RANGE;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_EMPTY;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_TOO_LONG;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::DICTIONARY_NAME_DUPLICATED;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_EMPTY;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_TOO_LONG;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::READING_CONTAINS_INVALID_CHARACTER;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_EMPTY;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_TOO_LONG;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::WORD_CONTAINS_INVALID_CHARACTER;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::INVALID_POS_TYPE;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_TOO_LONG;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::COMMENT_CONTAINS_INVALID_CHARACTER;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_TOO_MANY_WORDS;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::IMPORT_INVALID_ENTRIES;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::NO_UNDO_HISTORY;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MIN;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::Status_MAX;
constexpr int UserDictionaryCommandStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void UserDictionary_Entry::InitAsDefaultInstance() {
}
class UserDictionary_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDictionary_Entry>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_auto_registered(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

UserDictionary_Entry::UserDictionary_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_dictionary.UserDictionary.Entry)
}
UserDictionary_Entry::UserDictionary_Entry(const UserDictionary_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comment(),
      GetArena());
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_locale()) {
    locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_locale(),
      GetArena());
  }
  ::memcpy(&removed_, &from.removed_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&removed_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary.Entry)
}

void UserDictionary_Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_registered_) -
      reinterpret_cast<char*>(&removed_)) + sizeof(auto_registered_));
  pos_ = 1;
}

UserDictionary_Entry::~UserDictionary_Entry() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary.Entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDictionary_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserDictionary_Entry::ArenaDtor(void* object) {
  UserDictionary_Entry* _this = reinterpret_cast< UserDictionary_Entry* >(object);
  (void)_this;
}
void UserDictionary_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDictionary_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDictionary_Entry& UserDictionary_Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDictionary_Entry_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  return *internal_default_instance();
}


void UserDictionary_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      locale_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&removed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_registered_) -
      reinterpret_cast<char*>(&removed_)) + sizeof(auto_registered_));
  pos_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDictionary_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionary.Entry.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2 [default = ""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionary.Entry.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionary.Entry.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::user_dictionary::UserDictionary_PosType_IsValid(val))) {
            _internal_set_pos(static_cast<::mozc::user_dictionary::UserDictionary_PosType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool removed = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_removed(&has_bits);
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_registered = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_auto_registered(&has_bits);
          auto_registered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale = 12 [default = ""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionary.Entry.locale");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDictionary_Entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string comment = 4 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.comment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comment(), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pos(), target);
  }

  // optional bool removed = 10 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_removed(), target);
  }

  // optional bool auto_registered = 11 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_auto_registered(), target);
  }

  // optional string locale = 12 [default = ""];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_locale().data(), static_cast<int>(this->_internal_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.Entry.locale");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary.Entry)
  return target;
}

size_t UserDictionary_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary.Entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string key = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional string comment = 4 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

    // optional string locale = 12 [default = ""];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_locale());
    }

    // optional bool removed = 10 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool auto_registered = 11 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionary_Entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionary_Entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDictionary_Entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary.Entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary.Entry)
    MergeFrom(*source);
  }
}

void UserDictionary_Entry::MergeFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_locale(from._internal_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000020u) {
      auto_registered_ = from.auto_registered_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_ = from.pos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionary_Entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary_Entry::CopyFrom(const UserDictionary_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary_Entry::IsInitialized() const {
  return true;
}

void UserDictionary_Entry::InternalSwap(UserDictionary_Entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDictionary_Entry, auto_registered_)
      + sizeof(UserDictionary_Entry::auto_registered_)
      - PROTOBUF_FIELD_OFFSET(UserDictionary_Entry, removed_)>(
          reinterpret_cast<char*>(&removed_),
          reinterpret_cast<char*>(&other->removed_));
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDictionary_Entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDictionary::InitAsDefaultInstance() {
}
class UserDictionary::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDictionary>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_removed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_syncable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UserDictionary::UserDictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_dictionary.UserDictionary)
}
UserDictionary::UserDictionary(const UserDictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&id_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionary)
}

void UserDictionary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&syncable_) -
      reinterpret_cast<char*>(&id_)) + sizeof(syncable_));
  enabled_ = true;
}

UserDictionary::~UserDictionary() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserDictionary::ArenaDtor(void* object) {
  UserDictionary* _this = reinterpret_cast< UserDictionary* >(object);
  (void)_this;
}
void UserDictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDictionary& UserDictionary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDictionary_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  return *internal_default_instance();
}


void UserDictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&syncable_) -
        reinterpret_cast<char*>(&id_)) + sizeof(syncable_));
    enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [default = 0, jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3 [default = ""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionary.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool removed = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_removed(&has_bits);
          removed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool syncable = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_syncable(&has_bits);
          syncable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [default = 0, jstype = JS_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional string name = 3 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionary.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_entries(i), target, stream);
  }

  // optional bool removed = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_removed(), target);
  }

  // optional bool syncable = 6 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_syncable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionary)
  return target;
}

size_t UserDictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 3 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 id = 1 [default = 0, jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional bool removed = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool syncable = 6 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool enabled = 2 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionary)
    MergeFrom(*source);
  }
}

void UserDictionary::MergeFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      removed_ = from.removed_;
    }
    if (cached_has_bits & 0x00000008u) {
      syncable_ = from.syncable_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionary::CopyFrom(const UserDictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionary::IsInitialized() const {
  return true;
}

void UserDictionary::InternalSwap(UserDictionary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDictionary, syncable_)
      + sizeof(UserDictionary::syncable_)
      - PROTOBUF_FIELD_OFFSET(UserDictionary, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDictionary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDictionaryStorage::InitAsDefaultInstance() {
}
class UserDictionaryStorage::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDictionaryStorage>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_storage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UserDictionaryStorage::UserDictionaryStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dictionaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_dictionary.UserDictionaryStorage)
}
UserDictionaryStorage::UserDictionaryStorage(const UserDictionaryStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dictionaries_(from.dictionaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(storage_type_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryStorage)
}

void UserDictionaryStorage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  version_ = 0;
  storage_type_ = 1;
}

UserDictionaryStorage::~UserDictionaryStorage() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryStorage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDictionaryStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UserDictionaryStorage::ArenaDtor(void* object) {
  UserDictionaryStorage* _this = reinterpret_cast< UserDictionaryStorage* >(object);
  (void)_this;
}
void UserDictionaryStorage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDictionaryStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDictionaryStorage& UserDictionaryStorage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDictionaryStorage_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  return *internal_default_instance();
}


void UserDictionaryStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dictionaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    version_ = 0;
    storage_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDictionaryStorage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 version = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dictionaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(val))) {
            _internal_set_storage_type(static_cast<::mozc::user_dictionary::UserDictionaryStorage_StorageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDictionaryStorage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryStorage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dictionaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dictionaries(i), target, stream);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_storage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryStorage)
  return target;
}

size_t UserDictionaryStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryStorage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  total_size += 1UL * this->_internal_dictionaries_size();
  for (const auto& msg : this->dictionaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 version = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_version());
    }

    // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_storage_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryStorage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryStorage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDictionaryStorage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryStorage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryStorage)
    MergeFrom(*source);
  }
}

void UserDictionaryStorage::MergeFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryStorage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dictionaries_.MergeFrom(from.dictionaries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      storage_type_ = from.storage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryStorage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryStorage::CopyFrom(const UserDictionaryStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryStorage::IsInitialized() const {
  return true;
}

void UserDictionaryStorage::InternalSwap(UserDictionaryStorage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dictionaries_.InternalSwap(&other->dictionaries_);
  swap(version_, other->version_);
  swap(storage_type_, other->storage_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDictionaryStorage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDictionaryCommand::InitAsDefaultInstance() {
  ::mozc::user_dictionary::_UserDictionaryCommand_default_instance_._instance.get_mutable()->entry_ = const_cast< ::mozc::user_dictionary::UserDictionary_Entry*>(
      ::mozc::user_dictionary::UserDictionary_Entry::internal_default_instance());
}
class UserDictionaryCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDictionaryCommand>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dictionary_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dictionary_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::user_dictionary::UserDictionary_Entry& entry(const UserDictionaryCommand* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ensure_non_empty_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ignore_invalid_entries(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::mozc::user_dictionary::UserDictionary_Entry&
UserDictionaryCommand::_Internal::entry(const UserDictionaryCommand* msg) {
  return *msg->entry_;
}
UserDictionaryCommand::UserDictionaryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entry_index_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_dictionary.UserDictionaryCommand)
}
UserDictionaryCommand::UserDictionaryCommand(const UserDictionaryCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entry_index_(from.entry_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dictionary_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dictionary_name()) {
    dictionary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dictionary_name(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_entry()) {
    entry_ = new ::mozc::user_dictionary::UserDictionary_Entry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_invalid_entries_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(ignore_invalid_entries_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommand)
}

void UserDictionaryCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  dictionary_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_invalid_entries_) -
      reinterpret_cast<char*>(&entry_)) + sizeof(ignore_invalid_entries_));
}

UserDictionaryCommand::~UserDictionaryCommand() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDictionaryCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dictionary_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entry_;
}

void UserDictionaryCommand::ArenaDtor(void* object) {
  UserDictionaryCommand* _this = reinterpret_cast< UserDictionaryCommand* >(object);
  (void)_this;
}
void UserDictionaryCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDictionaryCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDictionaryCommand& UserDictionaryCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  return *internal_default_instance();
}


void UserDictionaryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      dictionary_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(entry_ != nullptr);
      entry_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_invalid_entries_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(ignore_invalid_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDictionaryCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::user_dictionary::UserDictionaryCommand_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 session_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dictionary_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dictionary_id(&has_bits);
          dictionary_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dictionary_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dictionary_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 entry_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_entry_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_entry_index(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.user_dictionary.UserDictionaryCommand.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ensure_non_empty_storage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ensure_non_empty_storage(&has_bits);
          ensure_non_empty_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_invalid_entries = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ignore_invalid_entries(&has_bits);
          ignore_invalid_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDictionaryCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint64 session_id = 2 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session_id(), target);
  }

  // optional uint64 dictionary_id = 3 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dictionary_id(), target);
  }

  // optional string dictionary_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dictionary_name().data(), static_cast<int>(this->_internal_dictionary_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.dictionary_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dictionary_name(), target);
  }

  // repeated int32 entry_index = 5;
  for (int i = 0, n = this->_internal_entry_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_entry_index(i), target);
  }

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::entry(this), target, stream);
  }

  // optional string data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.user_dictionary.UserDictionaryCommand.data");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_data(), target);
  }

  // optional bool ensure_non_empty_storage = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_ensure_non_empty_storage(), target);
  }

  // optional bool ignore_invalid_entries = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ignore_invalid_entries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommand)
  return target;
}

size_t UserDictionaryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommand)
  size_t total_size = 0;

  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 entry_index = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->entry_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entry_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string dictionary_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dictionary_name());
    }

    // optional string data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data());
    }

    // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_);
    }

    // optional uint64 session_id = 2 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_session_id());
    }

    // optional uint64 dictionary_id = 3 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dictionary_id());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional bool ensure_non_empty_storage = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_invalid_entries = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDictionaryCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommand)
    MergeFrom(*source);
  }
}

void UserDictionaryCommand::MergeFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_index_.MergeFrom(from.entry_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dictionary_name(from._internal_dictionary_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_entry()->::mozc::user_dictionary::UserDictionary_Entry::MergeFrom(from._internal_entry());
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      dictionary_id_ = from.dictionary_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      ensure_non_empty_storage_ = from.ensure_non_empty_storage_;
    }
    if (cached_has_bits & 0x00000080u) {
      ignore_invalid_entries_ = from.ignore_invalid_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommand::CopyFrom(const UserDictionaryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserDictionaryCommand::InternalSwap(UserDictionaryCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_index_.InternalSwap(&other->entry_index_);
  dictionary_name_.Swap(&other->dictionary_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDictionaryCommand, ignore_invalid_entries_)
      + sizeof(UserDictionaryCommand::ignore_invalid_entries_)
      - PROTOBUF_FIELD_OFFSET(UserDictionaryCommand, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDictionaryCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserDictionaryCommandStatus::InitAsDefaultInstance() {
  ::mozc::user_dictionary::_UserDictionaryCommandStatus_default_instance_._instance.get_mutable()->storage_ = const_cast< ::mozc::user_dictionary::UserDictionaryStorage*>(
      ::mozc::user_dictionary::UserDictionaryStorage::internal_default_instance());
}
class UserDictionaryCommandStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<UserDictionaryCommandStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::user_dictionary::UserDictionaryStorage& storage(const UserDictionaryCommandStatus* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dictionary_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_entry_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::mozc::user_dictionary::UserDictionaryStorage&
UserDictionaryCommandStatus::_Internal::storage(const UserDictionaryCommandStatus* msg) {
  return *msg->storage_;
}
UserDictionaryCommandStatus::UserDictionaryCommandStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}
UserDictionaryCommandStatus::UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_storage()) {
    storage_ = new ::mozc::user_dictionary::UserDictionaryStorage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mozc.user_dictionary.UserDictionaryCommandStatus)
}

void UserDictionaryCommandStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  ::memset(&storage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_size_) -
      reinterpret_cast<char*>(&storage_)) + sizeof(entry_size_));
  status_ = 1;
}

UserDictionaryCommandStatus::~UserDictionaryCommandStatus() {
  // @@protoc_insertion_point(destructor:mozc.user_dictionary.UserDictionaryCommandStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserDictionaryCommandStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete storage_;
}

void UserDictionaryCommandStatus::ArenaDtor(void* object) {
  UserDictionaryCommandStatus* _this = reinterpret_cast< UserDictionaryCommandStatus* >(object);
  (void)_this;
}
void UserDictionaryCommandStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserDictionaryCommandStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserDictionaryCommandStatus& UserDictionaryCommandStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto.base);
  return *internal_default_instance();
}


void UserDictionaryCommandStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(storage_ != nullptr);
    storage_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_size_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(entry_size_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDictionaryCommandStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::mozc::user_dictionary::UserDictionaryCommandStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 session_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dictionary_id = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dictionary_id(&has_bits);
          dictionary_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entry_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_entry_size(&has_bits);
          entry_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserDictionaryCommandStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional uint64 session_id = 2 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_session_id(), target);
  }

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::storage(this), target, stream);
  }

  // optional uint64 dictionary_id = 5 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_dictionary_id(), target);
  }

  // optional uint32 entry_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_entry_size(), target);
  }

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.user_dictionary.UserDictionaryCommandStatus)
  return target;
}

size_t UserDictionaryCommandStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  size_t total_size = 0;

  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  if (_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional uint64 session_id = 2 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_session_id());
    }

    // optional uint64 dictionary_id = 5 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dictionary_id());
    }

    // optional uint32 entry_size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entry_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserDictionaryCommandStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDictionaryCommandStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserDictionaryCommandStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.user_dictionary.UserDictionaryCommandStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.user_dictionary.UserDictionaryCommandStatus)
    MergeFrom(*source);
  }
}

void UserDictionaryCommandStatus::MergeFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_storage()->::mozc::user_dictionary::UserDictionaryStorage::MergeFrom(from._internal_storage());
    }
    if (cached_has_bits & 0x00000002u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      dictionary_id_ = from.dictionary_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      entry_size_ = from.entry_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserDictionaryCommandStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDictionaryCommandStatus::CopyFrom(const UserDictionaryCommandStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.user_dictionary.UserDictionaryCommandStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDictionaryCommandStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UserDictionaryCommandStatus::InternalSwap(UserDictionaryCommandStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserDictionaryCommandStatus, entry_size_)
      + sizeof(UserDictionaryCommandStatus::entry_size_)
      - PROTOBUF_FIELD_OFFSET(UserDictionaryCommandStatus, storage_)>(
          reinterpret_cast<char*>(&storage_),
          reinterpret_cast<char*>(&other->storage_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDictionaryCommandStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace user_dictionary
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::user_dictionary::UserDictionary_Entry* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionary_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_dictionary::UserDictionary_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_dictionary::UserDictionary* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_dictionary::UserDictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_dictionary::UserDictionaryStorage* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_dictionary::UserDictionaryStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_dictionary::UserDictionaryCommand* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_dictionary::UserDictionaryCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::user_dictionary::UserDictionaryCommandStatus* Arena::CreateMaybeMessage< ::mozc::user_dictionary::UserDictionaryCommandStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::user_dictionary::UserDictionaryCommandStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
