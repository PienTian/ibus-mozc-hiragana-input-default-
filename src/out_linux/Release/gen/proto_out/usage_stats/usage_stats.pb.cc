// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usage_stats/usage_stats.proto

#include "usage_stats/usage_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_usage_5fstats_2fusage_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usage_5fstats_2fusage_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usage_5fstats_2fusage_5fstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto;
namespace mozc {
namespace usage_stats {
class Stats_DoubleValueStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats_DoubleValueStats> _instance;
} _Stats_DoubleValueStats_default_instance_;
class Stats_TouchEventStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats_TouchEventStats> _instance;
} _Stats_TouchEventStats_default_instance_;
class Stats_VirtualKeyboardStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats_VirtualKeyboardStats> _instance;
} _Stats_VirtualKeyboardStats_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats> _instance;
} _Stats_default_instance_;
}  // namespace usage_stats
}  // namespace mozc
static void InitDefaultsscc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto}, {
      &scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_DoubleValueStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_DoubleValueStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_DoubleValueStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto}, {}};

static void InitDefaultsscc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_TouchEventStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_TouchEventStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_TouchEventStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto}, {
      &scc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto.base,}};

static void InitDefaultsscc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::usage_stats::_Stats_VirtualKeyboardStats_default_instance_;
    new (ptr) ::mozc::usage_stats::Stats_VirtualKeyboardStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::usage_stats::Stats_VirtualKeyboardStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto}, {
      &scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_usage_5fstats_2fusage_5fstats_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_usage_5fstats_2fusage_5fstats_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_usage_5fstats_2fusage_5fstats_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_usage_5fstats_2fusage_5fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, num_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, total_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_DoubleValueStats, square_total_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, source_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, start_x_stats_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, start_y_stats_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, direction_x_stats_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, direction_y_stats_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_TouchEventStats, time_length_stats_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, keyboard_name_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats_VirtualKeyboardStats, touch_event_stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, name_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, count_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, total_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, num_timings_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, avg_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, min_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, max_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, int_value_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, boolean_value_),
  PROTOBUF_FIELD_OFFSET(::mozc::usage_stats::Stats, virtual_keyboard_stats_),
  0,
  1,
  2,
  9,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mozc::usage_stats::Stats_DoubleValueStats)},
  { 11, 22, sizeof(::mozc::usage_stats::Stats_TouchEventStats)},
  { 28, 35, sizeof(::mozc::usage_stats::Stats_VirtualKeyboardStats)},
  { 37, 53, sizeof(::mozc::usage_stats::Stats)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::usage_stats::_Stats_DoubleValueStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::usage_stats::_Stats_TouchEventStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::usage_stats::_Stats_VirtualKeyboardStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::usage_stats::_Stats_default_instance_),
};

const char descriptor_table_protodef_usage_5fstats_2fusage_5fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035usage_stats/usage_stats.proto\022\020mozc.us"
  "age_stats\"\247\007\n\005Stats\022\014\n\004name\030\001 \002(\t\022*\n\004typ"
  "e\030\002 \002(\0162\034.mozc.usage_stats.Stats.Type\022\r\n"
  "\005count\030\003 \001(\r\022\022\n\ntotal_time\030\n \001(\004\022\023\n\013num_"
  "timings\030\004 \001(\r\022\020\n\010avg_time\030\005 \001(\r\022\020\n\010min_t"
  "ime\030\006 \001(\r\022\020\n\010max_time\030\007 \001(\r\022\021\n\tint_value"
  "\030\010 \001(\005\022\025\n\rboolean_value\030\t \001(\010\022L\n\026virtual"
  "_keyboard_stats\030\013 \003(\0132,.mozc.usage_stats"
  ".Stats.VirtualKeyboardStats\032D\n\020DoubleVal"
  "ueStats\022\013\n\003num\030\001 \001(\r\022\r\n\005total\030\002 \001(\001\022\024\n\014s"
  "quare_total\030\003 \001(\001\032\365\002\n\017TouchEventStats\022\021\n"
  "\tsource_id\030\001 \001(\r\022\?\n\rstart_x_stats\030\002 \001(\0132"
  "(.mozc.usage_stats.Stats.DoubleValueStat"
  "s\022\?\n\rstart_y_stats\030\003 \001(\0132(.mozc.usage_st"
  "ats.Stats.DoubleValueStats\022C\n\021direction_"
  "x_stats\030\004 \001(\0132(.mozc.usage_stats.Stats.D"
  "oubleValueStats\022C\n\021direction_y_stats\030\005 \001"
  "(\0132(.mozc.usage_stats.Stats.DoubleValueS"
  "tats\022C\n\021time_length_stats\030\006 \001(\0132(.mozc.u"
  "sage_stats.Stats.DoubleValueStats\032q\n\024Vir"
  "tualKeyboardStats\022\025\n\rkeyboard_name\030\001 \001(\t"
  "\022B\n\021touch_event_stats\030\002 \003(\0132\'.mozc.usage"
  "_stats.Stats.TouchEventStats\"M\n\004Type\022\t\n\005"
  "COUNT\020\000\022\n\n\006TIMING\020\001\022\013\n\007INTEGER\020\002\022\013\n\007BOOL"
  "EAN\020\003\022\024\n\020VIRTUAL_KEYBOARD\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_sccs[4] = {
  &scc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto.base,
  &scc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto.base,
  &scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto.base,
  &scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_usage_5fstats_2fusage_5fstats_2eproto = {
  false, false, descriptor_table_protodef_usage_5fstats_2fusage_5fstats_2eproto, "usage_stats/usage_stats.proto", 987,
  &descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_once, descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_sccs, descriptor_table_usage_5fstats_2fusage_5fstats_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_usage_5fstats_2fusage_5fstats_2eproto::offsets,
  file_level_metadata_usage_5fstats_2fusage_5fstats_2eproto, 4, file_level_enum_descriptors_usage_5fstats_2fusage_5fstats_2eproto, file_level_service_descriptors_usage_5fstats_2fusage_5fstats_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_usage_5fstats_2fusage_5fstats_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_usage_5fstats_2fusage_5fstats_2eproto)), true);
namespace mozc {
namespace usage_stats {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Stats_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_usage_5fstats_2fusage_5fstats_2eproto);
  return file_level_enum_descriptors_usage_5fstats_2fusage_5fstats_2eproto[0];
}
bool Stats_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Stats_Type Stats::COUNT;
constexpr Stats_Type Stats::TIMING;
constexpr Stats_Type Stats::INTEGER;
constexpr Stats_Type Stats::BOOLEAN;
constexpr Stats_Type Stats::VIRTUAL_KEYBOARD;
constexpr Stats_Type Stats::Type_MIN;
constexpr Stats_Type Stats::Type_MAX;
constexpr int Stats::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Stats_DoubleValueStats::InitAsDefaultInstance() {
}
class Stats_DoubleValueStats::_Internal {
 public:
  using HasBits = decltype(std::declval<Stats_DoubleValueStats>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_square_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Stats_DoubleValueStats::Stats_DoubleValueStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.usage_stats.Stats.DoubleValueStats)
}
Stats_DoubleValueStats::Stats_DoubleValueStats(const Stats_DoubleValueStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&total_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.DoubleValueStats)
}

void Stats_DoubleValueStats::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&total_)) + sizeof(num_));
}

Stats_DoubleValueStats::~Stats_DoubleValueStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.DoubleValueStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats_DoubleValueStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stats_DoubleValueStats::ArenaDtor(void* object) {
  Stats_DoubleValueStats* _this = reinterpret_cast< Stats_DoubleValueStats* >(object);
  (void)_this;
}
void Stats_DoubleValueStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats_DoubleValueStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats_DoubleValueStats& Stats_DoubleValueStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_DoubleValueStats_usage_5fstats_2fusage_5fstats_2eproto.base);
  return *internal_default_instance();
}


void Stats_DoubleValueStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.DoubleValueStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&total_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats_DoubleValueStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double square_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_square_total(&has_bits);
          square_total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats_DoubleValueStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.DoubleValueStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // optional double total = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total(), target);
  }

  // optional double square_total = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_square_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.DoubleValueStats)
  return target;
}

size_t Stats_DoubleValueStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.DoubleValueStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double square_total = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_DoubleValueStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_DoubleValueStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats_DoubleValueStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.DoubleValueStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.DoubleValueStats)
    MergeFrom(*source);
  }
}

void Stats_DoubleValueStats::MergeFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      square_total_ = from.square_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats_DoubleValueStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_DoubleValueStats::CopyFrom(const Stats_DoubleValueStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.DoubleValueStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_DoubleValueStats::IsInitialized() const {
  return true;
}

void Stats_DoubleValueStats::InternalSwap(Stats_DoubleValueStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats_DoubleValueStats, num_)
      + sizeof(Stats_DoubleValueStats::num_)
      - PROTOBUF_FIELD_OFFSET(Stats_DoubleValueStats, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats_DoubleValueStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats_TouchEventStats::InitAsDefaultInstance() {
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->start_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->start_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->direction_x_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->direction_y_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
  ::mozc::usage_stats::_Stats_TouchEventStats_default_instance_._instance.get_mutable()->time_length_stats_ = const_cast< ::mozc::usage_stats::Stats_DoubleValueStats*>(
      ::mozc::usage_stats::Stats_DoubleValueStats::internal_default_instance());
}
class Stats_TouchEventStats::_Internal {
 public:
  using HasBits = decltype(std::declval<Stats_TouchEventStats>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozc::usage_stats::Stats_DoubleValueStats& start_x_stats(const Stats_TouchEventStats* msg);
  static void set_has_start_x_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::usage_stats::Stats_DoubleValueStats& start_y_stats(const Stats_TouchEventStats* msg);
  static void set_has_start_y_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::usage_stats::Stats_DoubleValueStats& direction_x_stats(const Stats_TouchEventStats* msg);
  static void set_has_direction_x_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozc::usage_stats::Stats_DoubleValueStats& direction_y_stats(const Stats_TouchEventStats* msg);
  static void set_has_direction_y_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::usage_stats::Stats_DoubleValueStats& time_length_stats(const Stats_TouchEventStats* msg);
  static void set_has_time_length_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::mozc::usage_stats::Stats_DoubleValueStats&
Stats_TouchEventStats::_Internal::start_x_stats(const Stats_TouchEventStats* msg) {
  return *msg->start_x_stats_;
}
const ::mozc::usage_stats::Stats_DoubleValueStats&
Stats_TouchEventStats::_Internal::start_y_stats(const Stats_TouchEventStats* msg) {
  return *msg->start_y_stats_;
}
const ::mozc::usage_stats::Stats_DoubleValueStats&
Stats_TouchEventStats::_Internal::direction_x_stats(const Stats_TouchEventStats* msg) {
  return *msg->direction_x_stats_;
}
const ::mozc::usage_stats::Stats_DoubleValueStats&
Stats_TouchEventStats::_Internal::direction_y_stats(const Stats_TouchEventStats* msg) {
  return *msg->direction_y_stats_;
}
const ::mozc::usage_stats::Stats_DoubleValueStats&
Stats_TouchEventStats::_Internal::time_length_stats(const Stats_TouchEventStats* msg) {
  return *msg->time_length_stats_;
}
Stats_TouchEventStats::Stats_TouchEventStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.usage_stats.Stats.TouchEventStats)
}
Stats_TouchEventStats::Stats_TouchEventStats(const Stats_TouchEventStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_x_stats()) {
    start_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.start_x_stats_);
  } else {
    start_x_stats_ = nullptr;
  }
  if (from._internal_has_start_y_stats()) {
    start_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.start_y_stats_);
  } else {
    start_y_stats_ = nullptr;
  }
  if (from._internal_has_direction_x_stats()) {
    direction_x_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.direction_x_stats_);
  } else {
    direction_x_stats_ = nullptr;
  }
  if (from._internal_has_direction_y_stats()) {
    direction_y_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.direction_y_stats_);
  } else {
    direction_y_stats_ = nullptr;
  }
  if (from._internal_has_time_length_stats()) {
    time_length_stats_ = new ::mozc::usage_stats::Stats_DoubleValueStats(*from.time_length_stats_);
  } else {
    time_length_stats_ = nullptr;
  }
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.TouchEventStats)
}

void Stats_TouchEventStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto.base);
  ::memset(&start_x_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_id_) -
      reinterpret_cast<char*>(&start_x_stats_)) + sizeof(source_id_));
}

Stats_TouchEventStats::~Stats_TouchEventStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.TouchEventStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats_TouchEventStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_x_stats_;
  if (this != internal_default_instance()) delete start_y_stats_;
  if (this != internal_default_instance()) delete direction_x_stats_;
  if (this != internal_default_instance()) delete direction_y_stats_;
  if (this != internal_default_instance()) delete time_length_stats_;
}

void Stats_TouchEventStats::ArenaDtor(void* object) {
  Stats_TouchEventStats* _this = reinterpret_cast< Stats_TouchEventStats* >(object);
  (void)_this;
}
void Stats_TouchEventStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats_TouchEventStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats_TouchEventStats& Stats_TouchEventStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_TouchEventStats_usage_5fstats_2fusage_5fstats_2eproto.base);
  return *internal_default_instance();
}


void Stats_TouchEventStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.TouchEventStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_x_stats_ != nullptr);
      start_x_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_y_stats_ != nullptr);
      start_y_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(direction_x_stats_ != nullptr);
      direction_x_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(direction_y_stats_ != nullptr);
      direction_y_stats_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(time_length_stats_ != nullptr);
      time_length_stats_->Clear();
    }
  }
  source_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats_TouchEventStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_x_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_y_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction_x_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction_y_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_length_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats_TouchEventStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.TouchEventStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_id(), target);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_x_stats(this), target, stream);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_y_stats(this), target, stream);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::direction_x_stats(this), target, stream);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::direction_y_stats(this), target, stream);
  }

  // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::time_length_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.TouchEventStats)
  return target;
}

size_t Stats_TouchEventStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.TouchEventStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mozc.usage_stats.Stats.DoubleValueStats start_x_stats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats start_y_stats = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_x_stats = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *direction_x_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats direction_y_stats = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *direction_y_stats_);
    }

    // optional .mozc.usage_stats.Stats.DoubleValueStats time_length_stats = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_length_stats_);
    }

    // optional uint32 source_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_TouchEventStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_TouchEventStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats_TouchEventStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.TouchEventStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.TouchEventStats)
    MergeFrom(*source);
  }
}

void Stats_TouchEventStats::MergeFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.TouchEventStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from._internal_start_x_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from._internal_start_y_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_direction_x_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from._internal_direction_x_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_direction_y_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from._internal_direction_y_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_time_length_stats()->::mozc::usage_stats::Stats_DoubleValueStats::MergeFrom(from._internal_time_length_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      source_id_ = from.source_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats_TouchEventStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_TouchEventStats::CopyFrom(const Stats_TouchEventStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.TouchEventStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_TouchEventStats::IsInitialized() const {
  return true;
}

void Stats_TouchEventStats::InternalSwap(Stats_TouchEventStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats_TouchEventStats, source_id_)
      + sizeof(Stats_TouchEventStats::source_id_)
      - PROTOBUF_FIELD_OFFSET(Stats_TouchEventStats, start_x_stats_)>(
          reinterpret_cast<char*>(&start_x_stats_),
          reinterpret_cast<char*>(&other->start_x_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats_TouchEventStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats_VirtualKeyboardStats::InitAsDefaultInstance() {
}
class Stats_VirtualKeyboardStats::_Internal {
 public:
  using HasBits = decltype(std::declval<Stats_VirtualKeyboardStats>()._has_bits_);
  static void set_has_keyboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  touch_event_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}
Stats_VirtualKeyboardStats::Stats_VirtualKeyboardStats(const Stats_VirtualKeyboardStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      touch_event_stats_(from.touch_event_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyboard_name()) {
    keyboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyboard_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
}

void Stats_VirtualKeyboardStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto.base);
  keyboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Stats_VirtualKeyboardStats::~Stats_VirtualKeyboardStats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats.VirtualKeyboardStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats_VirtualKeyboardStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  keyboard_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stats_VirtualKeyboardStats::ArenaDtor(void* object) {
  Stats_VirtualKeyboardStats* _this = reinterpret_cast< Stats_VirtualKeyboardStats* >(object);
  (void)_this;
}
void Stats_VirtualKeyboardStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats_VirtualKeyboardStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats_VirtualKeyboardStats& Stats_VirtualKeyboardStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_VirtualKeyboardStats_usage_5fstats_2fusage_5fstats_2eproto.base);
  return *internal_default_instance();
}


void Stats_VirtualKeyboardStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touch_event_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keyboard_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats_VirtualKeyboardStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string keyboard_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_keyboard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_touch_event_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats_VirtualKeyboardStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string keyboard_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyboard_name().data(), static_cast<int>(this->_internal_keyboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.VirtualKeyboardStats.keyboard_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_keyboard_name(), target);
  }

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_touch_event_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_touch_event_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats.VirtualKeyboardStats)
  return target;
}

size_t Stats_VirtualKeyboardStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.usage_stats.Stats.TouchEventStats touch_event_stats = 2;
  total_size += 1UL * this->_internal_touch_event_stats_size();
  for (const auto& msg : this->touch_event_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string keyboard_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keyboard_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats_VirtualKeyboardStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats_VirtualKeyboardStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats_VirtualKeyboardStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats.VirtualKeyboardStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats.VirtualKeyboardStats)
    MergeFrom(*source);
  }
}

void Stats_VirtualKeyboardStats::MergeFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touch_event_stats_.MergeFrom(from.touch_event_stats_);
  if (from._internal_has_keyboard_name()) {
    _internal_set_keyboard_name(from._internal_keyboard_name());
  }
}

void Stats_VirtualKeyboardStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats_VirtualKeyboardStats::CopyFrom(const Stats_VirtualKeyboardStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats.VirtualKeyboardStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats_VirtualKeyboardStats::IsInitialized() const {
  return true;
}

void Stats_VirtualKeyboardStats::InternalSwap(Stats_VirtualKeyboardStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  touch_event_stats_.InternalSwap(&other->touch_event_stats_);
  keyboard_name_.Swap(&other->keyboard_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats_VirtualKeyboardStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
}
class Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<Stats>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_timings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_min_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  virtual_keyboard_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.usage_stats.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      virtual_keyboard_stats_(from.virtual_keyboard_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&type_)) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:mozc.usage_stats.Stats)
}

void Stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_time_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:mozc.usage_stats.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats& Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_usage_5fstats_2fusage_5fstats_2eproto.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.usage_stats.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_keyboard_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(int_value_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&boolean_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_) -
        reinterpret_cast<char*>(&boolean_value_)) + sizeof(total_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.usage_stats.Stats.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mozc.usage_stats.Stats.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::usage_stats::Stats_Type_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::usage_stats::Stats_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_timings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_timings(&has_bits);
          num_timings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_avg_time(&has_bits);
          avg_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_min_time(&has_bits);
          min_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_max_time(&has_bits);
          max_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 int_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_int_value(&has_bits);
          int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool boolean_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_boolean_value(&has_bits);
          boolean_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_time(&has_bits);
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_keyboard_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.usage_stats.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.usage_stats.Stats.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .mozc.usage_stats.Stats.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional uint32 num_timings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_timings(), target);
  }

  // optional uint32 avg_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_time(), target);
  }

  // optional uint32 min_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_time(), target);
  }

  // optional uint32 max_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_time(), target);
  }

  // optional int32 int_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_int_value(), target);
  }

  // optional bool boolean_value = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_boolean_value(), target);
  }

  // optional uint64 total_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_total_time(), target);
  }

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_virtual_keyboard_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_virtual_keyboard_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.usage_stats.Stats)
  return target;
}

size_t Stats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.usage_stats.Stats)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.usage_stats.Stats)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .mozc.usage_stats.Stats.Type type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.usage_stats.Stats.VirtualKeyboardStats virtual_keyboard_stats = 11;
  total_size += 1UL * this->_internal_virtual_keyboard_stats_size();
  for (const auto& msg : this->virtual_keyboard_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 num_timings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_timings());
    }

    // optional uint32 avg_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_time());
    }

    // optional uint32 min_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_time());
    }

    // optional uint32 max_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_time());
    }

    // optional int32 int_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_value());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool boolean_value = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 total_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_total_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.usage_stats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.usage_stats.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.usage_stats.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.usage_stats.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_keyboard_stats_.MergeFrom(from.virtual_keyboard_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_timings_ = from.num_timings_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_time_ = from.avg_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      min_time_ = from.min_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_time_ = from.max_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      boolean_value_ = from.boolean_value_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_time_ = from.total_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.usage_stats.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtual_keyboard_stats_.InternalSwap(&other->virtual_keyboard_stats_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, total_time_)
      + sizeof(Stats::total_time_)
      - PROTOBUF_FIELD_OFFSET(Stats, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usage_stats
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::usage_stats::Stats_DoubleValueStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_DoubleValueStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::usage_stats::Stats_DoubleValueStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::usage_stats::Stats_TouchEventStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_TouchEventStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::usage_stats::Stats_TouchEventStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::usage_stats::Stats_VirtualKeyboardStats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats_VirtualKeyboardStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::usage_stats::Stats_VirtualKeyboardStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::usage_stats::Stats* Arena::CreateMaybeMessage< ::mozc::usage_stats::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::usage_stats::Stats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
