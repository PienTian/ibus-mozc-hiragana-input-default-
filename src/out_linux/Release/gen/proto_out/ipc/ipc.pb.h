// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ipc_2fipc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ipc_2fipc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ipc_2fipc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ipc_2fipc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ipc_2fipc_2eproto;
namespace mozc {
namespace ipc {
class IPCPathInfo;
class IPCPathInfoDefaultTypeInternal;
extern IPCPathInfoDefaultTypeInternal _IPCPathInfo_default_instance_;
}  // namespace ipc
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::ipc::IPCPathInfo* Arena::CreateMaybeMessage<::mozc::ipc::IPCPathInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace ipc {

// ===================================================================

class IPCPathInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.ipc.IPCPathInfo) */ {
 public:
  inline IPCPathInfo() : IPCPathInfo(nullptr) {};
  virtual ~IPCPathInfo();

  IPCPathInfo(const IPCPathInfo& from);
  IPCPathInfo(IPCPathInfo&& from) noexcept
    : IPCPathInfo() {
    *this = ::std::move(from);
  }

  inline IPCPathInfo& operator=(const IPCPathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPCPathInfo& operator=(IPCPathInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPCPathInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPCPathInfo* internal_default_instance() {
    return reinterpret_cast<const IPCPathInfo*>(
               &_IPCPathInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IPCPathInfo& a, IPCPathInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IPCPathInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPCPathInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPCPathInfo* New() const final {
    return CreateMaybeMessage<IPCPathInfo>(nullptr);
  }

  IPCPathInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPCPathInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPCPathInfo& from);
  void MergeFrom(const IPCPathInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPCPathInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.ipc.IPCPathInfo";
  }
  protected:
  explicit IPCPathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ipc_2fipc_2eproto);
    return ::descriptor_table_ipc_2fipc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kProductVersionFieldNumber = 5,
    kProcessIdFieldNumber = 2,
    kThreadIdFieldNumber = 3,
    kProtocolVersionFieldNumber = 4,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string product_version = 5 [default = "0.0.0.0"];
  bool has_product_version() const;
  private:
  bool _internal_has_product_version() const;
  public:
  void clear_product_version();
  const std::string& product_version() const;
  void set_product_version(const std::string& value);
  void set_product_version(std::string&& value);
  void set_product_version(const char* value);
  void set_product_version(const char* value, size_t size);
  std::string* mutable_product_version();
  std::string* release_product_version();
  void set_allocated_product_version(std::string* product_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_product_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_product_version(
      std::string* product_version);
  private:
  const std::string& _internal_product_version() const;
  void _internal_set_product_version(const std::string& value);
  std::string* _internal_mutable_product_version();
  public:

  // optional uint32 process_id = 2 [default = 0];
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_process_id() const;
  void _internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 thread_id = 3 [default = 0];
  bool has_thread_id() const;
  private:
  bool _internal_has_thread_id() const;
  public:
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 protocol_version = 4 [default = 0];
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.ipc.IPCPathInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_product_version_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  friend struct ::TableStruct_ipc_2fipc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IPCPathInfo

// optional uint32 protocol_version = 4 [default = 0];
inline bool IPCPathInfo::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool IPCPathInfo::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void IPCPathInfo::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.protocol_version)
  return _internal_protocol_version();
}
inline void IPCPathInfo::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  protocol_version_ = value;
}
inline void IPCPathInfo::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.protocol_version)
}

// optional string product_version = 5 [default = "0.0.0.0"];
inline bool IPCPathInfo::_internal_has_product_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IPCPathInfo::has_product_version() const {
  return _internal_has_product_version();
}
inline void IPCPathInfo::clear_product_version() {
  product_version_.ClearToDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IPCPathInfo::product_version() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.product_version)
  return _internal_product_version();
}
inline void IPCPathInfo::set_product_version(const std::string& value) {
  _internal_set_product_version(value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.product_version)
}
inline std::string* IPCPathInfo::mutable_product_version() {
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.product_version)
  return _internal_mutable_product_version();
}
inline const std::string& IPCPathInfo::_internal_product_version() const {
  return product_version_.Get();
}
inline void IPCPathInfo::_internal_set_product_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.Set(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), value, GetArena());
}
inline void IPCPathInfo::set_product_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.Set(
    &::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.ipc.IPCPathInfo.product_version)
}
inline void IPCPathInfo::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  product_version_.Set(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.product_version)
}
inline void IPCPathInfo::set_product_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.Set(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.product_version)
}
inline std::string* IPCPathInfo::_internal_mutable_product_version() {
  _has_bits_[0] |= 0x00000002u;
  return product_version_.Mutable(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), GetArena());
}
inline std::string* IPCPathInfo::release_product_version() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.product_version)
  if (!_internal_has_product_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return product_version_.ReleaseNonDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), GetArena());
}
inline void IPCPathInfo::set_allocated_product_version(std::string* product_version) {
  if (product_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_version_.SetAllocated(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), product_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.product_version)
}
inline std::string* IPCPathInfo::unsafe_arena_release_product_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.ipc.IPCPathInfo.product_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return product_version_.UnsafeArenaRelease(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(),
      GetArena());
}
inline void IPCPathInfo::unsafe_arena_set_allocated_product_version(
    std::string* product_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (product_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_version_.UnsafeArenaSetAllocated(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(),
      product_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.ipc.IPCPathInfo.product_version)
}

// optional string key = 1;
inline bool IPCPathInfo::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IPCPathInfo::has_key() const {
  return _internal_has_key();
}
inline void IPCPathInfo::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IPCPathInfo::key() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.key)
  return _internal_key();
}
inline void IPCPathInfo::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.key)
}
inline std::string* IPCPathInfo::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mozc.ipc.IPCPathInfo.key)
  return _internal_mutable_key();
}
inline const std::string& IPCPathInfo::_internal_key() const {
  return key_.Get();
}
inline void IPCPathInfo::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPCPathInfo::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.ipc.IPCPathInfo.key)
}
inline void IPCPathInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.ipc.IPCPathInfo.key)
}
inline void IPCPathInfo::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.ipc.IPCPathInfo.key)
}
inline std::string* IPCPathInfo::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPCPathInfo::release_key() {
  // @@protoc_insertion_point(field_release:mozc.ipc.IPCPathInfo.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPCPathInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.ipc.IPCPathInfo.key)
}
inline std::string* IPCPathInfo::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.ipc.IPCPathInfo.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPCPathInfo::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.ipc.IPCPathInfo.key)
}

// optional uint32 process_id = 2 [default = 0];
inline bool IPCPathInfo::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool IPCPathInfo::has_process_id() const {
  return _internal_has_process_id();
}
inline void IPCPathInfo::clear_process_id() {
  process_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::_internal_process_id() const {
  return process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::process_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.process_id)
  return _internal_process_id();
}
inline void IPCPathInfo::_internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  process_id_ = value;
}
inline void IPCPathInfo::set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.process_id)
}

// optional uint32 thread_id = 3 [default = 0];
inline bool IPCPathInfo::_internal_has_thread_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool IPCPathInfo::has_thread_id() const {
  return _internal_has_thread_id();
}
inline void IPCPathInfo::clear_thread_id() {
  thread_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IPCPathInfo::thread_id() const {
  // @@protoc_insertion_point(field_get:mozc.ipc.IPCPathInfo.thread_id)
  return _internal_thread_id();
}
inline void IPCPathInfo::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  thread_id_ = value;
}
inline void IPCPathInfo::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:mozc.ipc.IPCPathInfo.thread_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace mozc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ipc_2fipc_2eproto
