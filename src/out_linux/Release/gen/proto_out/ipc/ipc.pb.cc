// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ipc/ipc.proto

#include "ipc/ipc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mozc {
namespace ipc {
class IPCPathInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPCPathInfo> _instance;
} _IPCPathInfo_default_instance_;
}  // namespace ipc
}  // namespace mozc
static void InitDefaultsscc_info_IPCPathInfo_ipc_2fipc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.DefaultConstruct();
  *::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get_mutable() = std::string("0.0.0.0", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get_mutable());
  {
    void* ptr = &::mozc::ipc::_IPCPathInfo_default_instance_;
    new (ptr) ::mozc::ipc::IPCPathInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::ipc::IPCPathInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IPCPathInfo_ipc_2fipc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IPCPathInfo_ipc_2fipc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ipc_2fipc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ipc_2fipc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ipc_2fipc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ipc_2fipc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, product_version_),
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, process_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::ipc::IPCPathInfo, thread_id_),
  4,
  1,
  0,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::mozc::ipc::IPCPathInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::ipc::_IPCPathInfo_default_instance_),
};

const char descriptor_table_protodef_ipc_2fipc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ripc/ipc.proto\022\010mozc.ipc\"\206\001\n\013IPCPathInf"
  "o\022\033\n\020protocol_version\030\004 \001(\r:\0010\022 \n\017produc"
  "t_version\030\005 \001(\t:\0070.0.0.0\022\013\n\003key\030\001 \001(\t\022\025\n"
  "\nprocess_id\030\002 \001(\r:\0010\022\024\n\tthread_id\030\003 \001(\r:"
  "\0010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ipc_2fipc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ipc_2fipc_2eproto_sccs[1] = {
  &scc_info_IPCPathInfo_ipc_2fipc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ipc_2fipc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ipc_2fipc_2eproto = {
  false, false, descriptor_table_protodef_ipc_2fipc_2eproto, "ipc/ipc.proto", 162,
  &descriptor_table_ipc_2fipc_2eproto_once, descriptor_table_ipc_2fipc_2eproto_sccs, descriptor_table_ipc_2fipc_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ipc_2fipc_2eproto::offsets,
  file_level_metadata_ipc_2fipc_2eproto, 1, file_level_enum_descriptors_ipc_2fipc_2eproto, file_level_service_descriptors_ipc_2fipc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ipc_2fipc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ipc_2fipc_2eproto)), true);
namespace mozc {
namespace ipc {

// ===================================================================

void IPCPathInfo::InitAsDefaultInstance() {
}
class IPCPathInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<IPCPathInfo>()._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_product_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_;
IPCPathInfo::IPCPathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.ipc.IPCPathInfo)
}
IPCPathInfo::IPCPathInfo(const IPCPathInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  product_version_.UnsafeSetDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
  if (from._internal_has_product_version()) {
    product_version_.Set(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), from._internal_product_version(),
      GetArena());
  }
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
  // @@protoc_insertion_point(copy_constructor:mozc.ipc.IPCPathInfo)
}

void IPCPathInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPCPathInfo_ipc_2fipc_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
  ::memset(&process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_version_) -
      reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
}

IPCPathInfo::~IPCPathInfo() {
  // @@protoc_insertion_point(destructor:mozc.ipc.IPCPathInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPCPathInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get());
}

void IPCPathInfo::ArenaDtor(void* object) {
  IPCPathInfo* _this = reinterpret_cast< IPCPathInfo* >(object);
  (void)_this;
}
void IPCPathInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPCPathInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPCPathInfo& IPCPathInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPCPathInfo_ipc_2fipc_2eproto.base);
  return *internal_default_instance();
}


void IPCPathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.ipc.IPCPathInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      product_version_.ClearToDefault(&::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), GetArena());
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocol_version_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(protocol_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPCPathInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.ipc.IPCPathInfo.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 process_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thread_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_thread_id(&has_bits);
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 protocol_version = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_protocol_version(&has_bits);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string product_version = 5 [default = "0.0.0.0"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_product_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.ipc.IPCPathInfo.product_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPCPathInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.ipc.IPCPathInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 process_id = 2 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_process_id(), target);
  }

  // optional uint32 thread_id = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_thread_id(), target);
  }

  // optional uint32 protocol_version = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protocol_version(), target);
  }

  // optional string product_version = 5 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_product_version().data(), static_cast<int>(this->_internal_product_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.ipc.IPCPathInfo.product_version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_product_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.ipc.IPCPathInfo)
  return target;
}

size_t IPCPathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.ipc.IPCPathInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string product_version = 5 [default = "0.0.0.0"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_product_version());
    }

    // optional uint32 process_id = 2 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id());
    }

    // optional uint32 thread_id = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thread_id());
    }

    // optional uint32 protocol_version = 4 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPCPathInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.ipc.IPCPathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IPCPathInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPCPathInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.ipc.IPCPathInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.ipc.IPCPathInfo)
    MergeFrom(*source);
  }
}

void IPCPathInfo::MergeFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.ipc.IPCPathInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_product_version(from._internal_product_version());
    }
    if (cached_has_bits & 0x00000004u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      protocol_version_ = from.protocol_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IPCPathInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPCPathInfo::CopyFrom(const IPCPathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.ipc.IPCPathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPCPathInfo::IsInitialized() const {
  return true;
}

void IPCPathInfo::InternalSwap(IPCPathInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_version_.Swap(&other->product_version_, &::mozc::ipc::IPCPathInfo::_i_give_permission_to_break_this_code_default_product_version_.get(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPCPathInfo, protocol_version_)
      + sizeof(IPCPathInfo::protocol_version_)
      - PROTOBUF_FIELD_OFFSET(IPCPathInfo, process_id_)>(
          reinterpret_cast<char*>(&process_id_),
          reinterpret_cast<char*>(&other->process_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPCPathInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ipc
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::ipc::IPCPathInfo* Arena::CreateMaybeMessage< ::mozc::ipc::IPCPathInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::ipc::IPCPathInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
