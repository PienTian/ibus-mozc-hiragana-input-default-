// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/commands.proto

#include "protocol/commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fengine_5fbuilder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EngineReloadRequest_protocol_2fengine_5fbuilder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fengine_5fbuilder_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EngineReloadResponse_protocol_2fengine_5fbuilder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationInfo_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateList_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcandidates_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Candidates_protocol_2fcandidates_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capability_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Command_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Context_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecoderExperimentParams_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletionRange_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericStorageEntry_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Input_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_TouchEvent_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_TouchPosition_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyEvent_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Output_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Output_Callback_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Preedit_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Preedit_Segment_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Request_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Result_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionCommand_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_protocol_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_protocol_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto;
namespace mozc {
namespace commands {
class KeyEvent_ProbableKeyEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyEvent_ProbableKeyEvent> _instance;
} _KeyEvent_ProbableKeyEvent_default_instance_;
class KeyEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyEvent> _instance;
} _KeyEvent_default_instance_;
class GenericStorageEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericStorageEntry> _instance;
} _GenericStorageEntry_default_instance_;
class SessionCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionCommand> _instance;
} _SessionCommand_default_instance_;
class ContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Context> _instance;
} _Context_default_instance_;
class CapabilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Capability> _instance;
} _Capability_default_instance_;
class DecoderExperimentParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecoderExperimentParams> _instance;
} _DecoderExperimentParams_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class ApplicationInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationInfo> _instance;
} _ApplicationInfo_default_instance_;
class Input_TouchPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_TouchPosition> _instance;
} _Input_TouchPosition_default_instance_;
class Input_TouchEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_TouchEvent> _instance;
} _Input_TouchEvent_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
class Preedit_SegmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Preedit_Segment> _instance;
} _Preedit_Segment_default_instance_;
class PreeditDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Preedit> _instance;
} _Preedit_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class DeletionRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletionRange> _instance;
} _DeletionRange_default_instance_;
class Output_CallbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output_Callback> _instance;
} _Output_Callback_default_instance_;
class OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Output> _instance;
} _Output_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
} _Command_default_instance_;
class CommandListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandList> _instance;
} _CommandList_default_instance_;
}  // namespace commands
}  // namespace mozc
static void InitDefaultsscc_info_ApplicationInfo_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_ApplicationInfo_default_instance_;
    new (ptr) ::mozc::commands::ApplicationInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::ApplicationInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationInfo_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationInfo_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Capability_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Capability_default_instance_;
    new (ptr) ::mozc::commands::Capability();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Capability::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Capability_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Capability_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Command_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Command_default_instance_;
    new (ptr) ::mozc::commands::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Command_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Command_protocol_2fcommands_2eproto}, {
      &scc_info_Input_protocol_2fcommands_2eproto.base,
      &scc_info_Output_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_CommandList_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_CommandList_default_instance_;
    new (ptr) ::mozc::commands::CommandList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::CommandList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandList_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandList_protocol_2fcommands_2eproto}, {
      &scc_info_Command_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Context_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Context_default_instance_;
    new (ptr) ::mozc::commands::Context();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Context::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Context_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Context_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_DecoderExperimentParams_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_DecoderExperimentParams_default_instance_;
    new (ptr) ::mozc::commands::DecoderExperimentParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::DecoderExperimentParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecoderExperimentParams_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DecoderExperimentParams_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_DeletionRange_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_DeletionRange_default_instance_;
    new (ptr) ::mozc::commands::DeletionRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::DeletionRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletionRange_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletionRange_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GenericStorageEntry_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_GenericStorageEntry_default_instance_;
    new (ptr) ::mozc::commands::GenericStorageEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::GenericStorageEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericStorageEntry_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericStorageEntry_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Input_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_default_instance_;
    new (ptr) ::mozc::commands::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_Input_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_Input_protocol_2fcommands_2eproto}, {
      &scc_info_KeyEvent_protocol_2fcommands_2eproto.base,
      &scc_info_SessionCommand_protocol_2fcommands_2eproto.base,
      &scc_info_Config_protocol_2fconfig_2eproto.base,
      &scc_info_Context_protocol_2fcommands_2eproto.base,
      &scc_info_Capability_protocol_2fcommands_2eproto.base,
      &scc_info_ApplicationInfo_protocol_2fcommands_2eproto.base,
      &scc_info_Request_protocol_2fcommands_2eproto.base,
      &scc_info_GenericStorageEntry_protocol_2fcommands_2eproto.base,
      &scc_info_Input_TouchEvent_protocol_2fcommands_2eproto.base,
      &scc_info_UserDictionaryCommand_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
      &scc_info_EngineReloadRequest_protocol_2fengine_5fbuilder_2eproto.base,}};

static void InitDefaultsscc_info_Input_TouchEvent_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_TouchEvent_default_instance_;
    new (ptr) ::mozc::commands::Input_TouchEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input_TouchEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_TouchEvent_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Input_TouchEvent_protocol_2fcommands_2eproto}, {
      &scc_info_Input_TouchPosition_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Input_TouchPosition_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Input_TouchPosition_default_instance_;
    new (ptr) ::mozc::commands::Input_TouchPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Input_TouchPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_TouchPosition_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Input_TouchPosition_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_KeyEvent_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_KeyEvent_default_instance_;
    new (ptr) ::mozc::commands::KeyEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::KeyEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyEvent_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyEvent_protocol_2fcommands_2eproto}, {
      &scc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_KeyEvent_ProbableKeyEvent_default_instance_;
    new (ptr) ::mozc::commands::KeyEvent_ProbableKeyEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::KeyEvent_ProbableKeyEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Output_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Output_default_instance_;
    new (ptr) ::mozc::commands::Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_Output_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, 0, InitDefaultsscc_info_Output_protocol_2fcommands_2eproto}, {
      &scc_info_Result_protocol_2fcommands_2eproto.base,
      &scc_info_Preedit_protocol_2fcommands_2eproto.base,
      &scc_info_Candidates_protocol_2fcandidates_2eproto.base,
      &scc_info_KeyEvent_protocol_2fcommands_2eproto.base,
      &scc_info_Config_protocol_2fconfig_2eproto.base,
      &scc_info_Status_protocol_2fcommands_2eproto.base,
      &scc_info_CandidateList_protocol_2fcandidates_2eproto.base,
      &scc_info_DeletionRange_protocol_2fcommands_2eproto.base,
      &scc_info_Output_Callback_protocol_2fcommands_2eproto.base,
      &scc_info_GenericStorageEntry_protocol_2fcommands_2eproto.base,
      &scc_info_UserDictionaryCommandStatus_protocol_2fuser_5fdictionary_5fstorage_2eproto.base,
      &scc_info_EngineReloadResponse_protocol_2fengine_5fbuilder_2eproto.base,}};

static void InitDefaultsscc_info_Output_Callback_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Output_Callback_default_instance_;
    new (ptr) ::mozc::commands::Output_Callback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Output_Callback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Output_Callback_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Output_Callback_protocol_2fcommands_2eproto}, {
      &scc_info_SessionCommand_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Preedit_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Preedit_default_instance_;
    new (ptr) ::mozc::commands::Preedit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Preedit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Preedit_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Preedit_protocol_2fcommands_2eproto}, {
      &scc_info_Preedit_Segment_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Preedit_Segment_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Preedit_Segment_default_instance_;
    new (ptr) ::mozc::commands::Preedit_Segment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Preedit_Segment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Preedit_Segment_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Preedit_Segment_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Request_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Request_default_instance_;
    new (ptr) ::mozc::commands::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Request_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Request_protocol_2fcommands_2eproto}, {
      &scc_info_DecoderExperimentParams_protocol_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Result_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Result_default_instance_;
    new (ptr) ::mozc::commands::Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Result_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Result_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_SessionCommand_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_SessionCommand_default_instance_;
    new (ptr) ::mozc::commands::SessionCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::SessionCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionCommand_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionCommand_protocol_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_Status_protocol_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::commands::_Status_default_instance_;
    new (ptr) ::mozc::commands::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::commands::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_protocol_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_protocol_2fcommands_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fcommands_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2fcommands_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, key_code_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, special_key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, modifier_keys_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent_ProbableKeyEvent, probability_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, key_code_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, modifiers_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, special_key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, modifier_keys_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, key_string_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, input_style_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, probable_key_event_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::KeyEvent, activated_),
  1,
  2,
  3,
  ~0u,
  0,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::GenericStorageEntry, value_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, composition_mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, text_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, cursor_position_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, usage_stats_event_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::SessionCommand, usage_stats_event_int_value_),
  1,
  2,
  3,
  0,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, preceding_text_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, following_text_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, suppress_suggestion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, input_field_type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, revision_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Context, experimental_features_),
  0,
  1,
  2,
  4,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Capability, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Capability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Capability, text_deletion_),
  0,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DecoderExperimentParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DecoderExperimentParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DecoderExperimentParams, enable_simplified_ranking_),
  0,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, zero_query_suggestion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, mixed_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, special_romanji_table_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, space_on_alphanumeric_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, keyboard_name_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, update_input_mode_from_surrounding_text_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, kana_modifier_insensitive_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, auto_partial_suggestion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, available_emoji_carrier_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, emoji_rewriter_capability_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, crossing_edge_behavior_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, language_aware_input_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, candidate_page_size_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, candidates_size_limit_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Request, decoder_experiment_params_),
  3,
  4,
  2,
  7,
  0,
  11,
  5,
  6,
  12,
  13,
  8,
  9,
  14,
  10,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::ApplicationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::ApplicationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::ApplicationInfo, process_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::ApplicationInfo, thread_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::ApplicationInfo, timezone_offset_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, action_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, x_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, y_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchPosition, timestamp_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, source_id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input_TouchEvent, stroke_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, command_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, config_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, context_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, capability_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, application_info_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, request_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, storage_entry_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, touch_events_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, user_dictionary_command_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, request_suggestion_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Input, engine_reload_request_),
  11,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  12,
  9,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, type_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Result, cursor_offset_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, annotation_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, value_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, value_length_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit_Segment, key_),
  2,
  0,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, cursor_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, segment_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, highlighted_position_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Preedit, is_toggleable_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Status, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Status, activated_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Status, mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Status, comeback_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DeletionRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DeletionRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DeletionRange, offset_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::DeletionRange, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output_Callback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output_Callback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output_Callback, session_command_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output_Callback, delay_millisec_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, id_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, consumed_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, result_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, preedit_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, candidates_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, key_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, url_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, config_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, preedit_method_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, error_code_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, status_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, all_candidate_words_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, deletion_range_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, launch_tool_mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, callback_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, storage_entry_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, user_dictionary_command_status_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Output, engine_reload_response_),
  13,
  14,
  15,
  1,
  2,
  3,
  4,
  0,
  5,
  16,
  17,
  6,
  7,
  8,
  18,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Command, input_),
  PROTOBUF_FIELD_OFFSET(::mozc::commands::Command, output_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::commands::CommandList, commands_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::mozc::commands::KeyEvent_ProbableKeyEvent)},
  { 13, 27, sizeof(::mozc::commands::KeyEvent)},
  { 36, 44, sizeof(::mozc::commands::GenericStorageEntry)},
  { 47, 59, sizeof(::mozc::commands::SessionCommand)},
  { 66, 77, sizeof(::mozc::commands::Context)},
  { 83, 89, sizeof(::mozc::commands::Capability)},
  { 90, 96, sizeof(::mozc::commands::DecoderExperimentParams)},
  { 97, 117, sizeof(::mozc::commands::Request)},
  { 132, 140, sizeof(::mozc::commands::ApplicationInfo)},
  { 143, 152, sizeof(::mozc::commands::Input_TouchPosition)},
  { 156, 163, sizeof(::mozc::commands::Input_TouchEvent)},
  { 165, 184, sizeof(::mozc::commands::Input)},
  { 198, 207, sizeof(::mozc::commands::Result)},
  { 211, 220, sizeof(::mozc::commands::Preedit_Segment)},
  { 224, 233, sizeof(::mozc::commands::Preedit)},
  { 237, 245, sizeof(::mozc::commands::Status)},
  { 248, 255, sizeof(::mozc::commands::DeletionRange)},
  { 257, 264, sizeof(::mozc::commands::Output_Callback)},
  { 266, 290, sizeof(::mozc::commands::Output)},
  { 309, 316, sizeof(::mozc::commands::Command)},
  { 318, -1, sizeof(::mozc::commands::CommandList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_KeyEvent_ProbableKeyEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_KeyEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_GenericStorageEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_SessionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Context_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Capability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_DecoderExperimentParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_ApplicationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Input_TouchPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Input_TouchEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Input_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Preedit_Segment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Preedit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_DeletionRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Output_Callback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::commands::_CommandList_default_instance_),
};

const char descriptor_table_protodef_protocol_2fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027protocol/commands.proto\022\rmozc.commands"
  "\032\031protocol/candidates.proto\032\025protocol/co"
  "nfig.proto\032\035protocol/engine_builder.prot"
  "o\032&protocol/user_dictionary_storage.prot"
  "o\"\276\r\n\010KeyEvent\022\020\n\010key_code\030\001 \001(\r\022\021\n\tmodi"
  "fiers\030\002 \001(\r\0227\n\013special_key\030\003 \001(\0162\".mozc."
  "commands.KeyEvent.SpecialKey\022:\n\rmodifier"
  "_keys\030\004 \003(\0162#.mozc.commands.KeyEvent.Mod"
  "ifierKey\022\022\n\nkey_string\030\005 \001(\t\022D\n\013input_st"
  "yle\030\006 \001(\0162\".mozc.commands.KeyEvent.Input"
  "Style:\013FOLLOW_MODE\022,\n\004mode\030\007 \001(\0162\036.mozc."
  "commands.CompositionMode\022D\n\022probable_key"
  "_event\030\010 \003(\0132(.mozc.commands.KeyEvent.Pr"
  "obableKeyEvent\022\021\n\tactivated\030\t \001(\010\032\256\001\n\020Pr"
  "obableKeyEvent\022\020\n\010key_code\030\001 \001(\r\0227\n\013spec"
  "ial_key\030\003 \001(\0162\".mozc.commands.KeyEvent.S"
  "pecialKey\022:\n\rmodifier_keys\030\004 \003(\0162#.mozc."
  "commands.KeyEvent.ModifierKey\022\023\n\013probabi"
  "lity\030\n \001(\001\"\225\007\n\nSpecialKey\022\021\n\rNO_SPECIALK"
  "EY\020\000\022\t\n\005DIGIT\020\001\022\006\n\002ON\020\002\022\007\n\003OFF\020\003\022\t\n\005SPAC"
  "E\020\004\022\t\n\005ENTER\020\005\022\010\n\004LEFT\020\006\022\t\n\005RIGHT\020\007\022\006\n\002U"
  "P\020\010\022\010\n\004DOWN\020\t\022\n\n\006ESCAPE\020\n\022\007\n\003DEL\020\013\022\r\n\tBA"
  "CKSPACE\020\014\022\n\n\006HENKAN\020\r\022\014\n\010MUHENKAN\020\016\022\010\n\004K"
  "ANA\020\017\022\010\n\004HOME\020\020\022\007\n\003END\020\021\022\007\n\003TAB\020\022\022\006\n\002F1\020"
  "\023\022\006\n\002F2\020\024\022\006\n\002F3\020\025\022\006\n\002F4\020\026\022\006\n\002F5\020\027\022\006\n\002F6\020"
  "\030\022\006\n\002F7\020\031\022\006\n\002F8\020\032\022\006\n\002F9\020\033\022\007\n\003F10\020\034\022\007\n\003F1"
  "1\020\035\022\007\n\003F12\020\036\022\013\n\007PAGE_UP\020\037\022\r\n\tPAGE_DOWN\020 "
  "\022\n\n\006INSERT\020!\022\007\n\003F13\020\"\022\007\n\003F14\020#\022\007\n\003F15\020$\022"
  "\007\n\003F16\020%\022\007\n\003F17\020&\022\007\n\003F18\020\'\022\007\n\003F19\020(\022\007\n\003F"
  "20\020)\022\007\n\003F21\020*\022\007\n\003F22\020+\022\007\n\003F23\020,\022\007\n\003F24\020-"
  "\022\010\n\004EISU\020.\022\013\n\007NUMPAD0\020/\022\013\n\007NUMPAD1\0200\022\013\n\007"
  "NUMPAD2\0201\022\013\n\007NUMPAD3\0202\022\013\n\007NUMPAD4\0203\022\013\n\007N"
  "UMPAD5\0204\022\013\n\007NUMPAD6\0205\022\013\n\007NUMPAD7\0206\022\013\n\007NU"
  "MPAD8\0207\022\013\n\007NUMPAD9\0208\022\014\n\010MULTIPLY\0209\022\007\n\003AD"
  "D\020:\022\r\n\tSEPARATOR\020;\022\014\n\010SUBTRACT\020<\022\013\n\007DECI"
  "MAL\020=\022\n\n\006DIVIDE\020>\022\n\n\006EQUALS\020\?\022\016\n\nTEXT_IN"
  "PUT\020@\022\013\n\007HANKAKU\020A\022\t\n\005KANJI\020B\022\014\n\010KATAKAN"
  "A\020C\022\r\n\tCAPS_LOCK\020D\022\021\n\rUNDEFINED_KEY\020E\022\t\n"
  "\005COMMA\020F\022\t\n\005CLEAR\020G\022\020\n\014VIRTUAL_LEFT\020H\022\021\n"
  "\rVIRTUAL_RIGHT\020I\022\021\n\rVIRTUAL_ENTER\020J\022\016\n\nV"
  "IRTUAL_UP\020K\022\020\n\014VIRTUAL_DOWN\020L\022\023\n\017NUM_SPE"
  "CIALKEYS\020M\"\261\001\n\013ModifierKey\022\010\n\004CTRL\020\001\022\007\n\003"
  "ALT\020\002\022\t\n\005SHIFT\020\004\022\014\n\010KEY_DOWN\020\010\022\n\n\006KEY_UP"
  "\020\020\022\r\n\tLEFT_CTRL\020 \022\014\n\010LEFT_ALT\020@\022\017\n\nLEFT_"
  "SHIFT\020\200\001\022\017\n\nRIGHT_CTRL\020\200\002\022\016\n\tRIGHT_ALT\020\200"
  "\004\022\020\n\013RIGHT_SHIFT\020\200\010\022\t\n\004CAPS\020\200\020\":\n\nInputS"
  "tyle\022\017\n\013FOLLOW_MODE\020\000\022\t\n\005AS_IS\020\001\022\020\n\014DIRE"
  "CT_INPUT\020\002\"\273\001\n\023GenericStorageEntry\022<\n\004ty"
  "pe\030\001 \001(\0162..mozc.commands.GenericStorageE"
  "ntry.StorageType\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003"
  " \003(\014\"J\n\013StorageType\022\022\n\016SYMBOL_HISTORY\020\000\022"
  "\024\n\020EMOTICON_HISTORY\020\001\022\021\n\rEMOJI_HISTORY\020\002"
  "\"\230\016\n\016SessionCommand\0227\n\004type\030\001 \002(\0162).mozc"
  ".commands.SessionCommand.CommandType\022\n\n\002"
  "id\030\002 \001(\005\0228\n\020composition_mode\030\003 \001(\0162\036.moz"
  "c.commands.CompositionMode\022\014\n\004text\030\004 \001(\t"
  "\022\027\n\017cursor_position\030\005 \001(\r\022H\n\021usage_stats"
  "_event\030\007 \001(\0162-.mozc.commands.SessionComm"
  "and.UsageStatsEvent\022#\n\033usage_stats_event"
  "_int_value\030\t \001(\005\"\261\004\n\013CommandType\022\010\n\004NONE"
  "\020\000\022\n\n\006REVERT\020\001\022\n\n\006SUBMIT\020\002\022\024\n\020SELECT_CAN"
  "DIDATE\020\003\022\027\n\023HIGHLIGHT_CANDIDATE\020\004\022\025\n\021SWI"
  "TCH_INPUT_MODE\020\005\022\016\n\nGET_STATUS\020\006\022\024\n\020SUBM"
  "IT_CANDIDATE\020\007\022\023\n\017CONVERT_REVERSE\020\010\022\010\n\004U"
  "NDO\020\t\022\021\n\rRESET_CONTEXT\020\n\022\017\n\013MOVE_CURSOR\020"
  "\013\022\033\n\027SWITCH_INPUT_FIELD_TYPE\020\014\022\025\n\021USAGE_"
  "STATS_EVENT\020\r\022\022\n\016UNDO_OR_REWIND\020\016\022\025\n\021EXP"
  "AND_SUGGESTION\020\017\022\023\n\017COMMIT_RAW_TEXT\020\023\022\025\n"
  "\021CONVERT_PREV_PAGE\020\024\022\025\n\021CONVERT_NEXT_PAG"
  "E\020\025\022\017\n\013TURN_ON_IME\020\026\022\020\n\014TURN_OFF_IME\020\027\022!"
  "\n\035DELETE_CANDIDATE_FROM_HISTORY\020\030\022\025\n\021STO"
  "P_KEY_TOGGLING\020\031\"\004\010\020\020\020\"\004\010\021\020\021\"\004\010\022\020\022*\023SEND"
  "_CARET_LOCATION*\031SEND_LANGUAGE_BAR_COMMA"
  "ND*\020GET_ASYNC_RESULT\"\252\007\n\017UsageStatsEvent"
  "\022\030\n\024INFOLIST_WINDOW_SHOW\020\001\022\030\n\024INFOLIST_W"
  "INDOW_HIDE\020\002\022\032\n\026HANDWRITING_OPEN_EVENT\020\003"
  "\022\034\n\030HANDWRITING_COMMIT_EVENT\020\004\022 \n\034CHARAC"
  "TER_PALETTE_OPEN_EVENT\020\005\022\"\n\036CHARACTER_PA"
  "LETTE_COMMIT_EVENT\020\006\022&\n\"SOFTWARE_KEYBOAR"
  "D_LAYOUT_LANDSCAPE\020\007\022%\n!SOFTWARE_KEYBOAR"
  "D_LAYOUT_PORTRAIT\020\010\022\035\n\031SUBMITTED_CANDIDA"
  "TE_ROW_0\020\t\022\035\n\031SUBMITTED_CANDIDATE_ROW_1\020"
  "\n\022\035\n\031SUBMITTED_CANDIDATE_ROW_2\020\013\022\035\n\031SUBM"
  "ITTED_CANDIDATE_ROW_3\020\014\022\035\n\031SUBMITTED_CAN"
  "DIDATE_ROW_4\020\r\022\035\n\031SUBMITTED_CANDIDATE_RO"
  "W_5\020\016\022\035\n\031SUBMITTED_CANDIDATE_ROW_6\020\017\022\035\n\031"
  "SUBMITTED_CANDIDATE_ROW_7\020\020\022\035\n\031SUBMITTED"
  "_CANDIDATE_ROW_8\020\021\022\035\n\031SUBMITTED_CANDIDAT"
  "E_ROW_9\020\022\022 \n\034SUBMITTED_CANDIDATE_ROW_GE1"
  "0\020\023\022\027\n\023KEYBOARD_FOLD_EVENT\020\024\022\031\n\025KEYBOARD"
  "_EXPAND_EVENT\020\025\022(\n$MUSHROOM_SELECTION_DI"
  "ALOG_OPEN_EVENT\020\026\0229\n5SOFTWARE_KEYBOARD_L"
  "AYOUT_ADJUSTMENT_ENABLED_LANDSCAPE\020\031\0228\n4"
  "SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENAB"
  "LED_PORTRAIT\020\032\022.\n*SOFTWARE_KEYBOARD_LAYO"
  "UT_ENGLISH_LANDSCAPE\020\033\022-\n)SOFTWARE_KEYBO"
  "ARD_LAYOUT_ENGLISH_PORTRAIT\020\034\"\004\010\027\020\027\"\004\010\030\020"
  "\030J\004\010\006\020\007J\004\010\010\020\tJ\004\010\n\020\013\"\223\002\n\007Context\022\026\n\016prece"
  "ding_text\030\001 \001(\t\022\026\n\016following_text\030\002 \001(\t\022"
  "\"\n\023suppress_suggestion\030\003 \001(\010:\005false\022\?\n\020i"
  "nput_field_type\030\004 \001(\0162%.mozc.commands.Co"
  "ntext.InputFieldType\022\023\n\010revision\030\005 \001(\005:\001"
  "0\022\035\n\025experimental_features\030d \003(\t\"\?\n\016Inpu"
  "tFieldType\022\n\n\006NORMAL\020\001\022\014\n\010PASSWORD\020\002\022\007\n\003"
  "TEL\020\003\022\n\n\006NUMBER\020\004\"\320\001\n\nCapability\022h\n\rtext"
  "_deletion\030\001 \001(\01624.mozc.commands.Capabili"
  "ty.TextDeletionCapabilityType:\033NO_TEXT_D"
  "ELETION_CAPABILITY\"X\n\032TextDeletionCapabi"
  "lityType\022\037\n\033NO_TEXT_DELETION_CAPABILITY\020"
  "\000\022\031\n\025DELETE_PRECEDING_TEXT\020\001\"<\n\027DecoderE"
  "xperimentParams\022!\n\031enable_simplified_ran"
  "king\030\001 \001(\010\"\316\020\n\007Request\022$\n\025zero_query_sug"
  "gestion\030\001 \001(\010:\005false\022\037\n\020mixed_conversion"
  "\030\002 \001(\010:\005false\022X\n\025special_romanji_table\030\004"
  " \001(\0162*.mozc.commands.Request.SpecialRoma"
  "njiTable:\rDEFAULT_TABLE\022o\n\025space_on_alph"
  "anumeric\030\006 \001(\0162*.mozc.commands.Request.S"
  "paceOnAlphanumeric:$SPACE_OR_CONVERT_KEE"
  "PING_COMPOSITION\022\025\n\rkeyboard_name\030\007 \001(\t\022"
  "5\n\'update_input_mode_from_surrounding_te"
  "xt\030\010 \001(\010:\004true\0223\n$kana_modifier_insensit"
  "ive_conversion\030\t \001(\010:\005false\022&\n\027auto_part"
  "ial_suggestion\030\n \001(\010:\005false\022\"\n\027available"
  "_emoji_carrier\030\013 \001(\005:\0011\022$\n\031emoji_rewrite"
  "r_capability\030\014 \001(\005:\0011\022W\n\026crossing_edge_b"
  "ehavior\030\r \001(\0162+.mozc.commands.Request.Cr"
  "ossingEdgeBehavior:\nDO_NOTHING\022p\n\024langua"
  "ge_aware_input\030\016 \001(\01621.mozc.commands.Req"
  "uest.LanguageAwareInputBehavior:\037DEFAULT"
  "_LANGUAGE_AWARE_BEHAVIOR\022\036\n\023candidate_pa"
  "ge_size\030\017 \001(\005:\0019\022\035\n\025candidates_size_limi"
  "t\030\020 \001(\005\022I\n\031decoder_experiment_params\030\021 \001"
  "(\0132&.mozc.commands.DecoderExperimentPara"
  "ms\"\343\005\n\023SpecialRomanjiTable\022\021\n\rDEFAULT_TA"
  "BLE\020\000\022\033\n\027TWELVE_KEYS_TO_HIRAGANA\020\n\022&\n!TW"
  "ELVE_KEYS_TO_HIRAGANA_INTUITIVE\020\220N\022!\n\035TW"
  "ELVE_KEYS_TO_HALFWIDTHASCII\020\013\022\025\n\021FLICK_T"
  "O_HIRAGANA\020\r\022 \n\033FLICK_TO_HIRAGANA_INTUIT"
  "IVE\020\222N\022\033\n\027FLICK_TO_HALFWIDTHASCII\020\016\022\037\n\033F"
  "LICK_TO_HALFWIDTHASCII_IOS\020,\022\023\n\017FLICK_TO"
  "_NUMBER\020+\022\034\n\030TOGGLE_FLICK_TO_HIRAGANA\020\020\022"
  "\'\n\"TOGGLE_FLICK_TO_HIRAGANA_INTUITIVE\020\221N"
  "\022\032\n\026TOGGLE_FLICK_TO_NUMBER\020*\022&\n\"TOGGLE_F"
  "LICK_TO_HALFWIDTHASCII_IOS\020-\022\"\n\036TOGGLE_F"
  "LICK_TO_HALFWIDTHASCII\020\021\022\035\n\031QWERTY_MOBIL"
  "E_TO_HIRAGANA\020\024\022#\n\037QWERTY_MOBILE_TO_HALF"
  "WIDTHASCII\020\026\022\025\n\021GODAN_TO_HIRAGANA\020\036\022\033\n\027G"
  "ODAN_TO_HALFWIDTHASCII\020\037\022\027\n\023NOTOUCH_TO_H"
  "IRAGANA\020(\022\035\n\031NOTOUCH_TO_HALFWIDTHASCII\020)"
  "\"\004\010\014\020\014\"\004\010\017\020\017\"\004\010 \020 \"\004\010\025\020\025\"\004\010\022\020\022*\025TWELVE_K"
  "EYS_TO_NUMBER*\017GODAN_TO_NUMBER* QWERTY_M"
  "OBILE_TO_HIRAGANA_NUMBER\"w\n\023SpaceOnAlpha"
  "numeric\022(\n$SPACE_OR_CONVERT_KEEPING_COMP"
  "OSITION\020\000\022*\n&SPACE_OR_CONVERT_COMMITING_"
  "COMPOSITION\020\001\022\n\n\006COMMIT\020\002\"[\n\020EmojiCarrie"
  "rType\022\021\n\rUNICODE_EMOJI\020\001\022\020\n\014DOCOMO_EMOJI"
  "\020\002\022\022\n\016SOFTBANK_EMOJI\020\004\022\016\n\nKDDI_EMOJI\020\010\"`"
  "\n\022RewriterCapability\022\021\n\rNOT_AVAILABLE\020\000\022"
  "\016\n\nCONVERSION\020\001\022\016\n\nPREDICTION\020\002\022\016\n\nSUGGE"
  "STION\020\004\022\007\n\003ALL\020\007\"D\n\024CrossingEdgeBehavior"
  "\022\016\n\nDO_NOTHING\020\000\022\034\n\030COMMIT_WITHOUT_CONSU"
  "MING\020\001\"}\n\032LanguageAwareInputBehavior\022#\n\037"
  "DEFAULT_LANGUAGE_AWARE_BEHAVIOR\020\000\022\033\n\027NO_"
  "LANGUAGE_AWARE_INPUT\020\001\022\035\n\031LANGUAGE_AWARE"
  "_SUGGESTION\020\002J\004\010\003\020\004\"Q\n\017ApplicationInfo\022\022"
  "\n\nprocess_id\030\001 \001(\r\022\021\n\tthread_id\030\002 \001(\r\022\027\n"
  "\017timezone_offset\030\003 \001(\005\"\344\013\n\005Input\022.\n\004type"
  "\030\001 \002(\0162 .mozc.commands.Input.CommandType"
  "\022\016\n\002id\030\002 \001(\004B\0020\001\022$\n\003key\030\003 \001(\0132\027.mozc.com"
  "mands.KeyEvent\022.\n\007command\030\004 \001(\0132\035.mozc.c"
  "ommands.SessionCommand\022#\n\006config\030\005 \001(\0132\023"
  ".mozc.config.Config\022\'\n\007context\030\006 \001(\0132\026.m"
  "ozc.commands.Context\022-\n\ncapability\030\007 \001(\013"
  "2\031.mozc.commands.Capability\0228\n\020applicati"
  "on_info\030\010 \001(\0132\036.mozc.commands.Applicatio"
  "nInfo\022\'\n\007request\030\t \001(\0132\026.mozc.commands.R"
  "equest\0229\n\rstorage_entry\030\n \001(\0132\".mozc.com"
  "mands.GenericStorageEntry\0225\n\014touch_event"
  "s\030\014 \003(\0132\037.mozc.commands.Input.TouchEvent"
  "\022L\n\027user_dictionary_command\030\r \001(\0132+.mozc"
  ".user_dictionary.UserDictionaryCommand\022 "
  "\n\022request_suggestion\030\016 \001(\010:\004true\0228\n\025engi"
  "ne_reload_request\030\017 \001(\0132\031.mozc.EngineRel"
  "oadRequest\032j\n\rTouchPosition\0220\n\006action\030\001 "
  "\001(\0162 .mozc.commands.Input.TouchAction\022\t\n"
  "\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\021\n\ttimestamp\030\004 \001(\003\032S"
  "\n\nTouchEvent\022\021\n\tsource_id\030\001 \001(\r\0222\n\006strok"
  "e\030\002 \003(\0132\".mozc.commands.Input.TouchPosit"
  "ion\"\304\004\n\013CommandType\022\010\n\004NONE\020\000\022\022\n\016CREATE_"
  "SESSION\020\001\022\022\n\016DELETE_SESSION\020\002\022\014\n\010SEND_KE"
  "Y\020\003\022\021\n\rTEST_SEND_KEY\020\004\022\020\n\014SEND_COMMAND\020\005"
  "\022\016\n\nGET_CONFIG\020\006\022\016\n\nSET_CONFIG\020\007\022\026\n\022SET_"
  "IMPOSED_CONFIG\020\026\022\017\n\013SET_REQUEST\020\021\022\r\n\tSYN"
  "C_DATA\020\010\022\014\n\010SHUTDOWN\020\t\022\n\n\006RELOAD\020\n\022\026\n\022CL"
  "EAR_USER_HISTORY\020\013\022\031\n\025CLEAR_USER_PREDICT"
  "ION\020\014\022 \n\034CLEAR_UNUSED_USER_PREDICTION\020\020\022"
  "\013\n\007CLEANUP\020\r\022\020\n\014NO_OPERATION\020\016\022 \n\034SEND_U"
  "SER_DICTIONARY_COMMAND\020\032\022\036\n\032SEND_ENGINE_"
  "RELOAD_REQUEST\020\033\022\023\n\017NUM_OF_COMMANDS\020\034\"\004\010"
  "\022\020\022\"\004\010\027\020\027\"\004\010\030\020\030\"\004\010\024\020\024\"\004\010\025\020\025\"\004\010\031\020\031*\020START"
  "_CLOUD_SYNC*\025GET_CLOUD_SYNC_STATUS*\rADD_"
  "AUTH_CODE*\021INSERT_TO_STORAGE*\025READ_ALL_F"
  "ROM_STORAGE*\rCLEAR_STORAGE\";\n\013TouchActio"
  "n\022\016\n\nTOUCH_DOWN\020\001\022\016\n\nTOUCH_MOVE\020\002\022\014\n\010TOU"
  "CH_UP\020\003J\004\010\013\020\014\"\222\001\n\006Result\022.\n\004type\030\001 \002(\0162 "
  ".mozc.commands.Result.ResultType\022\r\n\005valu"
  "e\030\002 \002(\t\022\013\n\003key\030\003 \001(\t\022\030\n\rcursor_offset\030\004 "
  "\001(\005:\0010\"\"\n\nResultType\022\010\n\004NONE\020\000\022\n\n\006STRING"
  "\020\001\"\271\002\n\007Preedit\022\016\n\006cursor\030\001 \002(\r\022/\n\007segmen"
  "t\030\002 \003(\n2\036.mozc.commands.Preedit.Segment\022"
  "\034\n\024highlighted_position\030\003 \001(\r\022\034\n\ris_togg"
  "leable\030\004 \001(\010:\005false\032\260\001\n\007Segment\022=\n\nannot"
  "ation\030\003 \002(\0162).mozc.commands.Preedit.Segm"
  "ent.Annotation\022\r\n\005value\030\004 \002(\t\022\024\n\014value_l"
  "ength\030\005 \002(\r\022\013\n\003key\030\006 \001(\t\"4\n\nAnnotation\022\010"
  "\n\004NONE\020\000\022\r\n\tUNDERLINE\020\001\022\r\n\tHIGHLIGHT\020\002\"\200"
  "\001\n\006Status\022\021\n\tactivated\030\001 \001(\010\022,\n\004mode\030\002 \001"
  "(\0162\036.mozc.commands.CompositionMode\0225\n\rco"
  "meback_mode\030\003 \001(\0162\036.mozc.commands.Compos"
  "itionMode\"/\n\rDeletionRange\022\016\n\006offset\030\001 \001"
  "(\005\022\016\n\006length\030\002 \001(\005\"\276\t\n\006Output\022\016\n\002id\030\001 \001("
  "\004B\0020\001\022,\n\004mode\030\002 \001(\0162\036.mozc.commands.Comp"
  "ositionMode\022\020\n\010consumed\030\003 \001(\010\022%\n\006result\030"
  "\004 \001(\0132\025.mozc.commands.Result\022\'\n\007preedit\030"
  "\005 \001(\0132\026.mozc.commands.Preedit\022-\n\ncandida"
  "tes\030\006 \001(\0132\031.mozc.commands.Candidates\022$\n\003"
  "key\030\007 \001(\0132\027.mozc.commands.KeyEvent\022\013\n\003ur"
  "l\030\010 \001(\t\022#\n\006config\030\t \001(\0132\023.mozc.config.Co"
  "nfig\022B\n\016preedit_method\030\n \001(\0162#.mozc.comm"
  "ands.Output.PreeditMethod:\005ASCII\022D\n\nerro"
  "r_code\030\013 \001(\0162\037.mozc.commands.Output.Erro"
  "rCode:\017SESSION_SUCCESS\022%\n\006status\030\r \001(\0132\025"
  ".mozc.commands.Status\0229\n\023all_candidate_w"
  "ords\030\016 \001(\0132\034.mozc.commands.CandidateList"
  "\0224\n\016deletion_range\030\020 \001(\0132\034.mozc.commands"
  ".DeletionRange\022A\n\020launch_tool_mode\030\021 \001(\016"
  "2\036.mozc.commands.Output.ToolMode:\007NO_TOO"
  "L\0220\n\010callback\030\022 \001(\0132\036.mozc.commands.Outp"
  "ut.Callback\0229\n\rstorage_entry\030\023 \001(\0132\".moz"
  "c.commands.GenericStorageEntry\022Y\n\036user_d"
  "ictionary_command_status\030\025 \001(\01321.mozc.us"
  "er_dictionary.UserDictionaryCommandStatu"
  "s\022:\n\026engine_reload_response\030\026 \001(\0132\032.mozc"
  ".EngineReloadResponse\032Z\n\010Callback\0226\n\017ses"
  "sion_command\030\001 \001(\0132\035.mozc.commands.Sessi"
  "onCommand\022\026\n\016delay_millisec\030\002 \001(\r\"$\n\rPre"
  "editMethod\022\t\n\005ASCII\020\000\022\010\n\004KANA\020\001\"5\n\tError"
  "Code\022\023\n\017SESSION_SUCCESS\020\000\022\023\n\017SESSION_FAI"
  "LURE\020\001\"Y\n\010ToolMode\022\013\n\007NO_TOOL\020\000\022\021\n\rCONFI"
  "G_DIALOG\020\001\022\023\n\017DICTIONARY_TOOL\020\002\022\030\n\024WORD_"
  "REGISTER_DIALOG\020\003J\004\010\014\020\rJ\004\010\017\020\020J\004\010\024\020\025\"U\n\007C"
  "ommand\022#\n\005input\030\001 \002(\0132\024.mozc.commands.In"
  "put\022%\n\006output\030\002 \002(\0132\025.mozc.commands.Outp"
  "ut\"7\n\013CommandList\022(\n\010commands\030\001 \003(\0132\026.mo"
  "zc.commands.Command*\212\001\n\017CompositionMode\022"
  "\n\n\006DIRECT\020\000\022\014\n\010HIRAGANA\020\001\022\021\n\rFULL_KATAKA"
  "NA\020\002\022\016\n\nHALF_ASCII\020\003\022\016\n\nFULL_ASCII\020\004\022\021\n\r"
  "HALF_KATAKANA\020\005\022\027\n\023NUM_OF_COMPOSITIONS\020\006"
  "B\?\n.org.mozc.android.inputmethod.japanes"
  "e.protobufB\rProtoCommands"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fcommands_2eproto_deps[4] = {
  &::descriptor_table_protocol_2fcandidates_2eproto,
  &::descriptor_table_protocol_2fconfig_2eproto,
  &::descriptor_table_protocol_2fengine_5fbuilder_2eproto,
  &::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fcommands_2eproto_sccs[21] = {
  &scc_info_ApplicationInfo_protocol_2fcommands_2eproto.base,
  &scc_info_Capability_protocol_2fcommands_2eproto.base,
  &scc_info_Command_protocol_2fcommands_2eproto.base,
  &scc_info_CommandList_protocol_2fcommands_2eproto.base,
  &scc_info_Context_protocol_2fcommands_2eproto.base,
  &scc_info_DecoderExperimentParams_protocol_2fcommands_2eproto.base,
  &scc_info_DeletionRange_protocol_2fcommands_2eproto.base,
  &scc_info_GenericStorageEntry_protocol_2fcommands_2eproto.base,
  &scc_info_Input_protocol_2fcommands_2eproto.base,
  &scc_info_Input_TouchEvent_protocol_2fcommands_2eproto.base,
  &scc_info_Input_TouchPosition_protocol_2fcommands_2eproto.base,
  &scc_info_KeyEvent_protocol_2fcommands_2eproto.base,
  &scc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto.base,
  &scc_info_Output_protocol_2fcommands_2eproto.base,
  &scc_info_Output_Callback_protocol_2fcommands_2eproto.base,
  &scc_info_Preedit_protocol_2fcommands_2eproto.base,
  &scc_info_Preedit_Segment_protocol_2fcommands_2eproto.base,
  &scc_info_Request_protocol_2fcommands_2eproto.base,
  &scc_info_Result_protocol_2fcommands_2eproto.base,
  &scc_info_SessionCommand_protocol_2fcommands_2eproto.base,
  &scc_info_Status_protocol_2fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fcommands_2eproto = {
  false, false, descriptor_table_protodef_protocol_2fcommands_2eproto, "protocol/commands.proto", 10385,
  &descriptor_table_protocol_2fcommands_2eproto_once, descriptor_table_protocol_2fcommands_2eproto_sccs, descriptor_table_protocol_2fcommands_2eproto_deps, 21, 4,
  schemas, file_default_instances, TableStruct_protocol_2fcommands_2eproto::offsets,
  file_level_metadata_protocol_2fcommands_2eproto, 21, file_level_enum_descriptors_protocol_2fcommands_2eproto, file_level_service_descriptors_protocol_2fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fcommands_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fcommands_2eproto)), true);
namespace mozc {
namespace commands {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyEvent_SpecialKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[0];
}
bool KeyEvent_SpecialKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyEvent_SpecialKey KeyEvent::NO_SPECIALKEY;
constexpr KeyEvent_SpecialKey KeyEvent::DIGIT;
constexpr KeyEvent_SpecialKey KeyEvent::ON;
constexpr KeyEvent_SpecialKey KeyEvent::OFF;
constexpr KeyEvent_SpecialKey KeyEvent::SPACE;
constexpr KeyEvent_SpecialKey KeyEvent::ENTER;
constexpr KeyEvent_SpecialKey KeyEvent::LEFT;
constexpr KeyEvent_SpecialKey KeyEvent::RIGHT;
constexpr KeyEvent_SpecialKey KeyEvent::UP;
constexpr KeyEvent_SpecialKey KeyEvent::DOWN;
constexpr KeyEvent_SpecialKey KeyEvent::ESCAPE;
constexpr KeyEvent_SpecialKey KeyEvent::DEL;
constexpr KeyEvent_SpecialKey KeyEvent::BACKSPACE;
constexpr KeyEvent_SpecialKey KeyEvent::HENKAN;
constexpr KeyEvent_SpecialKey KeyEvent::MUHENKAN;
constexpr KeyEvent_SpecialKey KeyEvent::KANA;
constexpr KeyEvent_SpecialKey KeyEvent::HOME;
constexpr KeyEvent_SpecialKey KeyEvent::END;
constexpr KeyEvent_SpecialKey KeyEvent::TAB;
constexpr KeyEvent_SpecialKey KeyEvent::F1;
constexpr KeyEvent_SpecialKey KeyEvent::F2;
constexpr KeyEvent_SpecialKey KeyEvent::F3;
constexpr KeyEvent_SpecialKey KeyEvent::F4;
constexpr KeyEvent_SpecialKey KeyEvent::F5;
constexpr KeyEvent_SpecialKey KeyEvent::F6;
constexpr KeyEvent_SpecialKey KeyEvent::F7;
constexpr KeyEvent_SpecialKey KeyEvent::F8;
constexpr KeyEvent_SpecialKey KeyEvent::F9;
constexpr KeyEvent_SpecialKey KeyEvent::F10;
constexpr KeyEvent_SpecialKey KeyEvent::F11;
constexpr KeyEvent_SpecialKey KeyEvent::F12;
constexpr KeyEvent_SpecialKey KeyEvent::PAGE_UP;
constexpr KeyEvent_SpecialKey KeyEvent::PAGE_DOWN;
constexpr KeyEvent_SpecialKey KeyEvent::INSERT;
constexpr KeyEvent_SpecialKey KeyEvent::F13;
constexpr KeyEvent_SpecialKey KeyEvent::F14;
constexpr KeyEvent_SpecialKey KeyEvent::F15;
constexpr KeyEvent_SpecialKey KeyEvent::F16;
constexpr KeyEvent_SpecialKey KeyEvent::F17;
constexpr KeyEvent_SpecialKey KeyEvent::F18;
constexpr KeyEvent_SpecialKey KeyEvent::F19;
constexpr KeyEvent_SpecialKey KeyEvent::F20;
constexpr KeyEvent_SpecialKey KeyEvent::F21;
constexpr KeyEvent_SpecialKey KeyEvent::F22;
constexpr KeyEvent_SpecialKey KeyEvent::F23;
constexpr KeyEvent_SpecialKey KeyEvent::F24;
constexpr KeyEvent_SpecialKey KeyEvent::EISU;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD0;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD1;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD2;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD3;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD4;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD5;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD6;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD7;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD8;
constexpr KeyEvent_SpecialKey KeyEvent::NUMPAD9;
constexpr KeyEvent_SpecialKey KeyEvent::MULTIPLY;
constexpr KeyEvent_SpecialKey KeyEvent::ADD;
constexpr KeyEvent_SpecialKey KeyEvent::SEPARATOR;
constexpr KeyEvent_SpecialKey KeyEvent::SUBTRACT;
constexpr KeyEvent_SpecialKey KeyEvent::DECIMAL;
constexpr KeyEvent_SpecialKey KeyEvent::DIVIDE;
constexpr KeyEvent_SpecialKey KeyEvent::EQUALS;
constexpr KeyEvent_SpecialKey KeyEvent::TEXT_INPUT;
constexpr KeyEvent_SpecialKey KeyEvent::HANKAKU;
constexpr KeyEvent_SpecialKey KeyEvent::KANJI;
constexpr KeyEvent_SpecialKey KeyEvent::KATAKANA;
constexpr KeyEvent_SpecialKey KeyEvent::CAPS_LOCK;
constexpr KeyEvent_SpecialKey KeyEvent::UNDEFINED_KEY;
constexpr KeyEvent_SpecialKey KeyEvent::COMMA;
constexpr KeyEvent_SpecialKey KeyEvent::CLEAR;
constexpr KeyEvent_SpecialKey KeyEvent::VIRTUAL_LEFT;
constexpr KeyEvent_SpecialKey KeyEvent::VIRTUAL_RIGHT;
constexpr KeyEvent_SpecialKey KeyEvent::VIRTUAL_ENTER;
constexpr KeyEvent_SpecialKey KeyEvent::VIRTUAL_UP;
constexpr KeyEvent_SpecialKey KeyEvent::VIRTUAL_DOWN;
constexpr KeyEvent_SpecialKey KeyEvent::NUM_SPECIALKEYS;
constexpr KeyEvent_SpecialKey KeyEvent::SpecialKey_MIN;
constexpr KeyEvent_SpecialKey KeyEvent::SpecialKey_MAX;
constexpr int KeyEvent::SpecialKey_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyEvent_ModifierKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[1];
}
bool KeyEvent_ModifierKey_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyEvent_ModifierKey KeyEvent::CTRL;
constexpr KeyEvent_ModifierKey KeyEvent::ALT;
constexpr KeyEvent_ModifierKey KeyEvent::SHIFT;
constexpr KeyEvent_ModifierKey KeyEvent::KEY_DOWN;
constexpr KeyEvent_ModifierKey KeyEvent::KEY_UP;
constexpr KeyEvent_ModifierKey KeyEvent::LEFT_CTRL;
constexpr KeyEvent_ModifierKey KeyEvent::LEFT_ALT;
constexpr KeyEvent_ModifierKey KeyEvent::LEFT_SHIFT;
constexpr KeyEvent_ModifierKey KeyEvent::RIGHT_CTRL;
constexpr KeyEvent_ModifierKey KeyEvent::RIGHT_ALT;
constexpr KeyEvent_ModifierKey KeyEvent::RIGHT_SHIFT;
constexpr KeyEvent_ModifierKey KeyEvent::CAPS;
constexpr KeyEvent_ModifierKey KeyEvent::ModifierKey_MIN;
constexpr KeyEvent_ModifierKey KeyEvent::ModifierKey_MAX;
constexpr int KeyEvent::ModifierKey_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyEvent_InputStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[2];
}
bool KeyEvent_InputStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KeyEvent_InputStyle KeyEvent::FOLLOW_MODE;
constexpr KeyEvent_InputStyle KeyEvent::AS_IS;
constexpr KeyEvent_InputStyle KeyEvent::DIRECT_INPUT;
constexpr KeyEvent_InputStyle KeyEvent::InputStyle_MIN;
constexpr KeyEvent_InputStyle KeyEvent::InputStyle_MAX;
constexpr int KeyEvent::InputStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenericStorageEntry_StorageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[3];
}
bool GenericStorageEntry_StorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GenericStorageEntry_StorageType GenericStorageEntry::SYMBOL_HISTORY;
constexpr GenericStorageEntry_StorageType GenericStorageEntry::EMOTICON_HISTORY;
constexpr GenericStorageEntry_StorageType GenericStorageEntry::EMOJI_HISTORY;
constexpr GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MIN;
constexpr GenericStorageEntry_StorageType GenericStorageEntry::StorageType_MAX;
constexpr int GenericStorageEntry::StorageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionCommand_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[4];
}
bool SessionCommand_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SessionCommand_CommandType SessionCommand::NONE;
constexpr SessionCommand_CommandType SessionCommand::REVERT;
constexpr SessionCommand_CommandType SessionCommand::SUBMIT;
constexpr SessionCommand_CommandType SessionCommand::SELECT_CANDIDATE;
constexpr SessionCommand_CommandType SessionCommand::HIGHLIGHT_CANDIDATE;
constexpr SessionCommand_CommandType SessionCommand::SWITCH_INPUT_MODE;
constexpr SessionCommand_CommandType SessionCommand::GET_STATUS;
constexpr SessionCommand_CommandType SessionCommand::SUBMIT_CANDIDATE;
constexpr SessionCommand_CommandType SessionCommand::CONVERT_REVERSE;
constexpr SessionCommand_CommandType SessionCommand::UNDO;
constexpr SessionCommand_CommandType SessionCommand::RESET_CONTEXT;
constexpr SessionCommand_CommandType SessionCommand::MOVE_CURSOR;
constexpr SessionCommand_CommandType SessionCommand::SWITCH_INPUT_FIELD_TYPE;
constexpr SessionCommand_CommandType SessionCommand::USAGE_STATS_EVENT;
constexpr SessionCommand_CommandType SessionCommand::UNDO_OR_REWIND;
constexpr SessionCommand_CommandType SessionCommand::EXPAND_SUGGESTION;
constexpr SessionCommand_CommandType SessionCommand::COMMIT_RAW_TEXT;
constexpr SessionCommand_CommandType SessionCommand::CONVERT_PREV_PAGE;
constexpr SessionCommand_CommandType SessionCommand::CONVERT_NEXT_PAGE;
constexpr SessionCommand_CommandType SessionCommand::TURN_ON_IME;
constexpr SessionCommand_CommandType SessionCommand::TURN_OFF_IME;
constexpr SessionCommand_CommandType SessionCommand::DELETE_CANDIDATE_FROM_HISTORY;
constexpr SessionCommand_CommandType SessionCommand::STOP_KEY_TOGGLING;
constexpr SessionCommand_CommandType SessionCommand::CommandType_MIN;
constexpr SessionCommand_CommandType SessionCommand::CommandType_MAX;
constexpr int SessionCommand::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionCommand_UsageStatsEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[5];
}
bool SessionCommand_UsageStatsEvent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_SHOW;
constexpr SessionCommand_UsageStatsEvent SessionCommand::INFOLIST_WINDOW_HIDE;
constexpr SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_OPEN_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::HANDWRITING_COMMIT_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_OPEN_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::CHARACTER_PALETTE_COMMIT_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_LANDSCAPE;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_PORTRAIT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_0;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_1;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_2;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_3;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_4;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_5;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_6;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_7;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_8;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_9;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SUBMITTED_CANDIDATE_ROW_GE10;
constexpr SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_FOLD_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::KEYBOARD_EXPAND_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::MUSHROOM_SELECTION_DIALOG_OPEN_EVENT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_LANDSCAPE;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ADJUSTMENT_ENABLED_PORTRAIT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_LANDSCAPE;
constexpr SessionCommand_UsageStatsEvent SessionCommand::SOFTWARE_KEYBOARD_LAYOUT_ENGLISH_PORTRAIT;
constexpr SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MIN;
constexpr SessionCommand_UsageStatsEvent SessionCommand::UsageStatsEvent_MAX;
constexpr int SessionCommand::UsageStatsEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Context_InputFieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[6];
}
bool Context_InputFieldType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Context_InputFieldType Context::NORMAL;
constexpr Context_InputFieldType Context::PASSWORD;
constexpr Context_InputFieldType Context::TEL;
constexpr Context_InputFieldType Context::NUMBER;
constexpr Context_InputFieldType Context::InputFieldType_MIN;
constexpr Context_InputFieldType Context::InputFieldType_MAX;
constexpr int Context::InputFieldType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_TextDeletionCapabilityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[7];
}
bool Capability_TextDeletionCapabilityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Capability_TextDeletionCapabilityType Capability::NO_TEXT_DELETION_CAPABILITY;
constexpr Capability_TextDeletionCapabilityType Capability::DELETE_PRECEDING_TEXT;
constexpr Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MIN;
constexpr Capability_TextDeletionCapabilityType Capability::TextDeletionCapabilityType_MAX;
constexpr int Capability::TextDeletionCapabilityType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_SpecialRomanjiTable_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[8];
}
bool Request_SpecialRomanjiTable_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 13:
    case 14:
    case 16:
    case 17:
    case 20:
    case 22:
    case 30:
    case 31:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 10000:
    case 10001:
    case 10002:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_SpecialRomanjiTable Request::DEFAULT_TABLE;
constexpr Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HIRAGANA_INTUITIVE;
constexpr Request_SpecialRomanjiTable Request::TWELVE_KEYS_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::FLICK_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::FLICK_TO_HIRAGANA_INTUITIVE;
constexpr Request_SpecialRomanjiTable Request::FLICK_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::FLICK_TO_HALFWIDTHASCII_IOS;
constexpr Request_SpecialRomanjiTable Request::FLICK_TO_NUMBER;
constexpr Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HIRAGANA_INTUITIVE;
constexpr Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_NUMBER;
constexpr Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HALFWIDTHASCII_IOS;
constexpr Request_SpecialRomanjiTable Request::TOGGLE_FLICK_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::QWERTY_MOBILE_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::GODAN_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::GODAN_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::NOTOUCH_TO_HIRAGANA;
constexpr Request_SpecialRomanjiTable Request::NOTOUCH_TO_HALFWIDTHASCII;
constexpr Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MIN;
constexpr Request_SpecialRomanjiTable Request::SpecialRomanjiTable_MAX;
constexpr int Request::SpecialRomanjiTable_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_SpaceOnAlphanumeric_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[9];
}
bool Request_SpaceOnAlphanumeric_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_KEEPING_COMPOSITION;
constexpr Request_SpaceOnAlphanumeric Request::SPACE_OR_CONVERT_COMMITING_COMPOSITION;
constexpr Request_SpaceOnAlphanumeric Request::COMMIT;
constexpr Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MIN;
constexpr Request_SpaceOnAlphanumeric Request::SpaceOnAlphanumeric_MAX;
constexpr int Request::SpaceOnAlphanumeric_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_EmojiCarrierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[10];
}
bool Request_EmojiCarrierType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_EmojiCarrierType Request::UNICODE_EMOJI;
constexpr Request_EmojiCarrierType Request::DOCOMO_EMOJI;
constexpr Request_EmojiCarrierType Request::SOFTBANK_EMOJI;
constexpr Request_EmojiCarrierType Request::KDDI_EMOJI;
constexpr Request_EmojiCarrierType Request::EmojiCarrierType_MIN;
constexpr Request_EmojiCarrierType Request::EmojiCarrierType_MAX;
constexpr int Request::EmojiCarrierType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RewriterCapability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[11];
}
bool Request_RewriterCapability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_RewriterCapability Request::NOT_AVAILABLE;
constexpr Request_RewriterCapability Request::CONVERSION;
constexpr Request_RewriterCapability Request::PREDICTION;
constexpr Request_RewriterCapability Request::SUGGESTION;
constexpr Request_RewriterCapability Request::ALL;
constexpr Request_RewriterCapability Request::RewriterCapability_MIN;
constexpr Request_RewriterCapability Request::RewriterCapability_MAX;
constexpr int Request::RewriterCapability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_CrossingEdgeBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[12];
}
bool Request_CrossingEdgeBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_CrossingEdgeBehavior Request::DO_NOTHING;
constexpr Request_CrossingEdgeBehavior Request::COMMIT_WITHOUT_CONSUMING;
constexpr Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MIN;
constexpr Request_CrossingEdgeBehavior Request::CrossingEdgeBehavior_MAX;
constexpr int Request::CrossingEdgeBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_LanguageAwareInputBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[13];
}
bool Request_LanguageAwareInputBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_LanguageAwareInputBehavior Request::DEFAULT_LANGUAGE_AWARE_BEHAVIOR;
constexpr Request_LanguageAwareInputBehavior Request::NO_LANGUAGE_AWARE_INPUT;
constexpr Request_LanguageAwareInputBehavior Request::LANGUAGE_AWARE_SUGGESTION;
constexpr Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MIN;
constexpr Request_LanguageAwareInputBehavior Request::LanguageAwareInputBehavior_MAX;
constexpr int Request::LanguageAwareInputBehavior_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Input_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[14];
}
bool Input_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 22:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Input_CommandType Input::NONE;
constexpr Input_CommandType Input::CREATE_SESSION;
constexpr Input_CommandType Input::DELETE_SESSION;
constexpr Input_CommandType Input::SEND_KEY;
constexpr Input_CommandType Input::TEST_SEND_KEY;
constexpr Input_CommandType Input::SEND_COMMAND;
constexpr Input_CommandType Input::GET_CONFIG;
constexpr Input_CommandType Input::SET_CONFIG;
constexpr Input_CommandType Input::SET_IMPOSED_CONFIG;
constexpr Input_CommandType Input::SET_REQUEST;
constexpr Input_CommandType Input::SYNC_DATA;
constexpr Input_CommandType Input::SHUTDOWN;
constexpr Input_CommandType Input::RELOAD;
constexpr Input_CommandType Input::CLEAR_USER_HISTORY;
constexpr Input_CommandType Input::CLEAR_USER_PREDICTION;
constexpr Input_CommandType Input::CLEAR_UNUSED_USER_PREDICTION;
constexpr Input_CommandType Input::CLEANUP;
constexpr Input_CommandType Input::NO_OPERATION;
constexpr Input_CommandType Input::SEND_USER_DICTIONARY_COMMAND;
constexpr Input_CommandType Input::SEND_ENGINE_RELOAD_REQUEST;
constexpr Input_CommandType Input::NUM_OF_COMMANDS;
constexpr Input_CommandType Input::CommandType_MIN;
constexpr Input_CommandType Input::CommandType_MAX;
constexpr int Input::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Input_TouchAction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[15];
}
bool Input_TouchAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Input_TouchAction Input::TOUCH_DOWN;
constexpr Input_TouchAction Input::TOUCH_MOVE;
constexpr Input_TouchAction Input::TOUCH_UP;
constexpr Input_TouchAction Input::TouchAction_MIN;
constexpr Input_TouchAction Input::TouchAction_MAX;
constexpr int Input::TouchAction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[16];
}
bool Result_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Result_ResultType Result::NONE;
constexpr Result_ResultType Result::STRING;
constexpr Result_ResultType Result::ResultType_MIN;
constexpr Result_ResultType Result::ResultType_MAX;
constexpr int Result::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Preedit_Segment_Annotation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[17];
}
bool Preedit_Segment_Annotation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Preedit_Segment_Annotation Preedit_Segment::NONE;
constexpr Preedit_Segment_Annotation Preedit_Segment::UNDERLINE;
constexpr Preedit_Segment_Annotation Preedit_Segment::HIGHLIGHT;
constexpr Preedit_Segment_Annotation Preedit_Segment::Annotation_MIN;
constexpr Preedit_Segment_Annotation Preedit_Segment::Annotation_MAX;
constexpr int Preedit_Segment::Annotation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Output_PreeditMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[18];
}
bool Output_PreeditMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Output_PreeditMethod Output::ASCII;
constexpr Output_PreeditMethod Output::KANA;
constexpr Output_PreeditMethod Output::PreeditMethod_MIN;
constexpr Output_PreeditMethod Output::PreeditMethod_MAX;
constexpr int Output::PreeditMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Output_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[19];
}
bool Output_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Output_ErrorCode Output::SESSION_SUCCESS;
constexpr Output_ErrorCode Output::SESSION_FAILURE;
constexpr Output_ErrorCode Output::ErrorCode_MIN;
constexpr Output_ErrorCode Output::ErrorCode_MAX;
constexpr int Output::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Output_ToolMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[20];
}
bool Output_ToolMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Output_ToolMode Output::NO_TOOL;
constexpr Output_ToolMode Output::CONFIG_DIALOG;
constexpr Output_ToolMode Output::DICTIONARY_TOOL;
constexpr Output_ToolMode Output::WORD_REGISTER_DIALOG;
constexpr Output_ToolMode Output::ToolMode_MIN;
constexpr Output_ToolMode Output::ToolMode_MAX;
constexpr int Output::ToolMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompositionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fcommands_2eproto);
  return file_level_enum_descriptors_protocol_2fcommands_2eproto[21];
}
bool CompositionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KeyEvent_ProbableKeyEvent::InitAsDefaultInstance() {
}
class KeyEvent_ProbableKeyEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyEvent_ProbableKeyEvent>()._has_bits_);
  static void set_has_key_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_special_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  modifier_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}
KeyEvent_ProbableKeyEvent::KeyEvent_ProbableKeyEvent(const KeyEvent_ProbableKeyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      modifier_keys_(from.modifier_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent.ProbableKeyEvent)
}

void KeyEvent_ProbableKeyEvent::SharedCtor() {
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
}

KeyEvent_ProbableKeyEvent::~KeyEvent_ProbableKeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent.ProbableKeyEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyEvent_ProbableKeyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyEvent_ProbableKeyEvent::ArenaDtor(void* object) {
  KeyEvent_ProbableKeyEvent* _this = reinterpret_cast< KeyEvent_ProbableKeyEvent* >(object);
  (void)_this;
}
void KeyEvent_ProbableKeyEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyEvent_ProbableKeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyEvent_ProbableKeyEvent& KeyEvent_ProbableKeyEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyEvent_ProbableKeyEvent_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void KeyEvent_ProbableKeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyEvent_ProbableKeyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key_code(&has_bits);
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::KeyEvent_SpecialKey_IsValid(val))) {
            _internal_set_special_key(static_cast<::mozc::commands::KeyEvent_SpecialKey>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::mozc::commands::KeyEvent_ModifierKey_IsValid(val))) {
              _internal_add_modifier_keys(static_cast<::mozc::commands::KeyEvent_ModifierKey>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_modifier_keys(), ptr, ctx, ::mozc::commands::KeyEvent_ModifierKey_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double probability = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_probability(&has_bits);
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyEvent_ProbableKeyEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_code(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0, n = this->_internal_modifier_keys_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_modifier_keys(i), target);
  }

  // optional double probability = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_probability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent.ProbableKeyEvent)
  return target;
}

size_t KeyEvent_ProbableKeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modifier_keys(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 key_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_key_code());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_key());
    }

    // optional double probability = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyEvent_ProbableKeyEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyEvent_ProbableKeyEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent.ProbableKeyEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent.ProbableKeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent_ProbableKeyEvent::MergeFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      special_key_ = from.special_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent_ProbableKeyEvent::CopyFrom(const KeyEvent_ProbableKeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent.ProbableKeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent_ProbableKeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent_ProbableKeyEvent::InternalSwap(KeyEvent_ProbableKeyEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, probability_)
      + sizeof(KeyEvent_ProbableKeyEvent::probability_)
      - PROTOBUF_FIELD_OFFSET(KeyEvent_ProbableKeyEvent, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyEvent_ProbableKeyEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyEvent::InitAsDefaultInstance() {
}
class KeyEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyEvent>()._has_bits_);
  static void set_has_key_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifiers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_special_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_input_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

KeyEvent::KeyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  modifier_keys_(arena),
  probable_key_event_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      modifier_keys_(from.modifier_keys_),
      probable_key_event_(from.probable_key_event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_string()) {
    key_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_string(),
      GetArena());
  }
  ::memcpy(&key_code_, &from.key_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&activated_) -
    reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyEvent_protocol_2fcommands_2eproto.base);
  key_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activated_) -
      reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.KeyEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyEvent::ArenaDtor(void* object) {
  KeyEvent* _this = reinterpret_cast< KeyEvent* >(object);
  (void)_this;
}
void KeyEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyEvent& KeyEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyEvent_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_keys_.Clear();
  probable_key_event_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&key_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activated_) -
        reinterpret_cast<char*>(&key_code_)) + sizeof(activated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 key_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key_code(&has_bits);
          key_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 modifiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_modifiers(&has_bits);
          modifiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::KeyEvent_SpecialKey_IsValid(val))) {
            _internal_set_special_key(static_cast<::mozc::commands::KeyEvent_SpecialKey>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::mozc::commands::KeyEvent_ModifierKey_IsValid(val))) {
              _internal_add_modifier_keys(static_cast<::mozc::commands::KeyEvent_ModifierKey>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_modifier_keys(), ptr, ctx, ::mozc::commands::KeyEvent_ModifierKey_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.KeyEvent.key_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::KeyEvent_InputStyle_IsValid(val))) {
            _internal_set_input_style(static_cast<::mozc::commands::KeyEvent_InputStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CompositionMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CompositionMode_IsValid(val))) {
            _internal_set_mode(static_cast<::mozc::commands::CompositionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probable_key_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool activated = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.KeyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 key_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_code(), target);
  }

  // optional uint32 modifiers = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_modifiers(), target);
  }

  // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_special_key(), target);
  }

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  for (int i = 0, n = this->_internal_modifier_keys_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_modifier_keys(i), target);
  }

  // optional string key_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_string().data(), static_cast<int>(this->_internal_key_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.KeyEvent.key_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key_string(), target);
  }

  // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_input_style(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_mode(), target);
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probable_key_event_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_probable_key_event(i), target, stream);
  }

  // optional bool activated = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_activated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.KeyEvent)
  return target;
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.KeyEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.KeyEvent.ModifierKey modifier_keys = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_modifier_keys_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_modifier_keys(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .mozc.commands.KeyEvent.ProbableKeyEvent probable_key_event = 8;
  total_size += 1UL * this->_internal_probable_key_event_size();
  for (const auto& msg : this->probable_key_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string key_string = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key_string());
    }

    // optional uint32 key_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_key_code());
    }

    // optional uint32 modifiers = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_modifiers());
    }

    // optional .mozc.commands.KeyEvent.SpecialKey special_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_key());
    }

    // optional .mozc.commands.KeyEvent.InputStyle input_style = 6 [default = FOLLOW_MODE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_style());
    }

    // optional .mozc.commands.CompositionMode mode = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool activated = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.KeyEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.KeyEvent)
    MergeFrom(*source);
  }
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modifier_keys_.MergeFrom(from.modifier_keys_);
  probable_key_event_.MergeFrom(from.probable_key_event_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key_string(from._internal_key_string());
    }
    if (cached_has_bits & 0x00000002u) {
      key_code_ = from.key_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifiers_ = from.modifiers_;
    }
    if (cached_has_bits & 0x00000008u) {
      special_key_ = from.special_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_style_ = from.input_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      activated_ = from.activated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeyEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::InternalSwap(KeyEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modifier_keys_.InternalSwap(&other->modifier_keys_);
  probable_key_event_.InternalSwap(&other->probable_key_event_);
  key_string_.Swap(&other->key_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyEvent, activated_)
      + sizeof(KeyEvent::activated_)
      - PROTOBUF_FIELD_OFFSET(KeyEvent, key_code_)>(
          reinterpret_cast<char*>(&key_code_),
          reinterpret_cast<char*>(&other->key_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericStorageEntry::InitAsDefaultInstance() {
}
class GenericStorageEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericStorageEntry>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GenericStorageEntry::GenericStorageEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.GenericStorageEntry)
}
GenericStorageEntry::GenericStorageEntry(const GenericStorageEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.GenericStorageEntry)
}

void GenericStorageEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericStorageEntry_protocol_2fcommands_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GenericStorageEntry::~GenericStorageEntry() {
  // @@protoc_insertion_point(destructor:mozc.commands.GenericStorageEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericStorageEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericStorageEntry::ArenaDtor(void* object) {
  GenericStorageEntry* _this = reinterpret_cast< GenericStorageEntry* >(object);
  (void)_this;
}
void GenericStorageEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenericStorageEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericStorageEntry& GenericStorageEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericStorageEntry_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GenericStorageEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.GenericStorageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericStorageEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::GenericStorageEntry_StorageType_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::commands::GenericStorageEntry_StorageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.GenericStorageEntry.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericStorageEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.GenericStorageEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.GenericStorageEntry.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // repeated bytes value = 3;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.GenericStorageEntry)
  return target;
}

size_t GenericStorageEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.GenericStorageEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes value = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional .mozc.commands.GenericStorageEntry.StorageType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericStorageEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.GenericStorageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericStorageEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericStorageEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.GenericStorageEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.GenericStorageEntry)
    MergeFrom(*source);
  }
}

void GenericStorageEntry::MergeFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.GenericStorageEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericStorageEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericStorageEntry::CopyFrom(const GenericStorageEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.GenericStorageEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericStorageEntry::IsInitialized() const {
  return true;
}

void GenericStorageEntry::InternalSwap(GenericStorageEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericStorageEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionCommand::InitAsDefaultInstance() {
}
class SessionCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionCommand>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_composition_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cursor_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_usage_stats_event(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usage_stats_event_int_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

SessionCommand::SessionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.SessionCommand)
}
SessionCommand::SessionCommand(const SessionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&usage_stats_event_) -
    reinterpret_cast<char*>(&type_)) + sizeof(usage_stats_event_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.SessionCommand)
}

void SessionCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionCommand_protocol_2fcommands_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usage_stats_event_int_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(usage_stats_event_int_value_));
  usage_stats_event_ = 1;
}

SessionCommand::~SessionCommand() {
  // @@protoc_insertion_point(destructor:mozc.commands.SessionCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionCommand::ArenaDtor(void* object) {
  SessionCommand* _this = reinterpret_cast< SessionCommand* >(object);
  (void)_this;
}
void SessionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionCommand& SessionCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionCommand_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SessionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.SessionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usage_stats_event_int_value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(usage_stats_event_int_value_));
    usage_stats_event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.commands.SessionCommand.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::SessionCommand_CommandType_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::commands::SessionCommand_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CompositionMode composition_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CompositionMode_IsValid(val))) {
            _internal_set_composition_mode(static_cast<::mozc::commands::CompositionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.SessionCommand.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cursor_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cursor_position(&has_bits);
          cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::SessionCommand_UsageStatsEvent_IsValid(val))) {
            _internal_set_usage_stats_event(static_cast<::mozc::commands::SessionCommand_UsageStatsEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 usage_stats_event_int_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_usage_stats_event_int_value(&has_bits);
          usage_stats_event_int_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.SessionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // optional .mozc.commands.CompositionMode composition_mode = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_composition_mode(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.SessionCommand.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // optional uint32 cursor_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cursor_position(), target);
  }

  // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_usage_stats_event(), target);
  }

  // optional int32 usage_stats_event_int_value = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_usage_stats_event_int_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.SessionCommand)
  return target;
}

size_t SessionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.SessionCommand)
  size_t total_size = 0;

  // required .mozc.commands.SessionCommand.CommandType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional int32 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_id());
    }

    // optional .mozc.commands.CompositionMode composition_mode = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_composition_mode());
    }

    // optional uint32 cursor_position = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cursor_position());
    }

    // optional int32 usage_stats_event_int_value = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_usage_stats_event_int_value());
    }

    // optional .mozc.commands.SessionCommand.UsageStatsEvent usage_stats_event = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_usage_stats_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.SessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.SessionCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.SessionCommand)
    MergeFrom(*source);
  }
}

void SessionCommand::MergeFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.SessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      composition_mode_ = from.composition_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      cursor_position_ = from.cursor_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      usage_stats_event_int_value_ = from.usage_stats_event_int_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      usage_stats_event_ = from.usage_stats_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SessionCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionCommand::CopyFrom(const SessionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.SessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionCommand::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SessionCommand::InternalSwap(SessionCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionCommand, usage_stats_event_int_value_)
      + sizeof(SessionCommand::usage_stats_event_int_value_)
      - PROTOBUF_FIELD_OFFSET(SessionCommand, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
  swap(usage_stats_event_, other->usage_stats_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Context::InitAsDefaultInstance() {
}
class Context::_Internal {
 public:
  using HasBits = decltype(std::declval<Context>()._has_bits_);
  static void set_has_preceding_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_following_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_suppress_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_input_field_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_revision(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Context::Context(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  experimental_features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Context)
}
Context::Context(const Context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      experimental_features_(from.experimental_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preceding_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preceding_text()) {
    preceding_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preceding_text(),
      GetArena());
  }
  following_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_following_text()) {
    following_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_following_text(),
      GetArena());
  }
  ::memcpy(&suppress_suggestion_, &from.suppress_suggestion_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_field_type_) -
    reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(input_field_type_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Context)
}

void Context::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Context_protocol_2fcommands_2eproto.base);
  preceding_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  following_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&suppress_suggestion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(revision_));
  input_field_type_ = 1;
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:mozc.commands.Context)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Context::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preceding_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  following_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Context::ArenaDtor(void* object) {
  Context* _this = reinterpret_cast< Context* >(object);
  (void)_this;
}
void Context::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Context& Context::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Context_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experimental_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      preceding_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      following_text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&suppress_suggestion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revision_) -
        reinterpret_cast<char*>(&suppress_suggestion_)) + sizeof(revision_));
    input_field_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string preceding_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_preceding_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Context.preceding_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string following_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_following_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Context.following_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_suggestion = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_suppress_suggestion(&has_bits);
          suppress_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Context_InputFieldType_IsValid(val))) {
            _internal_set_input_field_type(static_cast<::mozc::commands::Context_InputFieldType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 revision = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_revision(&has_bits);
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string experimental_features = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_experimental_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Context.experimental_features");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Context::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string preceding_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preceding_text().data(), static_cast<int>(this->_internal_preceding_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.preceding_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preceding_text(), target);
  }

  // optional string following_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_following_text().data(), static_cast<int>(this->_internal_following_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.following_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_following_text(), target);
  }

  // optional bool suppress_suggestion = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_suppress_suggestion(), target);
  }

  // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_input_field_type(), target);
  }

  // optional int32 revision = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_revision(), target);
  }

  // repeated string experimental_features = 100;
  for (int i = 0, n = this->_internal_experimental_features_size(); i < n; i++) {
    const auto& s = this->_internal_experimental_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Context.experimental_features");
    target = stream->WriteString(100, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Context)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string experimental_features = 100;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(experimental_features_.size());
  for (int i = 0, n = experimental_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      experimental_features_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string preceding_text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preceding_text());
    }

    // optional string following_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_following_text());
    }

    // optional bool suppress_suggestion = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 revision = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_revision());
    }

    // optional .mozc.commands.Context.InputFieldType input_field_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_field_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Context::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Context)
  GOOGLE_DCHECK_NE(&from, this);
  const Context* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Context>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Context)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Context)
    MergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  experimental_features_.MergeFrom(from.experimental_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_preceding_text(from._internal_preceding_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_following_text(from._internal_following_text());
    }
    if (cached_has_bits & 0x00000004u) {
      suppress_suggestion_ = from.suppress_suggestion_;
    }
    if (cached_has_bits & 0x00000008u) {
      revision_ = from.revision_;
    }
    if (cached_has_bits & 0x00000010u) {
      input_field_type_ = from.input_field_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Context::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Context::IsInitialized() const {
  return true;
}

void Context::InternalSwap(Context* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  experimental_features_.InternalSwap(&other->experimental_features_);
  preceding_text_.Swap(&other->preceding_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  following_text_.Swap(&other->following_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Context, revision_)
      + sizeof(Context::revision_)
      - PROTOBUF_FIELD_OFFSET(Context, suppress_suggestion_)>(
          reinterpret_cast<char*>(&suppress_suggestion_),
          reinterpret_cast<char*>(&other->suppress_suggestion_));
  swap(input_field_type_, other->input_field_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Context::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Capability::InitAsDefaultInstance() {
}
class Capability::_Internal {
 public:
  using HasBits = decltype(std::declval<Capability>()._has_bits_);
  static void set_has_text_deletion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Capability::Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_deletion_ = from.text_deletion_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Capability)
}

void Capability::SharedCtor() {
  text_deletion_ = 0;
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:mozc.commands.Capability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Capability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Capability::ArenaDtor(void* object) {
  Capability* _this = reinterpret_cast< Capability* >(object);
  (void)_this;
}
void Capability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Capability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Capability& Capability::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Capability_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_deletion_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Capability_TextDeletionCapabilityType_IsValid(val))) {
            _internal_set_text_deletion(static_cast<::mozc::commands::Capability_TextDeletionCapabilityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Capability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Capability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_text_deletion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Capability)
  return target;
}

size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Capability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .mozc.commands.Capability.TextDeletionCapabilityType text_deletion = 1 [default = NO_TEXT_DELETION_CAPABILITY];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_deletion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Capability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  const Capability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Capability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Capability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Capability)
    MergeFrom(*source);
  }
}

void Capability::MergeFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Capability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text_deletion()) {
    _internal_set_text_deletion(from._internal_text_deletion());
  }
}

void Capability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(text_deletion_, other->text_deletion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DecoderExperimentParams::InitAsDefaultInstance() {
}
class DecoderExperimentParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DecoderExperimentParams>()._has_bits_);
  static void set_has_enable_simplified_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DecoderExperimentParams::DecoderExperimentParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.DecoderExperimentParams)
}
DecoderExperimentParams::DecoderExperimentParams(const DecoderExperimentParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_simplified_ranking_ = from.enable_simplified_ranking_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.DecoderExperimentParams)
}

void DecoderExperimentParams::SharedCtor() {
  enable_simplified_ranking_ = false;
}

DecoderExperimentParams::~DecoderExperimentParams() {
  // @@protoc_insertion_point(destructor:mozc.commands.DecoderExperimentParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DecoderExperimentParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DecoderExperimentParams::ArenaDtor(void* object) {
  DecoderExperimentParams* _this = reinterpret_cast< DecoderExperimentParams* >(object);
  (void)_this;
}
void DecoderExperimentParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DecoderExperimentParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecoderExperimentParams& DecoderExperimentParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecoderExperimentParams_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void DecoderExperimentParams::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.DecoderExperimentParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enable_simplified_ranking_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecoderExperimentParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_simplified_ranking = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_simplified_ranking(&has_bits);
          enable_simplified_ranking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DecoderExperimentParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.DecoderExperimentParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_simplified_ranking = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_simplified_ranking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.DecoderExperimentParams)
  return target;
}

size_t DecoderExperimentParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.DecoderExperimentParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable_simplified_ranking = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecoderExperimentParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.DecoderExperimentParams)
  GOOGLE_DCHECK_NE(&from, this);
  const DecoderExperimentParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DecoderExperimentParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.DecoderExperimentParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.DecoderExperimentParams)
    MergeFrom(*source);
  }
}

void DecoderExperimentParams::MergeFrom(const DecoderExperimentParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.DecoderExperimentParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable_simplified_ranking()) {
    _internal_set_enable_simplified_ranking(from._internal_enable_simplified_ranking());
  }
}

void DecoderExperimentParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.DecoderExperimentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecoderExperimentParams::CopyFrom(const DecoderExperimentParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.DecoderExperimentParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderExperimentParams::IsInitialized() const {
  return true;
}

void DecoderExperimentParams::InternalSwap(DecoderExperimentParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enable_simplified_ranking_, other->enable_simplified_ranking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecoderExperimentParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::mozc::commands::_Request_default_instance_._instance.get_mutable()->decoder_experiment_params_ = const_cast< ::mozc::commands::DecoderExperimentParams*>(
      ::mozc::commands::DecoderExperimentParams::internal_default_instance());
}
class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_zero_query_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mixed_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_special_romanji_table(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_space_on_alphanumeric(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keyboard_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_update_input_mode_from_surrounding_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_kana_modifier_insensitive_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_auto_partial_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_available_emoji_carrier(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_emoji_rewriter_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_crossing_edge_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_aware_input(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_candidate_page_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_candidates_size_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mozc::commands::DecoderExperimentParams& decoder_experiment_params(const Request* msg);
  static void set_has_decoder_experiment_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mozc::commands::DecoderExperimentParams&
Request::_Internal::decoder_experiment_params(const Request* msg) {
  return *msg->decoder_experiment_params_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_keyboard_name()) {
    keyboard_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_keyboard_name(),
      GetArena());
  }
  if (from._internal_has_decoder_experiment_params()) {
    decoder_experiment_params_ = new ::mozc::commands::DecoderExperimentParams(*from.decoder_experiment_params_);
  } else {
    decoder_experiment_params_ = nullptr;
  }
  ::memcpy(&special_romanji_table_, &from.special_romanji_table_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_page_size_) -
    reinterpret_cast<char*>(&special_romanji_table_)) + sizeof(candidate_page_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_protocol_2fcommands_2eproto.base);
  keyboard_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&decoder_experiment_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidates_size_limit_) -
      reinterpret_cast<char*>(&decoder_experiment_params_)) + sizeof(candidates_size_limit_));
  update_input_mode_from_surrounding_text_ = true;
  available_emoji_carrier_ = 1;
  emoji_rewriter_capability_ = 1;
  candidate_page_size_ = 9;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mozc.commands.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  keyboard_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decoder_experiment_params_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      keyboard_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(decoder_experiment_params_ != nullptr);
      decoder_experiment_params_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&special_romanji_table_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&space_on_alphanumeric_) -
        reinterpret_cast<char*>(&special_romanji_table_)) + sizeof(space_on_alphanumeric_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&crossing_edge_behavior_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&candidates_size_limit_) -
        reinterpret_cast<char*>(&crossing_edge_behavior_)) + sizeof(candidates_size_limit_));
    update_input_mode_from_surrounding_text_ = true;
    available_emoji_carrier_ = 1;
    emoji_rewriter_capability_ = 1;
    candidate_page_size_ = 9;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool zero_query_suggestion = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_zero_query_suggestion(&has_bits);
          zero_query_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mixed_conversion = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mixed_conversion(&has_bits);
          mixed_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Request_SpecialRomanjiTable_IsValid(val))) {
            _internal_set_special_romanji_table(static_cast<::mozc::commands::Request_SpecialRomanjiTable>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Request_SpaceOnAlphanumeric_IsValid(val))) {
            _internal_set_space_on_alphanumeric(static_cast<::mozc::commands::Request_SpaceOnAlphanumeric>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string keyboard_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_keyboard_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Request.keyboard_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_update_input_mode_from_surrounding_text(&has_bits);
          update_input_mode_from_surrounding_text_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_kana_modifier_insensitive_conversion(&has_bits);
          kana_modifier_insensitive_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_partial_suggestion = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_auto_partial_suggestion(&has_bits);
          auto_partial_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 available_emoji_carrier = 11 [default = 1];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_available_emoji_carrier(&has_bits);
          available_emoji_carrier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 emoji_rewriter_capability = 12 [default = 1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_emoji_rewriter_capability(&has_bits);
          emoji_rewriter_capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Request_CrossingEdgeBehavior_IsValid(val))) {
            _internal_set_crossing_edge_behavior(static_cast<::mozc::commands::Request_CrossingEdgeBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Request_LanguageAwareInputBehavior_IsValid(val))) {
            _internal_set_language_aware_input(static_cast<::mozc::commands::Request_LanguageAwareInputBehavior>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 candidate_page_size = 15 [default = 9];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_candidate_page_size(&has_bits);
          candidate_page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 candidates_size_limit = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_candidates_size_limit(&has_bits);
          candidates_size_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.DecoderExperimentParams decoder_experiment_params = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_decoder_experiment_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool zero_query_suggestion = 1 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_zero_query_suggestion(), target);
  }

  // optional bool mixed_conversion = 2 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mixed_conversion(), target);
  }

  // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_special_romanji_table(), target);
  }

  // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_space_on_alphanumeric(), target);
  }

  // optional string keyboard_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_keyboard_name().data(), static_cast<int>(this->_internal_keyboard_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Request.keyboard_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_keyboard_name(), target);
  }

  // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_update_input_mode_from_surrounding_text(), target);
  }

  // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_kana_modifier_insensitive_conversion(), target);
  }

  // optional bool auto_partial_suggestion = 10 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_auto_partial_suggestion(), target);
  }

  // optional int32 available_emoji_carrier = 11 [default = 1];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_available_emoji_carrier(), target);
  }

  // optional int32 emoji_rewriter_capability = 12 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_emoji_rewriter_capability(), target);
  }

  // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_crossing_edge_behavior(), target);
  }

  // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_language_aware_input(), target);
  }

  // optional int32 candidate_page_size = 15 [default = 9];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_candidate_page_size(), target);
  }

  // optional int32 candidates_size_limit = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_candidates_size_limit(), target);
  }

  // optional .mozc.commands.DecoderExperimentParams decoder_experiment_params = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::decoder_experiment_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string keyboard_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_keyboard_name());
    }

    // optional .mozc.commands.DecoderExperimentParams decoder_experiment_params = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decoder_experiment_params_);
    }

    // optional .mozc.commands.Request.SpecialRomanjiTable special_romanji_table = 4 [default = DEFAULT_TABLE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_romanji_table());
    }

    // optional bool zero_query_suggestion = 1 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool mixed_conversion = 2 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool kana_modifier_insensitive_conversion = 9 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool auto_partial_suggestion = 10 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.Request.SpaceOnAlphanumeric space_on_alphanumeric = 6 [default = SPACE_OR_CONVERT_KEEPING_COMPOSITION];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_space_on_alphanumeric());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .mozc.commands.Request.CrossingEdgeBehavior crossing_edge_behavior = 13 [default = DO_NOTHING];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crossing_edge_behavior());
    }

    // optional .mozc.commands.Request.LanguageAwareInputBehavior language_aware_input = 14 [default = DEFAULT_LANGUAGE_AWARE_BEHAVIOR];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language_aware_input());
    }

    // optional int32 candidates_size_limit = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_candidates_size_limit());
    }

    // optional bool update_input_mode_from_surrounding_text = 8 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 available_emoji_carrier = 11 [default = 1];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_available_emoji_carrier());
    }

    // optional int32 emoji_rewriter_capability = 12 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_emoji_rewriter_capability());
    }

    // optional int32 candidate_page_size = 15 [default = 9];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_candidate_page_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_keyboard_name(from._internal_keyboard_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_decoder_experiment_params()->::mozc::commands::DecoderExperimentParams::MergeFrom(from._internal_decoder_experiment_params());
    }
    if (cached_has_bits & 0x00000004u) {
      special_romanji_table_ = from.special_romanji_table_;
    }
    if (cached_has_bits & 0x00000008u) {
      zero_query_suggestion_ = from.zero_query_suggestion_;
    }
    if (cached_has_bits & 0x00000010u) {
      mixed_conversion_ = from.mixed_conversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      kana_modifier_insensitive_conversion_ = from.kana_modifier_insensitive_conversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      auto_partial_suggestion_ = from.auto_partial_suggestion_;
    }
    if (cached_has_bits & 0x00000080u) {
      space_on_alphanumeric_ = from.space_on_alphanumeric_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      crossing_edge_behavior_ = from.crossing_edge_behavior_;
    }
    if (cached_has_bits & 0x00000200u) {
      language_aware_input_ = from.language_aware_input_;
    }
    if (cached_has_bits & 0x00000400u) {
      candidates_size_limit_ = from.candidates_size_limit_;
    }
    if (cached_has_bits & 0x00000800u) {
      update_input_mode_from_surrounding_text_ = from.update_input_mode_from_surrounding_text_;
    }
    if (cached_has_bits & 0x00001000u) {
      available_emoji_carrier_ = from.available_emoji_carrier_;
    }
    if (cached_has_bits & 0x00002000u) {
      emoji_rewriter_capability_ = from.emoji_rewriter_capability_;
    }
    if (cached_has_bits & 0x00004000u) {
      candidate_page_size_ = from.candidate_page_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keyboard_name_.Swap(&other->keyboard_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, candidates_size_limit_)
      + sizeof(Request::candidates_size_limit_)
      - PROTOBUF_FIELD_OFFSET(Request, decoder_experiment_params_)>(
          reinterpret_cast<char*>(&decoder_experiment_params_),
          reinterpret_cast<char*>(&other->decoder_experiment_params_));
  swap(update_input_mode_from_surrounding_text_, other->update_input_mode_from_surrounding_text_);
  swap(available_emoji_carrier_, other->available_emoji_carrier_);
  swap(emoji_rewriter_capability_, other->emoji_rewriter_capability_);
  swap(candidate_page_size_, other->candidate_page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationInfo::InitAsDefaultInstance() {
}
class ApplicationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplicationInfo>()._has_bits_);
  static void set_has_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timezone_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ApplicationInfo::ApplicationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.ApplicationInfo)
}
ApplicationInfo::ApplicationInfo(const ApplicationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&process_id_, &from.process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timezone_offset_) -
    reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.ApplicationInfo)
}

void ApplicationInfo::SharedCtor() {
  ::memset(&process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_offset_) -
      reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
}

ApplicationInfo::~ApplicationInfo() {
  // @@protoc_insertion_point(destructor:mozc.commands.ApplicationInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApplicationInfo::ArenaDtor(void* object) {
  ApplicationInfo* _this = reinterpret_cast< ApplicationInfo* >(object);
  (void)_this;
}
void ApplicationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationInfo& ApplicationInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationInfo_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void ApplicationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.ApplicationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&process_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timezone_offset_) -
        reinterpret_cast<char*>(&process_id_)) + sizeof(timezone_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 process_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_process_id(&has_bits);
          process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 thread_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_thread_id(&has_bits);
          thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 timezone_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timezone_offset(&has_bits);
          timezone_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.ApplicationInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 process_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_process_id(), target);
  }

  // optional uint32 thread_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_thread_id(), target);
  }

  // optional int32 timezone_offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timezone_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.ApplicationInfo)
  return target;
}

size_t ApplicationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.ApplicationInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 process_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_process_id());
    }

    // optional uint32 thread_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thread_id());
    }

    // optional int32 timezone_offset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_timezone_offset());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.ApplicationInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.ApplicationInfo)
    MergeFrom(*source);
  }
}

void ApplicationInfo::MergeFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.ApplicationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      process_id_ = from.process_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      thread_id_ = from.thread_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timezone_offset_ = from.timezone_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApplicationInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationInfo::CopyFrom(const ApplicationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.ApplicationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationInfo::IsInitialized() const {
  return true;
}

void ApplicationInfo::InternalSwap(ApplicationInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplicationInfo, timezone_offset_)
      + sizeof(ApplicationInfo::timezone_offset_)
      - PROTOBUF_FIELD_OFFSET(ApplicationInfo, process_id_)>(
          reinterpret_cast<char*>(&process_id_),
          reinterpret_cast<char*>(&other->process_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input_TouchPosition::InitAsDefaultInstance() {
}
class Input_TouchPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<Input_TouchPosition>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Input_TouchPosition::Input_TouchPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Input.TouchPosition)
}
Input_TouchPosition::Input_TouchPosition(const Input_TouchPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&x_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchPosition)
}

void Input_TouchPosition::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&x_)) + sizeof(timestamp_));
  action_ = 1;
}

Input_TouchPosition::~Input_TouchPosition() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input_TouchPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Input_TouchPosition::ArenaDtor(void* object) {
  Input_TouchPosition* _this = reinterpret_cast< Input_TouchPosition* >(object);
  (void)_this;
}
void Input_TouchPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_TouchPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_TouchPosition& Input_TouchPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_TouchPosition_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Input_TouchPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&x_)) + sizeof(timestamp_));
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input_TouchPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozc.commands.Input.TouchAction action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Input_TouchAction_IsValid(val))) {
            _internal_set_action(static_cast<::mozc::commands::Input_TouchAction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_TouchPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.Input.TouchAction action = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // optional int64 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchPosition)
  return target;
}

size_t Input_TouchPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int64 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_timestamp());
    }

    // optional .mozc.commands.Input.TouchAction action = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_TouchPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_TouchPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_TouchPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchPosition)
    MergeFrom(*source);
  }
}

void Input_TouchPosition::MergeFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input_TouchPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchPosition::CopyFrom(const Input_TouchPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchPosition::IsInitialized() const {
  return true;
}

void Input_TouchPosition::InternalSwap(Input_TouchPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input_TouchPosition, timestamp_)
      + sizeof(Input_TouchPosition::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Input_TouchPosition, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_TouchPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input_TouchEvent::InitAsDefaultInstance() {
}
class Input_TouchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<Input_TouchEvent>()._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Input_TouchEvent::Input_TouchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stroke_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Input.TouchEvent)
}
Input_TouchEvent::Input_TouchEvent(const Input_TouchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stroke_(from.stroke_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_id_ = from.source_id_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input.TouchEvent)
}

void Input_TouchEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_TouchEvent_protocol_2fcommands_2eproto.base);
  source_id_ = 0u;
}

Input_TouchEvent::~Input_TouchEvent() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input.TouchEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input_TouchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Input_TouchEvent::ArenaDtor(void* object) {
  Input_TouchEvent* _this = reinterpret_cast< Input_TouchEvent* >(object);
  (void)_this;
}
void Input_TouchEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_TouchEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_TouchEvent& Input_TouchEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_TouchEvent_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Input_TouchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stroke_.Clear();
  source_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input_TouchEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.Input.TouchPosition stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stroke(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_TouchEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input.TouchEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_id(), target);
  }

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stroke_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stroke(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input.TouchEvent)
  return target;
}

size_t Input_TouchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input.TouchEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.Input.TouchPosition stroke = 2;
  total_size += 1UL * this->_internal_stroke_size();
  for (const auto& msg : this->stroke_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 source_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_source_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_TouchEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_TouchEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_TouchEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input.TouchEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input.TouchEvent)
    MergeFrom(*source);
  }
}

void Input_TouchEvent::MergeFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input.TouchEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stroke_.MergeFrom(from.stroke_);
  if (from._internal_has_source_id()) {
    _internal_set_source_id(from._internal_source_id());
  }
}

void Input_TouchEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_TouchEvent::CopyFrom(const Input_TouchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input.TouchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_TouchEvent::IsInitialized() const {
  return true;
}

void Input_TouchEvent::InternalSwap(Input_TouchEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stroke_.InternalSwap(&other->stroke_);
  swap(source_id_, other->source_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_TouchEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->key_ = const_cast< ::mozc::commands::KeyEvent*>(
      ::mozc::commands::KeyEvent::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->command_ = const_cast< ::mozc::commands::SessionCommand*>(
      ::mozc::commands::SessionCommand::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->config_ = const_cast< ::mozc::config::Config*>(
      ::mozc::config::Config::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->context_ = const_cast< ::mozc::commands::Context*>(
      ::mozc::commands::Context::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->capability_ = const_cast< ::mozc::commands::Capability*>(
      ::mozc::commands::Capability::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->application_info_ = const_cast< ::mozc::commands::ApplicationInfo*>(
      ::mozc::commands::ApplicationInfo::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->request_ = const_cast< ::mozc::commands::Request*>(
      ::mozc::commands::Request::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(
      ::mozc::commands::GenericStorageEntry::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->user_dictionary_command_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommand*>(
      ::mozc::user_dictionary::UserDictionaryCommand::internal_default_instance());
  ::mozc::commands::_Input_default_instance_._instance.get_mutable()->engine_reload_request_ = const_cast< ::mozc::EngineReloadRequest*>(
      ::mozc::EngineReloadRequest::internal_default_instance());
}
class Input::_Internal {
 public:
  using HasBits = decltype(std::declval<Input>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mozc::commands::KeyEvent& key(const Input* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::commands::SessionCommand& command(const Input* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::config::Config& config(const Input* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozc::commands::Context& context(const Input* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::commands::Capability& capability(const Input* msg);
  static void set_has_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mozc::commands::ApplicationInfo& application_info(const Input* msg);
  static void set_has_application_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozc::commands::Request& request(const Input* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozc::commands::GenericStorageEntry& storage_entry(const Input* msg);
  static void set_has_storage_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mozc::user_dictionary::UserDictionaryCommand& user_dictionary_command(const Input* msg);
  static void set_has_user_dictionary_command(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_request_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::mozc::EngineReloadRequest& engine_reload_request(const Input* msg);
  static void set_has_engine_reload_request(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000800) ^ 0x00000800) != 0;
  }
};

const ::mozc::commands::KeyEvent&
Input::_Internal::key(const Input* msg) {
  return *msg->key_;
}
const ::mozc::commands::SessionCommand&
Input::_Internal::command(const Input* msg) {
  return *msg->command_;
}
const ::mozc::config::Config&
Input::_Internal::config(const Input* msg) {
  return *msg->config_;
}
const ::mozc::commands::Context&
Input::_Internal::context(const Input* msg) {
  return *msg->context_;
}
const ::mozc::commands::Capability&
Input::_Internal::capability(const Input* msg) {
  return *msg->capability_;
}
const ::mozc::commands::ApplicationInfo&
Input::_Internal::application_info(const Input* msg) {
  return *msg->application_info_;
}
const ::mozc::commands::Request&
Input::_Internal::request(const Input* msg) {
  return *msg->request_;
}
const ::mozc::commands::GenericStorageEntry&
Input::_Internal::storage_entry(const Input* msg) {
  return *msg->storage_entry_;
}
const ::mozc::user_dictionary::UserDictionaryCommand&
Input::_Internal::user_dictionary_command(const Input* msg) {
  return *msg->user_dictionary_command_;
}
const ::mozc::EngineReloadRequest&
Input::_Internal::engine_reload_request(const Input* msg) {
  return *msg->engine_reload_request_;
}
void Input::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Input::clear_user_dictionary_command() {
  if (user_dictionary_command_ != nullptr) user_dictionary_command_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Input::clear_engine_reload_request() {
  if (engine_reload_request_ != nullptr) engine_reload_request_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  touch_events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      touch_events_(from.touch_events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    key_ = new ::mozc::commands::KeyEvent(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::mozc::commands::SessionCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::mozc::config::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::mozc::commands::Context(*from.context_);
  } else {
    context_ = nullptr;
  }
  if (from._internal_has_capability()) {
    capability_ = new ::mozc::commands::Capability(*from.capability_);
  } else {
    capability_ = nullptr;
  }
  if (from._internal_has_application_info()) {
    application_info_ = new ::mozc::commands::ApplicationInfo(*from.application_info_);
  } else {
    application_info_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::mozc::commands::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_storage_entry()) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry(*from.storage_entry_);
  } else {
    storage_entry_ = nullptr;
  }
  if (from._internal_has_user_dictionary_command()) {
    user_dictionary_command_ = new ::mozc::user_dictionary::UserDictionaryCommand(*from.user_dictionary_command_);
  } else {
    user_dictionary_command_ = nullptr;
  }
  if (from._internal_has_engine_reload_request()) {
    engine_reload_request_ = new ::mozc::EngineReloadRequest(*from.engine_reload_request_);
  } else {
    engine_reload_request_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_suggestion_) -
    reinterpret_cast<char*>(&id_)) + sizeof(request_suggestion_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_protocol_2fcommands_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&key_)) + sizeof(type_));
  request_suggestion_ = true;
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:mozc.commands.Input)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete context_;
  if (this != internal_default_instance()) delete capability_;
  if (this != internal_default_instance()) delete application_info_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete storage_entry_;
  if (this != internal_default_instance()) delete user_dictionary_command_;
  if (this != internal_default_instance()) delete engine_reload_request_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  touch_events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(command_ != nullptr);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(context_ != nullptr);
      context_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(capability_ != nullptr);
      capability_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(application_info_ != nullptr);
      application_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(storage_entry_ != nullptr);
      storage_entry_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(user_dictionary_command_ != nullptr);
      user_dictionary_command_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(engine_reload_request_ != nullptr);
      engine_reload_request_->Clear();
    }
  }
  if (cached_has_bits & 0x00001c00u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
    request_suggestion_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.commands.Input.CommandType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Input_CommandType_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::commands::Input_CommandType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.KeyEvent key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.SessionCommand command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Context context = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Capability capability = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.ApplicationInfo application_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_application_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Request request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_touch_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_dictionary_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool request_suggestion = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_request_suggestion(&has_bits);
          request_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.EngineReloadRequest engine_reload_request = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_engine_reload_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input.CommandType type = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint64 id = 2 [jstype = JS_STRING];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // optional .mozc.commands.KeyEvent key = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::key(this), target, stream);
  }

  // optional .mozc.commands.SessionCommand command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::command(this), target, stream);
  }

  // optional .mozc.config.Config config = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::config(this), target, stream);
  }

  // optional .mozc.commands.Context context = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::context(this), target, stream);
  }

  // optional .mozc.commands.Capability capability = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::capability(this), target, stream);
  }

  // optional .mozc.commands.ApplicationInfo application_info = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::application_info(this), target, stream);
  }

  // optional .mozc.commands.Request request = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::request(this), target, stream);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::storage_entry(this), target, stream);
  }

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_touch_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_touch_events(i), target, stream);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::user_dictionary_command(this), target, stream);
  }

  // optional bool request_suggestion = 14 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_request_suggestion(), target);
  }

  // optional .mozc.EngineReloadRequest engine_reload_request = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::engine_reload_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Input)
  size_t total_size = 0;

  // required .mozc.commands.Input.CommandType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.Input.TouchEvent touch_events = 12;
  total_size += 1UL * this->_internal_touch_events_size();
  for (const auto& msg : this->touch_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .mozc.commands.KeyEvent key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional .mozc.commands.SessionCommand command = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .mozc.config.Config config = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .mozc.commands.Context context = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_);
    }

    // optional .mozc.commands.Capability capability = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *capability_);
    }

    // optional .mozc.commands.ApplicationInfo application_info = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *application_info_);
    }

    // optional .mozc.commands.Request request = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_entry_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .mozc.user_dictionary.UserDictionaryCommand user_dictionary_command = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_dictionary_command_);
    }

    // optional .mozc.EngineReloadRequest engine_reload_request = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engine_reload_request_);
    }

    // optional uint64 id = 2 [jstype = JS_STRING];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

  }
  // optional bool request_suggestion = 14 [default = true];
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  touch_events_.MergeFrom(from.touch_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_command()->::mozc::commands::SessionCommand::MergeFrom(from._internal_command());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_config()->::mozc::config::Config::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_context()->::mozc::commands::Context::MergeFrom(from._internal_context());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_capability()->::mozc::commands::Capability::MergeFrom(from._internal_capability());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_application_info()->::mozc::commands::ApplicationInfo::MergeFrom(from._internal_application_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_request()->::mozc::commands::Request::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from._internal_storage_entry());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_user_dictionary_command()->::mozc::user_dictionary::UserDictionaryCommand::MergeFrom(from._internal_user_dictionary_command());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_engine_reload_request()->::mozc::EngineReloadRequest::MergeFrom(from._internal_engine_reload_request());
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      request_suggestion_ = from.request_suggestion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_command()) {
    if (!command_->IsInitialized()) return false;
  }
  if (_internal_has_user_dictionary_command()) {
    if (!user_dictionary_command_->IsInitialized()) return false;
  }
  if (_internal_has_engine_reload_request()) {
    if (!engine_reload_request_->IsInitialized()) return false;
  }
  return true;
}

void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  touch_events_.InternalSwap(&other->touch_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Input, type_)
      + sizeof(Input::type_)
      - PROTOBUF_FIELD_OFFSET(Input, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
  swap(request_suggestion_, other->request_suggestion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Result::InitAsDefaultInstance() {
}
class Result::_Internal {
 public:
  using HasBits = decltype(std::declval<Result>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cursor_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursor_offset_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Result)
}

void Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Result_protocol_2fcommands_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_offset_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:mozc.commands.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Result_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cursor_offset_) -
        reinterpret_cast<char*>(&type_)) + sizeof(cursor_offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.commands.Result.ResultType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Result_ResultType_IsValid(val))) {
            _internal_set_type(static_cast<::mozc::commands::Result_ResultType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Result.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Result.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cursor_offset = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cursor_offset(&has_bits);
          cursor_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Result.ResultType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional string key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Result.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cursor_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Result)
  return target;
}

size_t Result::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Result)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_type()) {
    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Result)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .mozc.commands.Result.ResultType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // optional int32 cursor_offset = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cursor_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      cursor_offset_ = from.cursor_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Result, cursor_offset_)
      + sizeof(Result::cursor_offset_)
      - PROTOBUF_FIELD_OFFSET(Result, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Preedit_Segment::InitAsDefaultInstance() {
}
class Preedit_Segment::_Internal {
 public:
  using HasBits = decltype(std::declval<Preedit_Segment>()._has_bits_);
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

Preedit_Segment::Preedit_Segment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Preedit.Segment)
}
Preedit_Segment::Preedit_Segment(const Preedit_Segment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  ::memcpy(&annotation_, &from.annotation_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_length_) -
    reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit.Segment)
}

void Preedit_Segment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Preedit_Segment_protocol_2fcommands_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_length_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
}

Preedit_Segment::~Preedit_Segment() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit.Segment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Preedit_Segment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Preedit_Segment::ArenaDtor(void* object) {
  Preedit_Segment* _this = reinterpret_cast< Preedit_Segment* >(object);
  (void)_this;
}
void Preedit_Segment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit_Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Preedit_Segment& Preedit_Segment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Preedit_Segment_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Preedit_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&annotation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_length_) -
        reinterpret_cast<char*>(&annotation_)) + sizeof(value_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preedit_Segment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Preedit_Segment_Annotation_IsValid(val))) {
            _internal_set_annotation(static_cast<::mozc::commands::Preedit_Segment_Annotation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Preedit.Segment.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 value_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_value_length(&has_bits);
          value_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Preedit.Segment.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit_Segment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit.Segment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_annotation(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // required uint32 value_length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_value_length(), target);
  }

  // optional string key = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Preedit.Segment.key");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit.Segment)
  return target;
}

size_t Preedit_Segment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Preedit.Segment)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_annotation()) {
    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_annotation());
  }

  if (_internal_has_value_length()) {
    // required uint32 value_length = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_length());
  }

  return total_size;
}
size_t Preedit_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit.Segment)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .mozc.commands.Preedit.Segment.Annotation annotation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_annotation());

    // required uint32 value_length = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit_Segment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Preedit_Segment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Preedit_Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit.Segment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit.Segment)
    MergeFrom(*source);
  }
}

void Preedit_Segment::MergeFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000004u) {
      annotation_ = from.annotation_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_length_ = from.value_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Preedit_Segment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit_Segment::CopyFrom(const Preedit_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit_Segment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Preedit_Segment::InternalSwap(Preedit_Segment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Preedit_Segment, value_length_)
      + sizeof(Preedit_Segment::value_length_)
      - PROTOBUF_FIELD_OFFSET(Preedit_Segment, annotation_)>(
          reinterpret_cast<char*>(&annotation_),
          reinterpret_cast<char*>(&other->annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Preedit_Segment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Preedit::InitAsDefaultInstance() {
}
class Preedit::_Internal {
 public:
  using HasBits = decltype(std::declval<Preedit>()._has_bits_);
  static void set_has_cursor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_highlighted_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_toggleable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Preedit::Preedit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  segment_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Preedit)
}
Preedit::Preedit(const Preedit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cursor_, &from.cursor_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_toggleable_) -
    reinterpret_cast<char*>(&cursor_)) + sizeof(is_toggleable_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Preedit)
}

void Preedit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Preedit_protocol_2fcommands_2eproto.base);
  ::memset(&cursor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_toggleable_) -
      reinterpret_cast<char*>(&cursor_)) + sizeof(is_toggleable_));
}

Preedit::~Preedit() {
  // @@protoc_insertion_point(destructor:mozc.commands.Preedit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Preedit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Preedit::ArenaDtor(void* object) {
  Preedit* _this = reinterpret_cast< Preedit* >(object);
  (void)_this;
}
void Preedit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Preedit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Preedit& Preedit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Preedit_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Preedit::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cursor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_toggleable_) -
        reinterpret_cast<char*>(&cursor_)) + sizeof(is_toggleable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Preedit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 cursor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cursor(&has_bits);
          cursor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated group Segment = 2 { ... };
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 19)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_segment(), ptr, 19);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<19>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 highlighted_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_highlighted_position(&has_bits);
          highlighted_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_toggleable = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_toggleable(&has_bits);
          is_toggleable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Preedit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Preedit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cursor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cursor(), target);
  }

  // repeated group Segment = 2 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_segment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(2, this->_internal_segment(i), target, stream);
  }

  // optional uint32 highlighted_position = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_highlighted_position(), target);
  }

  // optional bool is_toggleable = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_toggleable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Preedit)
  return target;
}

size_t Preedit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Preedit)
  size_t total_size = 0;

  // required uint32 cursor = 1;
  if (_internal_has_cursor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursor());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Segment = 2 { ... };
  total_size += 2UL * this->_internal_segment_size();
  for (const auto& msg : this->segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 highlighted_position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_highlighted_position());
    }

    // optional bool is_toggleable = 4 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Preedit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  const Preedit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Preedit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Preedit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Preedit)
    MergeFrom(*source);
  }
}

void Preedit::MergeFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Preedit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cursor_ = from.cursor_;
    }
    if (cached_has_bits & 0x00000002u) {
      highlighted_position_ = from.highlighted_position_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_toggleable_ = from.is_toggleable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Preedit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preedit::CopyFrom(const Preedit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Preedit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preedit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(segment_)) return false;
  return true;
}

void Preedit::InternalSwap(Preedit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  segment_.InternalSwap(&other->segment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Preedit, is_toggleable_)
      + sizeof(Preedit::is_toggleable_)
      - PROTOBUF_FIELD_OFFSET(Preedit, cursor_)>(
          reinterpret_cast<char*>(&cursor_),
          reinterpret_cast<char*>(&other->cursor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Preedit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._has_bits_);
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_comeback_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&activated_, &from.activated_,
    static_cast<size_t>(reinterpret_cast<char*>(&comeback_mode_) -
    reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Status)
}

void Status::SharedCtor() {
  ::memset(&activated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comeback_mode_) -
      reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mozc.commands.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&activated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&comeback_mode_) -
        reinterpret_cast<char*>(&activated_)) + sizeof(comeback_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool activated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activated(&has_bits);
          activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CompositionMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CompositionMode_IsValid(val))) {
            _internal_set_mode(static_cast<::mozc::commands::CompositionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CompositionMode comeback_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CompositionMode_IsValid(val))) {
            _internal_set_comeback_mode(static_cast<::mozc::commands::CompositionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool activated = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_activated(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional .mozc.commands.CompositionMode comeback_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_comeback_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool activated = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional .mozc.commands.CompositionMode comeback_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comeback_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activated_ = from.activated_;
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      comeback_mode_ = from.comeback_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Status, comeback_mode_)
      + sizeof(Status::comeback_mode_)
      - PROTOBUF_FIELD_OFFSET(Status, activated_)>(
          reinterpret_cast<char*>(&activated_),
          reinterpret_cast<char*>(&other->activated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletionRange::InitAsDefaultInstance() {
}
class DeletionRange::_Internal {
 public:
  using HasBits = decltype(std::declval<DeletionRange>()._has_bits_);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeletionRange::DeletionRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.DeletionRange)
}
DeletionRange::DeletionRange(const DeletionRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.DeletionRange)
}

void DeletionRange::SharedCtor() {
  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

DeletionRange::~DeletionRange() {
  // @@protoc_insertion_point(destructor:mozc.commands.DeletionRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletionRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeletionRange::ArenaDtor(void* object) {
  DeletionRange* _this = reinterpret_cast< DeletionRange* >(object);
  (void)_this;
}
void DeletionRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletionRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletionRange& DeletionRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletionRange_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void DeletionRange::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.DeletionRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletionRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletionRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.DeletionRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // optional int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.DeletionRange)
  return target;
}

size_t DeletionRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.DeletionRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_offset());
    }

    // optional int32 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletionRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.DeletionRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletionRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletionRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.DeletionRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.DeletionRange)
    MergeFrom(*source);
  }
}

void DeletionRange::MergeFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.DeletionRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeletionRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletionRange::CopyFrom(const DeletionRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.DeletionRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletionRange::IsInitialized() const {
  return true;
}

void DeletionRange::InternalSwap(DeletionRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeletionRange, length_)
      + sizeof(DeletionRange::length_)
      - PROTOBUF_FIELD_OFFSET(DeletionRange, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletionRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Output_Callback::InitAsDefaultInstance() {
  ::mozc::commands::_Output_Callback_default_instance_._instance.get_mutable()->session_command_ = const_cast< ::mozc::commands::SessionCommand*>(
      ::mozc::commands::SessionCommand::internal_default_instance());
}
class Output_Callback::_Internal {
 public:
  using HasBits = decltype(std::declval<Output_Callback>()._has_bits_);
  static const ::mozc::commands::SessionCommand& session_command(const Output_Callback* msg);
  static void set_has_session_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delay_millisec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mozc::commands::SessionCommand&
Output_Callback::_Internal::session_command(const Output_Callback* msg) {
  return *msg->session_command_;
}
Output_Callback::Output_Callback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Output.Callback)
}
Output_Callback::Output_Callback(const Output_Callback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session_command()) {
    session_command_ = new ::mozc::commands::SessionCommand(*from.session_command_);
  } else {
    session_command_ = nullptr;
  }
  delay_millisec_ = from.delay_millisec_;
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output.Callback)
}

void Output_Callback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Output_Callback_protocol_2fcommands_2eproto.base);
  ::memset(&session_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_millisec_) -
      reinterpret_cast<char*>(&session_command_)) + sizeof(delay_millisec_));
}

Output_Callback::~Output_Callback() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output.Callback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Output_Callback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete session_command_;
}

void Output_Callback::ArenaDtor(void* object) {
  Output_Callback* _this = reinterpret_cast< Output_Callback* >(object);
  (void)_this;
}
void Output_Callback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output_Callback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output_Callback& Output_Callback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Output_Callback_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Output_Callback::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output.Callback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(session_command_ != nullptr);
    session_command_->Clear();
  }
  delay_millisec_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output_Callback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozc.commands.SessionCommand session_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay_millisec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delay_millisec(&has_bits);
          delay_millisec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output_Callback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output.Callback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.commands.SessionCommand session_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session_command(this), target, stream);
  }

  // optional uint32 delay_millisec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_delay_millisec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output.Callback)
  return target;
}

size_t Output_Callback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output.Callback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .mozc.commands.SessionCommand session_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *session_command_);
    }

    // optional uint32 delay_millisec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay_millisec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output_Callback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output.Callback)
  GOOGLE_DCHECK_NE(&from, this);
  const Output_Callback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output_Callback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output.Callback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output.Callback)
    MergeFrom(*source);
  }
}

void Output_Callback::MergeFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output.Callback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_session_command()->::mozc::commands::SessionCommand::MergeFrom(from._internal_session_command());
    }
    if (cached_has_bits & 0x00000002u) {
      delay_millisec_ = from.delay_millisec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Output_Callback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output_Callback::CopyFrom(const Output_Callback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output.Callback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output_Callback::IsInitialized() const {
  if (_internal_has_session_command()) {
    if (!session_command_->IsInitialized()) return false;
  }
  return true;
}

void Output_Callback::InternalSwap(Output_Callback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output_Callback, delay_millisec_)
      + sizeof(Output_Callback::delay_millisec_)
      - PROTOBUF_FIELD_OFFSET(Output_Callback, session_command_)>(
          reinterpret_cast<char*>(&session_command_),
          reinterpret_cast<char*>(&other->session_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output_Callback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Output::InitAsDefaultInstance() {
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->result_ = const_cast< ::mozc::commands::Result*>(
      ::mozc::commands::Result::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->preedit_ = const_cast< ::mozc::commands::Preedit*>(
      ::mozc::commands::Preedit::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->candidates_ = const_cast< ::mozc::commands::Candidates*>(
      ::mozc::commands::Candidates::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->key_ = const_cast< ::mozc::commands::KeyEvent*>(
      ::mozc::commands::KeyEvent::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->config_ = const_cast< ::mozc::config::Config*>(
      ::mozc::config::Config::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->status_ = const_cast< ::mozc::commands::Status*>(
      ::mozc::commands::Status::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->all_candidate_words_ = const_cast< ::mozc::commands::CandidateList*>(
      ::mozc::commands::CandidateList::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->deletion_range_ = const_cast< ::mozc::commands::DeletionRange*>(
      ::mozc::commands::DeletionRange::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->callback_ = const_cast< ::mozc::commands::Output_Callback*>(
      ::mozc::commands::Output_Callback::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->storage_entry_ = const_cast< ::mozc::commands::GenericStorageEntry*>(
      ::mozc::commands::GenericStorageEntry::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->user_dictionary_command_status_ = const_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus*>(
      ::mozc::user_dictionary::UserDictionaryCommandStatus::internal_default_instance());
  ::mozc::commands::_Output_default_instance_._instance.get_mutable()->engine_reload_response_ = const_cast< ::mozc::EngineReloadResponse*>(
      ::mozc::EngineReloadResponse::internal_default_instance());
}
class Output::_Internal {
 public:
  using HasBits = decltype(std::declval<Output>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_consumed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::mozc::commands::Result& result(const Output* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozc::commands::Preedit& preedit(const Output* msg);
  static void set_has_preedit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozc::commands::Candidates& candidates(const Output* msg);
  static void set_has_candidates(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozc::commands::KeyEvent& key(const Output* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::config::Config& config(const Output* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preedit_method(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::mozc::commands::Status& status(const Output* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozc::commands::CandidateList& all_candidate_words(const Output* msg);
  static void set_has_all_candidate_words(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mozc::commands::DeletionRange& deletion_range(const Output* msg);
  static void set_has_deletion_range(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_launch_tool_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::mozc::commands::Output_Callback& callback(const Output* msg);
  static void set_has_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mozc::commands::GenericStorageEntry& storage_entry(const Output* msg);
  static void set_has_storage_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::mozc::user_dictionary::UserDictionaryCommandStatus& user_dictionary_command_status(const Output* msg);
  static void set_has_user_dictionary_command_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::mozc::EngineReloadResponse& engine_reload_response(const Output* msg);
  static void set_has_engine_reload_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::mozc::commands::Result&
Output::_Internal::result(const Output* msg) {
  return *msg->result_;
}
const ::mozc::commands::Preedit&
Output::_Internal::preedit(const Output* msg) {
  return *msg->preedit_;
}
const ::mozc::commands::Candidates&
Output::_Internal::candidates(const Output* msg) {
  return *msg->candidates_;
}
const ::mozc::commands::KeyEvent&
Output::_Internal::key(const Output* msg) {
  return *msg->key_;
}
const ::mozc::config::Config&
Output::_Internal::config(const Output* msg) {
  return *msg->config_;
}
const ::mozc::commands::Status&
Output::_Internal::status(const Output* msg) {
  return *msg->status_;
}
const ::mozc::commands::CandidateList&
Output::_Internal::all_candidate_words(const Output* msg) {
  return *msg->all_candidate_words_;
}
const ::mozc::commands::DeletionRange&
Output::_Internal::deletion_range(const Output* msg) {
  return *msg->deletion_range_;
}
const ::mozc::commands::Output_Callback&
Output::_Internal::callback(const Output* msg) {
  return *msg->callback_;
}
const ::mozc::commands::GenericStorageEntry&
Output::_Internal::storage_entry(const Output* msg) {
  return *msg->storage_entry_;
}
const ::mozc::user_dictionary::UserDictionaryCommandStatus&
Output::_Internal::user_dictionary_command_status(const Output* msg) {
  return *msg->user_dictionary_command_status_;
}
const ::mozc::EngineReloadResponse&
Output::_Internal::engine_reload_response(const Output* msg) {
  return *msg->engine_reload_response_;
}
void Output::clear_candidates() {
  if (candidates_ != nullptr) candidates_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Output::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Output::clear_all_candidate_words() {
  if (all_candidate_words_ != nullptr) all_candidate_words_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Output::clear_user_dictionary_command_status() {
  if (user_dictionary_command_status_ != nullptr) user_dictionary_command_status_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void Output::clear_engine_reload_response() {
  if (engine_reload_response_ != nullptr) engine_reload_response_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::mozc::commands::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_preedit()) {
    preedit_ = new ::mozc::commands::Preedit(*from.preedit_);
  } else {
    preedit_ = nullptr;
  }
  if (from._internal_has_candidates()) {
    candidates_ = new ::mozc::commands::Candidates(*from.candidates_);
  } else {
    candidates_ = nullptr;
  }
  if (from._internal_has_key()) {
    key_ = new ::mozc::commands::KeyEvent(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::mozc::config::Config(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::mozc::commands::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_all_candidate_words()) {
    all_candidate_words_ = new ::mozc::commands::CandidateList(*from.all_candidate_words_);
  } else {
    all_candidate_words_ = nullptr;
  }
  if (from._internal_has_deletion_range()) {
    deletion_range_ = new ::mozc::commands::DeletionRange(*from.deletion_range_);
  } else {
    deletion_range_ = nullptr;
  }
  if (from._internal_has_callback()) {
    callback_ = new ::mozc::commands::Output_Callback(*from.callback_);
  } else {
    callback_ = nullptr;
  }
  if (from._internal_has_storage_entry()) {
    storage_entry_ = new ::mozc::commands::GenericStorageEntry(*from.storage_entry_);
  } else {
    storage_entry_ = nullptr;
  }
  if (from._internal_has_user_dictionary_command_status()) {
    user_dictionary_command_status_ = new ::mozc::user_dictionary::UserDictionaryCommandStatus(*from.user_dictionary_command_status_);
  } else {
    user_dictionary_command_status_ = nullptr;
  }
  if (from._internal_has_engine_reload_response()) {
    engine_reload_response_ = new ::mozc::EngineReloadResponse(*from.engine_reload_response_);
  } else {
    engine_reload_response_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_tool_mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(launch_tool_mode_));
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Output)
}

void Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Output_protocol_2fcommands_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_tool_mode_) -
      reinterpret_cast<char*>(&result_)) + sizeof(launch_tool_mode_));
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:mozc.commands.Output)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete preedit_;
  if (this != internal_default_instance()) delete candidates_;
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete all_candidate_words_;
  if (this != internal_default_instance()) delete deletion_range_;
  if (this != internal_default_instance()) delete callback_;
  if (this != internal_default_instance()) delete storage_entry_;
  if (this != internal_default_instance()) delete user_dictionary_command_status_;
  if (this != internal_default_instance()) delete engine_reload_response_;
}

void Output::ArenaDtor(void* object) {
  Output* _this = reinterpret_cast< Output* >(object);
  (void)_this;
}
void Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Output& Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Output_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(result_ != nullptr);
      result_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preedit_ != nullptr);
      preedit_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(candidates_ != nullptr);
      candidates_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(all_candidate_words_ != nullptr);
      all_candidate_words_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(deletion_range_ != nullptr);
      deletion_range_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(callback_ != nullptr);
      callback_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(storage_entry_ != nullptr);
      storage_entry_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(user_dictionary_command_status_ != nullptr);
      user_dictionary_command_status_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(engine_reload_response_ != nullptr);
      engine_reload_response_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&consumed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(consumed_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&preedit_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_tool_mode_) -
        reinterpret_cast<char*>(&preedit_method_)) + sizeof(launch_tool_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CompositionMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::CompositionMode_IsValid(val))) {
            _internal_set_mode(static_cast<::mozc::commands::CompositionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool consumed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_consumed(&has_bits);
          consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Result result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Preedit preedit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_preedit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Candidates candidates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.KeyEvent key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.commands.Output.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Output_PreeditMethod_IsValid(val))) {
            _internal_set_preedit_method(static_cast<::mozc::commands::Output_PreeditMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Output_ErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::mozc::commands::Output_ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Status status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.CandidateList all_candidate_words = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_candidate_words(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.DeletionRange deletion_range = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_deletion_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::commands::Output_ToolMode_IsValid(val))) {
            _internal_set_launch_tool_mode(static_cast<::mozc::commands::Output_ToolMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.Output.Callback callback = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_callback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_dictionary_command_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.EngineReloadResponse engine_reload_response = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_engine_reload_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Output::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [jstype = JS_STRING];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional .mozc.commands.CompositionMode mode = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // optional bool consumed = 3;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_consumed(), target);
  }

  // optional .mozc.commands.Result result = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::result(this), target, stream);
  }

  // optional .mozc.commands.Preedit preedit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::preedit(this), target, stream);
  }

  // optional .mozc.commands.Candidates candidates = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::candidates(this), target, stream);
  }

  // optional .mozc.commands.KeyEvent key = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::key(this), target, stream);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.commands.Output.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // optional .mozc.config.Config config = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::config(this), target, stream);
  }

  // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_preedit_method(), target);
  }

  // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_error_code(), target);
  }

  // optional .mozc.commands.Status status = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::status(this), target, stream);
  }

  // optional .mozc.commands.CandidateList all_candidate_words = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::all_candidate_words(this), target, stream);
  }

  // optional .mozc.commands.DeletionRange deletion_range = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::deletion_range(this), target, stream);
  }

  // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_launch_tool_mode(), target);
  }

  // optional .mozc.commands.Output.Callback callback = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::callback(this), target, stream);
  }

  // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::storage_entry(this), target, stream);
  }

  // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::user_dictionary_command_status(this), target, stream);
  }

  // optional .mozc.EngineReloadResponse engine_reload_response = 22;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::engine_reload_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Output)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string url = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .mozc.commands.Result result = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional .mozc.commands.Preedit preedit = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preedit_);
    }

    // optional .mozc.commands.Candidates candidates = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *candidates_);
    }

    // optional .mozc.commands.KeyEvent key = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional .mozc.config.Config config = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional .mozc.commands.Status status = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .mozc.commands.CandidateList all_candidate_words = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *all_candidate_words_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .mozc.commands.DeletionRange deletion_range = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deletion_range_);
    }

    // optional .mozc.commands.Output.Callback callback = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callback_);
    }

    // optional .mozc.commands.GenericStorageEntry storage_entry = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_entry_);
    }

    // optional .mozc.user_dictionary.UserDictionaryCommandStatus user_dictionary_command_status = 21;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_dictionary_command_status_);
    }

    // optional .mozc.EngineReloadResponse engine_reload_response = 22;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *engine_reload_response_);
    }

    // optional uint64 id = 1 [jstype = JS_STRING];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional .mozc.commands.CompositionMode mode = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

    // optional bool consumed = 3;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .mozc.commands.Output.PreeditMethod preedit_method = 10 [default = ASCII];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preedit_method());
    }

    // optional .mozc.commands.Output.ErrorCode error_code = 11 [default = SESSION_SUCCESS];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
    }

    // optional .mozc.commands.Output.ToolMode launch_tool_mode = 17 [default = NO_TOOL];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_launch_tool_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Output)
    MergeFrom(*source);
  }
}

void Output::MergeFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_result()->::mozc::commands::Result::MergeFrom(from._internal_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_preedit()->::mozc::commands::Preedit::MergeFrom(from._internal_preedit());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_candidates()->::mozc::commands::Candidates::MergeFrom(from._internal_candidates());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_key()->::mozc::commands::KeyEvent::MergeFrom(from._internal_key());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_config()->::mozc::config::Config::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_status()->::mozc::commands::Status::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_all_candidate_words()->::mozc::commands::CandidateList::MergeFrom(from._internal_all_candidate_words());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_deletion_range()->::mozc::commands::DeletionRange::MergeFrom(from._internal_deletion_range());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_callback()->::mozc::commands::Output_Callback::MergeFrom(from._internal_callback());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_storage_entry()->::mozc::commands::GenericStorageEntry::MergeFrom(from._internal_storage_entry());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_user_dictionary_command_status()->::mozc::user_dictionary::UserDictionaryCommandStatus::MergeFrom(from._internal_user_dictionary_command_status());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_engine_reload_response()->::mozc::EngineReloadResponse::MergeFrom(from._internal_engine_reload_response());
    }
    if (cached_has_bits & 0x00002000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00004000u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      consumed_ = from.consumed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      preedit_method_ = from.preedit_method_;
    }
    if (cached_has_bits & 0x00020000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00040000u) {
      launch_tool_mode_ = from.launch_tool_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  if (_internal_has_result()) {
    if (!result_->IsInitialized()) return false;
  }
  if (_internal_has_preedit()) {
    if (!preedit_->IsInitialized()) return false;
  }
  if (_internal_has_candidates()) {
    if (!candidates_->IsInitialized()) return false;
  }
  if (_internal_has_callback()) {
    if (!callback_->IsInitialized()) return false;
  }
  if (_internal_has_user_dictionary_command_status()) {
    if (!user_dictionary_command_status_->IsInitialized()) return false;
  }
  if (_internal_has_engine_reload_response()) {
    if (!engine_reload_response_->IsInitialized()) return false;
  }
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, launch_tool_mode_)
      + sizeof(Output::launch_tool_mode_)
      - PROTOBUF_FIELD_OFFSET(Output, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::mozc::commands::_Command_default_instance_._instance.get_mutable()->input_ = const_cast< ::mozc::commands::Input*>(
      ::mozc::commands::Input::internal_default_instance());
  ::mozc::commands::_Command_default_instance_._instance.get_mutable()->output_ = const_cast< ::mozc::commands::Output*>(
      ::mozc::commands::Output::internal_default_instance());
}
class Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Command>()._has_bits_);
  static const ::mozc::commands::Input& input(const Command* msg);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozc::commands::Output& output(const Command* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::mozc::commands::Input&
Command::_Internal::input(const Command* msg) {
  return *msg->input_;
}
const ::mozc::commands::Output&
Command::_Internal::output(const Command* msg) {
  return *msg->output_;
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    input_ = new ::mozc::commands::Input(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_output()) {
    output_ = new ::mozc::commands::Output(*from.output_);
  } else {
    output_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mozc.commands.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_protocol_2fcommands_2eproto.base);
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_) -
      reinterpret_cast<char*>(&input_)) + sizeof(output_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:mozc.commands.Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete output_;
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_ != nullptr);
      input_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozc.commands.Input input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .mozc.commands.Output output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozc.commands.Input input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // required .mozc.commands.Output output = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::output(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.Command)
  return target;
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozc.commands.Command)
  size_t total_size = 0;

  if (_internal_has_input()) {
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  if (_internal_has_output()) {
    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.Command)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .mozc.commands.Input input = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);

    // required .mozc.commands.Output output = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_input()->::mozc::commands::Input::MergeFrom(from._internal_input());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output()->::mozc::commands::Output::MergeFrom(from._internal_output());
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_input()) {
    if (!input_->IsInitialized()) return false;
  }
  if (_internal_has_output()) {
    if (!output_->IsInitialized()) return false;
  }
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command, output_)
      + sizeof(Command::output_)
      - PROTOBUF_FIELD_OFFSET(Command, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandList::InitAsDefaultInstance() {
}
class CommandList::_Internal {
 public:
};

CommandList::CommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.commands.CommandList)
}
CommandList::CommandList(const CommandList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mozc.commands.CommandList)
}

void CommandList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandList_protocol_2fcommands_2eproto.base);
}

CommandList::~CommandList() {
  // @@protoc_insertion_point(destructor:mozc.commands.CommandList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandList::ArenaDtor(void* object) {
  CommandList* _this = reinterpret_cast< CommandList* >(object);
  (void)_this;
}
void CommandList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandList& CommandList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandList_protocol_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.commands.CommandList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mozc.commands.Command commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.commands.CommandList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozc.commands.Command commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.commands.CommandList)
  return target;
}

size_t CommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.commands.CommandList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.commands.Command commands = 1;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.commands.CommandList)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.commands.CommandList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.commands.CommandList)
    MergeFrom(*source);
  }
}

void CommandList::MergeFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.commands.CommandList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void CommandList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandList::CopyFrom(const CommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.commands.CommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(commands_)) return false;
  return true;
}

void CommandList::InternalSwap(CommandList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace commands
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::commands::KeyEvent_ProbableKeyEvent* Arena::CreateMaybeMessage< ::mozc::commands::KeyEvent_ProbableKeyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::KeyEvent_ProbableKeyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::KeyEvent* Arena::CreateMaybeMessage< ::mozc::commands::KeyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::KeyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::GenericStorageEntry* Arena::CreateMaybeMessage< ::mozc::commands::GenericStorageEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::GenericStorageEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::SessionCommand* Arena::CreateMaybeMessage< ::mozc::commands::SessionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::SessionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Context* Arena::CreateMaybeMessage< ::mozc::commands::Context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Context >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Capability* Arena::CreateMaybeMessage< ::mozc::commands::Capability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::DecoderExperimentParams* Arena::CreateMaybeMessage< ::mozc::commands::DecoderExperimentParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::DecoderExperimentParams >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Request* Arena::CreateMaybeMessage< ::mozc::commands::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::ApplicationInfo* Arena::CreateMaybeMessage< ::mozc::commands::ApplicationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::ApplicationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Input_TouchPosition* Arena::CreateMaybeMessage< ::mozc::commands::Input_TouchPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Input_TouchPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Input_TouchEvent* Arena::CreateMaybeMessage< ::mozc::commands::Input_TouchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Input_TouchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Input* Arena::CreateMaybeMessage< ::mozc::commands::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Input >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Result* Arena::CreateMaybeMessage< ::mozc::commands::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Preedit_Segment* Arena::CreateMaybeMessage< ::mozc::commands::Preedit_Segment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Preedit_Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Preedit* Arena::CreateMaybeMessage< ::mozc::commands::Preedit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Preedit >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Status* Arena::CreateMaybeMessage< ::mozc::commands::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::DeletionRange* Arena::CreateMaybeMessage< ::mozc::commands::DeletionRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::DeletionRange >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Output_Callback* Arena::CreateMaybeMessage< ::mozc::commands::Output_Callback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Output_Callback >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Output* Arena::CreateMaybeMessage< ::mozc::commands::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::Command* Arena::CreateMaybeMessage< ::mozc::commands::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::commands::CommandList* Arena::CreateMaybeMessage< ::mozc::commands::CommandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::commands::CommandList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
