// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/user_dictionary_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fuser_5fdictionary_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto;
namespace mozc {
namespace user_dictionary {
class UserDictionary;
class UserDictionaryDefaultTypeInternal;
extern UserDictionaryDefaultTypeInternal _UserDictionary_default_instance_;
class UserDictionaryCommand;
class UserDictionaryCommandDefaultTypeInternal;
extern UserDictionaryCommandDefaultTypeInternal _UserDictionaryCommand_default_instance_;
class UserDictionaryCommandStatus;
class UserDictionaryCommandStatusDefaultTypeInternal;
extern UserDictionaryCommandStatusDefaultTypeInternal _UserDictionaryCommandStatus_default_instance_;
class UserDictionaryStorage;
class UserDictionaryStorageDefaultTypeInternal;
extern UserDictionaryStorageDefaultTypeInternal _UserDictionaryStorage_default_instance_;
class UserDictionary_Entry;
class UserDictionary_EntryDefaultTypeInternal;
extern UserDictionary_EntryDefaultTypeInternal _UserDictionary_Entry_default_instance_;
}  // namespace user_dictionary
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::user_dictionary::UserDictionary* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionary>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryCommand* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryCommand>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryCommandStatus* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryCommandStatus>(Arena*);
template<> ::mozc::user_dictionary::UserDictionaryStorage* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryStorage>(Arena*);
template<> ::mozc::user_dictionary::UserDictionary_Entry* Arena::CreateMaybeMessage<::mozc::user_dictionary::UserDictionary_Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {
namespace user_dictionary {

enum UserDictionary_PosType : int {
  UserDictionary_PosType_NOUN = 1,
  UserDictionary_PosType_ABBREVIATION = 2,
  UserDictionary_PosType_SUGGESTION_ONLY = 3,
  UserDictionary_PosType_PROPER_NOUN = 4,
  UserDictionary_PosType_PERSONAL_NAME = 5,
  UserDictionary_PosType_FAMILY_NAME = 6,
  UserDictionary_PosType_FIRST_NAME = 7,
  UserDictionary_PosType_ORGANIZATION_NAME = 8,
  UserDictionary_PosType_PLACE_NAME = 9,
  UserDictionary_PosType_SA_IRREGULAR_CONJUGATION_NOUN = 10,
  UserDictionary_PosType_ADJECTIVE_VERBAL_NOUN = 11,
  UserDictionary_PosType_NUMBER = 12,
  UserDictionary_PosType_ALPHABET = 13,
  UserDictionary_PosType_SYMBOL = 14,
  UserDictionary_PosType_EMOTICON = 15,
  UserDictionary_PosType_ADVERB = 16,
  UserDictionary_PosType_PRENOUN_ADJECTIVAL = 17,
  UserDictionary_PosType_CONJUNCTION = 18,
  UserDictionary_PosType_INTERJECTION = 19,
  UserDictionary_PosType_PREFIX = 20,
  UserDictionary_PosType_COUNTER_SUFFIX = 21,
  UserDictionary_PosType_GENERIC_SUFFIX = 22,
  UserDictionary_PosType_PERSON_NAME_SUFFIX = 23,
  UserDictionary_PosType_PLACE_NAME_SUFFIX = 24,
  UserDictionary_PosType_WA_GROUP1_VERB = 25,
  UserDictionary_PosType_KA_GROUP1_VERB = 26,
  UserDictionary_PosType_SA_GROUP1_VERB = 27,
  UserDictionary_PosType_TA_GROUP1_VERB = 28,
  UserDictionary_PosType_NA_GROUP1_VERB = 29,
  UserDictionary_PosType_MA_GROUP1_VERB = 30,
  UserDictionary_PosType_RA_GROUP1_VERB = 31,
  UserDictionary_PosType_GA_GROUP1_VERB = 32,
  UserDictionary_PosType_BA_GROUP1_VERB = 33,
  UserDictionary_PosType_HA_GROUP1_VERB = 34,
  UserDictionary_PosType_GROUP2_VERB = 35,
  UserDictionary_PosType_KURU_GROUP3_VERB = 36,
  UserDictionary_PosType_SURU_GROUP3_VERB = 37,
  UserDictionary_PosType_ZURU_GROUP3_VERB = 38,
  UserDictionary_PosType_RU_GROUP3_VERB = 39,
  UserDictionary_PosType_ADJECTIVE = 40,
  UserDictionary_PosType_SENTENCE_ENDING_PARTICLE = 41,
  UserDictionary_PosType_PUNCTUATION = 42,
  UserDictionary_PosType_FREE_STANDING_WORD = 43,
  UserDictionary_PosType_SUPPRESSION_WORD = 44
};
bool UserDictionary_PosType_IsValid(int value);
constexpr UserDictionary_PosType UserDictionary_PosType_PosType_MIN = UserDictionary_PosType_NOUN;
constexpr UserDictionary_PosType UserDictionary_PosType_PosType_MAX = UserDictionary_PosType_SUPPRESSION_WORD;
constexpr int UserDictionary_PosType_PosType_ARRAYSIZE = UserDictionary_PosType_PosType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionary_PosType_descriptor();
template<typename T>
inline const std::string& UserDictionary_PosType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserDictionary_PosType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserDictionary_PosType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserDictionary_PosType_descriptor(), enum_t_value);
}
inline bool UserDictionary_PosType_Parse(
    const std::string& name, UserDictionary_PosType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserDictionary_PosType>(
    UserDictionary_PosType_descriptor(), name, value);
}
enum UserDictionaryStorage_StorageType : int {
  UserDictionaryStorage_StorageType_SNAPSHOT = 1,
  UserDictionaryStorage_StorageType_UPDATE = 2
};
bool UserDictionaryStorage_StorageType_IsValid(int value);
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage_StorageType_StorageType_MIN = UserDictionaryStorage_StorageType_SNAPSHOT;
constexpr UserDictionaryStorage_StorageType UserDictionaryStorage_StorageType_StorageType_MAX = UserDictionaryStorage_StorageType_UPDATE;
constexpr int UserDictionaryStorage_StorageType_StorageType_ARRAYSIZE = UserDictionaryStorage_StorageType_StorageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryStorage_StorageType_descriptor();
template<typename T>
inline const std::string& UserDictionaryStorage_StorageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserDictionaryStorage_StorageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserDictionaryStorage_StorageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserDictionaryStorage_StorageType_descriptor(), enum_t_value);
}
inline bool UserDictionaryStorage_StorageType_Parse(
    const std::string& name, UserDictionaryStorage_StorageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserDictionaryStorage_StorageType>(
    UserDictionaryStorage_StorageType_descriptor(), name, value);
}
enum UserDictionaryCommand_CommandType : int {
  UserDictionaryCommand_CommandType_NO_OPERATION = 0,
  UserDictionaryCommand_CommandType_CLEAR_STORAGE = 1,
  UserDictionaryCommand_CommandType_CREATE_SESSION = 2,
  UserDictionaryCommand_CommandType_DELETE_SESSION = 3,
  UserDictionaryCommand_CommandType_SET_DEFAULT_DICTIONARY_NAME = 4,
  UserDictionaryCommand_CommandType_CHECK_UNDOABILITY = 5,
  UserDictionaryCommand_CommandType_UNDO = 6,
  UserDictionaryCommand_CommandType_LOAD = 7,
  UserDictionaryCommand_CommandType_SAVE = 8,
  UserDictionaryCommand_CommandType_GET_USER_DICTIONARY_NAME_LIST = 9,
  UserDictionaryCommand_CommandType_GET_ENTRY_SIZE = 10,
  UserDictionaryCommand_CommandType_CHECK_NEW_DICTIONARY_AVAILABILITY = 12,
  UserDictionaryCommand_CommandType_CREATE_DICTIONARY = 13,
  UserDictionaryCommand_CommandType_DELETE_DICTIONARY = 14,
  UserDictionaryCommand_CommandType_RENAME_DICTIONARY = 15,
  UserDictionaryCommand_CommandType_CHECK_NEW_ENTRY_AVAILABILITY = 16,
  UserDictionaryCommand_CommandType_ADD_ENTRY = 17,
  UserDictionaryCommand_CommandType_EDIT_ENTRY = 18,
  UserDictionaryCommand_CommandType_DELETE_ENTRY = 19,
  UserDictionaryCommand_CommandType_IMPORT_DATA = 20,
  UserDictionaryCommand_CommandType_GET_STORAGE = 21,
  UserDictionaryCommand_CommandType_GET_ENTRIES = 22
};
bool UserDictionaryCommand_CommandType_IsValid(int value);
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand_CommandType_CommandType_MIN = UserDictionaryCommand_CommandType_NO_OPERATION;
constexpr UserDictionaryCommand_CommandType UserDictionaryCommand_CommandType_CommandType_MAX = UserDictionaryCommand_CommandType_GET_ENTRIES;
constexpr int UserDictionaryCommand_CommandType_CommandType_ARRAYSIZE = UserDictionaryCommand_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryCommand_CommandType_descriptor();
template<typename T>
inline const std::string& UserDictionaryCommand_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserDictionaryCommand_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserDictionaryCommand_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserDictionaryCommand_CommandType_descriptor(), enum_t_value);
}
inline bool UserDictionaryCommand_CommandType_Parse(
    const std::string& name, UserDictionaryCommand_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserDictionaryCommand_CommandType>(
    UserDictionaryCommand_CommandType_descriptor(), name, value);
}
enum UserDictionaryCommandStatus_Status : int {
  UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS = 1,
  UserDictionaryCommandStatus_Status_UNKNOWN_ERROR = 2,
  UserDictionaryCommandStatus_Status_UNKNOWN_COMMAND = 3,
  UserDictionaryCommandStatus_Status_INVALID_ARGUMENT = 4,
  UserDictionaryCommandStatus_Status_UNKNOWN_SESSION_ID = 5,
  UserDictionaryCommandStatus_Status_FILE_NOT_FOUND = 6,
  UserDictionaryCommandStatus_Status_INVALID_FILE_FORMAT = 7,
  UserDictionaryCommandStatus_Status_FILE_SIZE_LIMIT_EXCEEDED = 8,
  UserDictionaryCommandStatus_Status_DICTIONARY_SIZE_LIMIT_EXCEEDED = 9,
  UserDictionaryCommandStatus_Status_ENTRY_SIZE_LIMIT_EXCEEDED = 10,
  UserDictionaryCommandStatus_Status_UNKNOWN_DICTIONARY_ID = 11,
  UserDictionaryCommandStatus_Status_ENTRY_INDEX_OUT_OF_RANGE = 12,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_EMPTY = 13,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_TOO_LONG = 14,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER = 15,
  UserDictionaryCommandStatus_Status_DICTIONARY_NAME_DUPLICATED = 16,
  UserDictionaryCommandStatus_Status_READING_EMPTY = 17,
  UserDictionaryCommandStatus_Status_READING_TOO_LONG = 18,
  UserDictionaryCommandStatus_Status_READING_CONTAINS_INVALID_CHARACTER = 19,
  UserDictionaryCommandStatus_Status_WORD_EMPTY = 20,
  UserDictionaryCommandStatus_Status_WORD_TOO_LONG = 21,
  UserDictionaryCommandStatus_Status_WORD_CONTAINS_INVALID_CHARACTER = 22,
  UserDictionaryCommandStatus_Status_INVALID_POS_TYPE = 23,
  UserDictionaryCommandStatus_Status_COMMENT_TOO_LONG = 24,
  UserDictionaryCommandStatus_Status_COMMENT_CONTAINS_INVALID_CHARACTER = 25,
  UserDictionaryCommandStatus_Status_IMPORT_TOO_MANY_WORDS = 26,
  UserDictionaryCommandStatus_Status_IMPORT_INVALID_ENTRIES = 27,
  UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY = 28
};
bool UserDictionaryCommandStatus_Status_IsValid(int value);
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus_Status_Status_MIN = UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS;
constexpr UserDictionaryCommandStatus_Status UserDictionaryCommandStatus_Status_Status_MAX = UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY;
constexpr int UserDictionaryCommandStatus_Status_Status_ARRAYSIZE = UserDictionaryCommandStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDictionaryCommandStatus_Status_descriptor();
template<typename T>
inline const std::string& UserDictionaryCommandStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserDictionaryCommandStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserDictionaryCommandStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserDictionaryCommandStatus_Status_descriptor(), enum_t_value);
}
inline bool UserDictionaryCommandStatus_Status_Parse(
    const std::string& name, UserDictionaryCommandStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserDictionaryCommandStatus_Status>(
    UserDictionaryCommandStatus_Status_descriptor(), name, value);
}
// ===================================================================

class UserDictionary_Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionary.Entry) */ {
 public:
  inline UserDictionary_Entry() : UserDictionary_Entry(nullptr) {};
  virtual ~UserDictionary_Entry();

  UserDictionary_Entry(const UserDictionary_Entry& from);
  UserDictionary_Entry(UserDictionary_Entry&& from) noexcept
    : UserDictionary_Entry() {
    *this = ::std::move(from);
  }

  inline UserDictionary_Entry& operator=(const UserDictionary_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDictionary_Entry& operator=(UserDictionary_Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDictionary_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionary_Entry* internal_default_instance() {
    return reinterpret_cast<const UserDictionary_Entry*>(
               &_UserDictionary_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserDictionary_Entry& a, UserDictionary_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDictionary_Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDictionary_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDictionary_Entry* New() const final {
    return CreateMaybeMessage<UserDictionary_Entry>(nullptr);
  }

  UserDictionary_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionary_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDictionary_Entry& from);
  void MergeFrom(const UserDictionary_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionary_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_dictionary.UserDictionary.Entry";
  }
  protected:
  explicit UserDictionary_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
    return ::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kCommentFieldNumber = 4,
    kLocaleFieldNumber = 12,
    kRemovedFieldNumber = 10,
    kAutoRegisteredFieldNumber = 11,
    kPosFieldNumber = 5,
  };
  // optional string key = 1 [default = ""];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2 [default = ""];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional string comment = 4 [default = ""];
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string locale = 12 [default = ""];
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_locale();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_locale(
      std::string* locale);
  private:
  const std::string& _internal_locale() const;
  void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional bool removed = 10 [default = false];
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool auto_registered = 11 [default = false];
  bool has_auto_registered() const;
  private:
  bool _internal_has_auto_registered() const;
  public:
  void clear_auto_registered();
  bool auto_registered() const;
  void set_auto_registered(bool value);
  private:
  bool _internal_auto_registered() const;
  void _internal_set_auto_registered(bool value);
  public:

  // optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  ::mozc::user_dictionary::UserDictionary_PosType pos() const;
  void set_pos(::mozc::user_dictionary::UserDictionary_PosType value);
  private:
  ::mozc::user_dictionary::UserDictionary_PosType _internal_pos() const;
  void _internal_set_pos(::mozc::user_dictionary::UserDictionary_PosType value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionary.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  bool removed_;
  bool auto_registered_;
  int pos_;
  friend struct ::TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserDictionary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionary) */ {
 public:
  inline UserDictionary() : UserDictionary(nullptr) {};
  virtual ~UserDictionary();

  UserDictionary(const UserDictionary& from);
  UserDictionary(UserDictionary&& from) noexcept
    : UserDictionary() {
    *this = ::std::move(from);
  }

  inline UserDictionary& operator=(const UserDictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDictionary& operator=(UserDictionary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDictionary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionary* internal_default_instance() {
    return reinterpret_cast<const UserDictionary*>(
               &_UserDictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserDictionary& a, UserDictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDictionary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDictionary* New() const final {
    return CreateMaybeMessage<UserDictionary>(nullptr);
  }

  UserDictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDictionary& from);
  void MergeFrom(const UserDictionary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_dictionary.UserDictionary";
  }
  protected:
  explicit UserDictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
    return ::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserDictionary_Entry Entry;

  typedef UserDictionary_PosType PosType;
  static constexpr PosType NOUN =
    UserDictionary_PosType_NOUN;
  static constexpr PosType ABBREVIATION =
    UserDictionary_PosType_ABBREVIATION;
  static constexpr PosType SUGGESTION_ONLY =
    UserDictionary_PosType_SUGGESTION_ONLY;
  static constexpr PosType PROPER_NOUN =
    UserDictionary_PosType_PROPER_NOUN;
  static constexpr PosType PERSONAL_NAME =
    UserDictionary_PosType_PERSONAL_NAME;
  static constexpr PosType FAMILY_NAME =
    UserDictionary_PosType_FAMILY_NAME;
  static constexpr PosType FIRST_NAME =
    UserDictionary_PosType_FIRST_NAME;
  static constexpr PosType ORGANIZATION_NAME =
    UserDictionary_PosType_ORGANIZATION_NAME;
  static constexpr PosType PLACE_NAME =
    UserDictionary_PosType_PLACE_NAME;
  static constexpr PosType SA_IRREGULAR_CONJUGATION_NOUN =
    UserDictionary_PosType_SA_IRREGULAR_CONJUGATION_NOUN;
  static constexpr PosType ADJECTIVE_VERBAL_NOUN =
    UserDictionary_PosType_ADJECTIVE_VERBAL_NOUN;
  static constexpr PosType NUMBER =
    UserDictionary_PosType_NUMBER;
  static constexpr PosType ALPHABET =
    UserDictionary_PosType_ALPHABET;
  static constexpr PosType SYMBOL =
    UserDictionary_PosType_SYMBOL;
  static constexpr PosType EMOTICON =
    UserDictionary_PosType_EMOTICON;
  static constexpr PosType ADVERB =
    UserDictionary_PosType_ADVERB;
  static constexpr PosType PRENOUN_ADJECTIVAL =
    UserDictionary_PosType_PRENOUN_ADJECTIVAL;
  static constexpr PosType CONJUNCTION =
    UserDictionary_PosType_CONJUNCTION;
  static constexpr PosType INTERJECTION =
    UserDictionary_PosType_INTERJECTION;
  static constexpr PosType PREFIX =
    UserDictionary_PosType_PREFIX;
  static constexpr PosType COUNTER_SUFFIX =
    UserDictionary_PosType_COUNTER_SUFFIX;
  static constexpr PosType GENERIC_SUFFIX =
    UserDictionary_PosType_GENERIC_SUFFIX;
  static constexpr PosType PERSON_NAME_SUFFIX =
    UserDictionary_PosType_PERSON_NAME_SUFFIX;
  static constexpr PosType PLACE_NAME_SUFFIX =
    UserDictionary_PosType_PLACE_NAME_SUFFIX;
  static constexpr PosType WA_GROUP1_VERB =
    UserDictionary_PosType_WA_GROUP1_VERB;
  static constexpr PosType KA_GROUP1_VERB =
    UserDictionary_PosType_KA_GROUP1_VERB;
  static constexpr PosType SA_GROUP1_VERB =
    UserDictionary_PosType_SA_GROUP1_VERB;
  static constexpr PosType TA_GROUP1_VERB =
    UserDictionary_PosType_TA_GROUP1_VERB;
  static constexpr PosType NA_GROUP1_VERB =
    UserDictionary_PosType_NA_GROUP1_VERB;
  static constexpr PosType MA_GROUP1_VERB =
    UserDictionary_PosType_MA_GROUP1_VERB;
  static constexpr PosType RA_GROUP1_VERB =
    UserDictionary_PosType_RA_GROUP1_VERB;
  static constexpr PosType GA_GROUP1_VERB =
    UserDictionary_PosType_GA_GROUP1_VERB;
  static constexpr PosType BA_GROUP1_VERB =
    UserDictionary_PosType_BA_GROUP1_VERB;
  static constexpr PosType HA_GROUP1_VERB =
    UserDictionary_PosType_HA_GROUP1_VERB;
  static constexpr PosType GROUP2_VERB =
    UserDictionary_PosType_GROUP2_VERB;
  static constexpr PosType KURU_GROUP3_VERB =
    UserDictionary_PosType_KURU_GROUP3_VERB;
  static constexpr PosType SURU_GROUP3_VERB =
    UserDictionary_PosType_SURU_GROUP3_VERB;
  static constexpr PosType ZURU_GROUP3_VERB =
    UserDictionary_PosType_ZURU_GROUP3_VERB;
  static constexpr PosType RU_GROUP3_VERB =
    UserDictionary_PosType_RU_GROUP3_VERB;
  static constexpr PosType ADJECTIVE =
    UserDictionary_PosType_ADJECTIVE;
  static constexpr PosType SENTENCE_ENDING_PARTICLE =
    UserDictionary_PosType_SENTENCE_ENDING_PARTICLE;
  static constexpr PosType PUNCTUATION =
    UserDictionary_PosType_PUNCTUATION;
  static constexpr PosType FREE_STANDING_WORD =
    UserDictionary_PosType_FREE_STANDING_WORD;
  static constexpr PosType SUPPRESSION_WORD =
    UserDictionary_PosType_SUPPRESSION_WORD;
  static inline bool PosType_IsValid(int value) {
    return UserDictionary_PosType_IsValid(value);
  }
  static constexpr PosType PosType_MIN =
    UserDictionary_PosType_PosType_MIN;
  static constexpr PosType PosType_MAX =
    UserDictionary_PosType_PosType_MAX;
  static constexpr int PosType_ARRAYSIZE =
    UserDictionary_PosType_PosType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PosType_descriptor() {
    return UserDictionary_PosType_descriptor();
  }
  template<typename T>
  static inline const std::string& PosType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PosType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PosType_Name.");
    return UserDictionary_PosType_Name(enum_t_value);
  }
  static inline bool PosType_Parse(const std::string& name,
      PosType* value) {
    return UserDictionary_PosType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 4,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kRemovedFieldNumber = 5,
    kSyncableFieldNumber = 6,
    kEnabledFieldNumber = 2,
  };
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
      mutable_entries();
  private:
  const ::mozc::user_dictionary::UserDictionary_Entry& _internal_entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* _internal_add_entries();
  public:
  const ::mozc::user_dictionary::UserDictionary_Entry& entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
      entries() const;

  // optional string name = 3 [default = ""];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 id = 1 [default = 0, jstype = JS_STRING];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool removed = 5 [default = false];
  bool has_removed() const;
  private:
  bool _internal_has_removed() const;
  public:
  void clear_removed();
  bool removed() const;
  void set_removed(bool value);
  private:
  bool _internal_removed() const;
  void _internal_set_removed(bool value);
  public:

  // optional bool syncable = 6 [default = false];
  bool has_syncable() const;
  private:
  bool _internal_has_syncable() const;
  public:
  void clear_syncable();
  bool syncable() const;
  void set_syncable(bool value);
  private:
  bool _internal_syncable() const;
  void _internal_set_syncable(bool value);
  public:

  // optional bool enabled = 2 [default = true];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool removed_;
  bool syncable_;
  bool enabled_;
  friend struct ::TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserDictionaryStorage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryStorage) */ {
 public:
  inline UserDictionaryStorage() : UserDictionaryStorage(nullptr) {};
  virtual ~UserDictionaryStorage();

  UserDictionaryStorage(const UserDictionaryStorage& from);
  UserDictionaryStorage(UserDictionaryStorage&& from) noexcept
    : UserDictionaryStorage() {
    *this = ::std::move(from);
  }

  inline UserDictionaryStorage& operator=(const UserDictionaryStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDictionaryStorage& operator=(UserDictionaryStorage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDictionaryStorage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryStorage* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryStorage*>(
               &_UserDictionaryStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserDictionaryStorage& a, UserDictionaryStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDictionaryStorage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDictionaryStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryStorage* New() const final {
    return CreateMaybeMessage<UserDictionaryStorage>(nullptr);
  }

  UserDictionaryStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryStorage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDictionaryStorage& from);
  void MergeFrom(const UserDictionaryStorage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryStorage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_dictionary.UserDictionaryStorage";
  }
  protected:
  explicit UserDictionaryStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
    return ::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserDictionaryStorage_StorageType StorageType;
  static constexpr StorageType SNAPSHOT =
    UserDictionaryStorage_StorageType_SNAPSHOT;
  static constexpr StorageType UPDATE =
    UserDictionaryStorage_StorageType_UPDATE;
  static inline bool StorageType_IsValid(int value) {
    return UserDictionaryStorage_StorageType_IsValid(value);
  }
  static constexpr StorageType StorageType_MIN =
    UserDictionaryStorage_StorageType_StorageType_MIN;
  static constexpr StorageType StorageType_MAX =
    UserDictionaryStorage_StorageType_StorageType_MAX;
  static constexpr int StorageType_ARRAYSIZE =
    UserDictionaryStorage_StorageType_StorageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageType_descriptor() {
    return UserDictionaryStorage_StorageType_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageType_Name.");
    return UserDictionaryStorage_StorageType_Name(enum_t_value);
  }
  static inline bool StorageType_Parse(const std::string& name,
      StorageType* value) {
    return UserDictionaryStorage_StorageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDictionariesFieldNumber = 2,
    kVersionFieldNumber = 1,
    kStorageTypeFieldNumber = 10,
  };
  // repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
  int dictionaries_size() const;
  private:
  int _internal_dictionaries_size() const;
  public:
  void clear_dictionaries();
  ::mozc::user_dictionary::UserDictionary* mutable_dictionaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >*
      mutable_dictionaries();
  private:
  const ::mozc::user_dictionary::UserDictionary& _internal_dictionaries(int index) const;
  ::mozc::user_dictionary::UserDictionary* _internal_add_dictionaries();
  public:
  const ::mozc::user_dictionary::UserDictionary& dictionaries(int index) const;
  ::mozc::user_dictionary::UserDictionary* add_dictionaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >&
      dictionaries() const;

  // optional int32 version = 1 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
  bool has_storage_type() const;
  private:
  bool _internal_has_storage_type() const;
  public:
  void clear_storage_type();
  ::mozc::user_dictionary::UserDictionaryStorage_StorageType storage_type() const;
  void set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value);
  private:
  ::mozc::user_dictionary::UserDictionaryStorage_StorageType _internal_storage_type() const;
  void _internal_set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary > dictionaries_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  int storage_type_;
  friend struct ::TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserDictionaryCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryCommand) */ {
 public:
  inline UserDictionaryCommand() : UserDictionaryCommand(nullptr) {};
  virtual ~UserDictionaryCommand();

  UserDictionaryCommand(const UserDictionaryCommand& from);
  UserDictionaryCommand(UserDictionaryCommand&& from) noexcept
    : UserDictionaryCommand() {
    *this = ::std::move(from);
  }

  inline UserDictionaryCommand& operator=(const UserDictionaryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDictionaryCommand& operator=(UserDictionaryCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDictionaryCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryCommand* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryCommand*>(
               &_UserDictionaryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserDictionaryCommand& a, UserDictionaryCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDictionaryCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDictionaryCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryCommand* New() const final {
    return CreateMaybeMessage<UserDictionaryCommand>(nullptr);
  }

  UserDictionaryCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDictionaryCommand& from);
  void MergeFrom(const UserDictionaryCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_dictionary.UserDictionaryCommand";
  }
  protected:
  explicit UserDictionaryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
    return ::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserDictionaryCommand_CommandType CommandType;
  static constexpr CommandType NO_OPERATION =
    UserDictionaryCommand_CommandType_NO_OPERATION;
  static constexpr CommandType CLEAR_STORAGE =
    UserDictionaryCommand_CommandType_CLEAR_STORAGE;
  static constexpr CommandType CREATE_SESSION =
    UserDictionaryCommand_CommandType_CREATE_SESSION;
  static constexpr CommandType DELETE_SESSION =
    UserDictionaryCommand_CommandType_DELETE_SESSION;
  static constexpr CommandType SET_DEFAULT_DICTIONARY_NAME =
    UserDictionaryCommand_CommandType_SET_DEFAULT_DICTIONARY_NAME;
  static constexpr CommandType CHECK_UNDOABILITY =
    UserDictionaryCommand_CommandType_CHECK_UNDOABILITY;
  static constexpr CommandType UNDO =
    UserDictionaryCommand_CommandType_UNDO;
  static constexpr CommandType LOAD =
    UserDictionaryCommand_CommandType_LOAD;
  static constexpr CommandType SAVE =
    UserDictionaryCommand_CommandType_SAVE;
  static constexpr CommandType GET_USER_DICTIONARY_NAME_LIST =
    UserDictionaryCommand_CommandType_GET_USER_DICTIONARY_NAME_LIST;
  static constexpr CommandType GET_ENTRY_SIZE =
    UserDictionaryCommand_CommandType_GET_ENTRY_SIZE;
  static constexpr CommandType CHECK_NEW_DICTIONARY_AVAILABILITY =
    UserDictionaryCommand_CommandType_CHECK_NEW_DICTIONARY_AVAILABILITY;
  static constexpr CommandType CREATE_DICTIONARY =
    UserDictionaryCommand_CommandType_CREATE_DICTIONARY;
  static constexpr CommandType DELETE_DICTIONARY =
    UserDictionaryCommand_CommandType_DELETE_DICTIONARY;
  static constexpr CommandType RENAME_DICTIONARY =
    UserDictionaryCommand_CommandType_RENAME_DICTIONARY;
  static constexpr CommandType CHECK_NEW_ENTRY_AVAILABILITY =
    UserDictionaryCommand_CommandType_CHECK_NEW_ENTRY_AVAILABILITY;
  static constexpr CommandType ADD_ENTRY =
    UserDictionaryCommand_CommandType_ADD_ENTRY;
  static constexpr CommandType EDIT_ENTRY =
    UserDictionaryCommand_CommandType_EDIT_ENTRY;
  static constexpr CommandType DELETE_ENTRY =
    UserDictionaryCommand_CommandType_DELETE_ENTRY;
  static constexpr CommandType IMPORT_DATA =
    UserDictionaryCommand_CommandType_IMPORT_DATA;
  static constexpr CommandType GET_STORAGE =
    UserDictionaryCommand_CommandType_GET_STORAGE;
  static constexpr CommandType GET_ENTRIES =
    UserDictionaryCommand_CommandType_GET_ENTRIES;
  static inline bool CommandType_IsValid(int value) {
    return UserDictionaryCommand_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    UserDictionaryCommand_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    UserDictionaryCommand_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    UserDictionaryCommand_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return UserDictionaryCommand_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return UserDictionaryCommand_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(const std::string& name,
      CommandType* value) {
    return UserDictionaryCommand_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIndexFieldNumber = 5,
    kDictionaryNameFieldNumber = 4,
    kDataFieldNumber = 7,
    kEntryFieldNumber = 6,
    kSessionIdFieldNumber = 2,
    kDictionaryIdFieldNumber = 3,
    kTypeFieldNumber = 1,
    kEnsureNonEmptyStorageFieldNumber = 8,
    kIgnoreInvalidEntriesFieldNumber = 9,
  };
  // repeated int32 entry_index = 5;
  int entry_index_size() const;
  private:
  int _internal_entry_index_size() const;
  public:
  void clear_entry_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entry_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_entry_index() const;
  void _internal_add_entry_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_entry_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 entry_index(int index) const;
  void set_entry_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_entry_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      entry_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_entry_index();

  // optional string dictionary_name = 4;
  bool has_dictionary_name() const;
  private:
  bool _internal_has_dictionary_name() const;
  public:
  void clear_dictionary_name();
  const std::string& dictionary_name() const;
  void set_dictionary_name(const std::string& value);
  void set_dictionary_name(std::string&& value);
  void set_dictionary_name(const char* value);
  void set_dictionary_name(const char* value, size_t size);
  std::string* mutable_dictionary_name();
  std::string* release_dictionary_name();
  void set_allocated_dictionary_name(std::string* dictionary_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dictionary_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dictionary_name(
      std::string* dictionary_name);
  private:
  const std::string& _internal_dictionary_name() const;
  void _internal_set_dictionary_name(const std::string& value);
  std::string* _internal_mutable_dictionary_name();
  public:

  // optional string data = 7;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::mozc::user_dictionary::UserDictionary_Entry& entry() const;
  ::mozc::user_dictionary::UserDictionary_Entry* release_entry();
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entry();
  void set_allocated_entry(::mozc::user_dictionary::UserDictionary_Entry* entry);
  private:
  const ::mozc::user_dictionary::UserDictionary_Entry& _internal_entry() const;
  ::mozc::user_dictionary::UserDictionary_Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::mozc::user_dictionary::UserDictionary_Entry* entry);
  ::mozc::user_dictionary::UserDictionary_Entry* unsafe_arena_release_entry();

  // optional uint64 session_id = 2 [jstype = JS_STRING];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 dictionary_id = 3 [jstype = JS_STRING];
  bool has_dictionary_id() const;
  private:
  bool _internal_has_dictionary_id() const;
  public:
  void clear_dictionary_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dictionary_id() const;
  void set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dictionary_id() const;
  void _internal_set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mozc::user_dictionary::UserDictionaryCommand_CommandType type() const;
  void set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value);
  private:
  ::mozc::user_dictionary::UserDictionaryCommand_CommandType _internal_type() const;
  void _internal_set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value);
  public:

  // optional bool ensure_non_empty_storage = 8;
  bool has_ensure_non_empty_storage() const;
  private:
  bool _internal_has_ensure_non_empty_storage() const;
  public:
  void clear_ensure_non_empty_storage();
  bool ensure_non_empty_storage() const;
  void set_ensure_non_empty_storage(bool value);
  private:
  bool _internal_ensure_non_empty_storage() const;
  void _internal_set_ensure_non_empty_storage(bool value);
  public:

  // optional bool ignore_invalid_entries = 9;
  bool has_ignore_invalid_entries() const;
  private:
  bool _internal_has_ignore_invalid_entries() const;
  public:
  void clear_ignore_invalid_entries();
  bool ignore_invalid_entries() const;
  void set_ignore_invalid_entries(bool value);
  private:
  bool _internal_ignore_invalid_entries() const;
  void _internal_set_ignore_invalid_entries(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > entry_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dictionary_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::mozc::user_dictionary::UserDictionary_Entry* entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dictionary_id_;
  int type_;
  bool ensure_non_empty_storage_;
  bool ignore_invalid_entries_;
  friend struct ::TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class UserDictionaryCommandStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.user_dictionary.UserDictionaryCommandStatus) */ {
 public:
  inline UserDictionaryCommandStatus() : UserDictionaryCommandStatus(nullptr) {};
  virtual ~UserDictionaryCommandStatus();

  UserDictionaryCommandStatus(const UserDictionaryCommandStatus& from);
  UserDictionaryCommandStatus(UserDictionaryCommandStatus&& from) noexcept
    : UserDictionaryCommandStatus() {
    *this = ::std::move(from);
  }

  inline UserDictionaryCommandStatus& operator=(const UserDictionaryCommandStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDictionaryCommandStatus& operator=(UserDictionaryCommandStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDictionaryCommandStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserDictionaryCommandStatus* internal_default_instance() {
    return reinterpret_cast<const UserDictionaryCommandStatus*>(
               &_UserDictionaryCommandStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserDictionaryCommandStatus& a, UserDictionaryCommandStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDictionaryCommandStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDictionaryCommandStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDictionaryCommandStatus* New() const final {
    return CreateMaybeMessage<UserDictionaryCommandStatus>(nullptr);
  }

  UserDictionaryCommandStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDictionaryCommandStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDictionaryCommandStatus& from);
  void MergeFrom(const UserDictionaryCommandStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDictionaryCommandStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.user_dictionary.UserDictionaryCommandStatus";
  }
  protected:
  explicit UserDictionaryCommandStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto);
    return ::descriptor_table_protocol_2fuser_5fdictionary_5fstorage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserDictionaryCommandStatus_Status Status;
  static constexpr Status USER_DICTIONARY_COMMAND_SUCCESS =
    UserDictionaryCommandStatus_Status_USER_DICTIONARY_COMMAND_SUCCESS;
  static constexpr Status UNKNOWN_ERROR =
    UserDictionaryCommandStatus_Status_UNKNOWN_ERROR;
  static constexpr Status UNKNOWN_COMMAND =
    UserDictionaryCommandStatus_Status_UNKNOWN_COMMAND;
  static constexpr Status INVALID_ARGUMENT =
    UserDictionaryCommandStatus_Status_INVALID_ARGUMENT;
  static constexpr Status UNKNOWN_SESSION_ID =
    UserDictionaryCommandStatus_Status_UNKNOWN_SESSION_ID;
  static constexpr Status FILE_NOT_FOUND =
    UserDictionaryCommandStatus_Status_FILE_NOT_FOUND;
  static constexpr Status INVALID_FILE_FORMAT =
    UserDictionaryCommandStatus_Status_INVALID_FILE_FORMAT;
  static constexpr Status FILE_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_FILE_SIZE_LIMIT_EXCEEDED;
  static constexpr Status DICTIONARY_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_DICTIONARY_SIZE_LIMIT_EXCEEDED;
  static constexpr Status ENTRY_SIZE_LIMIT_EXCEEDED =
    UserDictionaryCommandStatus_Status_ENTRY_SIZE_LIMIT_EXCEEDED;
  static constexpr Status UNKNOWN_DICTIONARY_ID =
    UserDictionaryCommandStatus_Status_UNKNOWN_DICTIONARY_ID;
  static constexpr Status ENTRY_INDEX_OUT_OF_RANGE =
    UserDictionaryCommandStatus_Status_ENTRY_INDEX_OUT_OF_RANGE;
  static constexpr Status DICTIONARY_NAME_EMPTY =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_EMPTY;
  static constexpr Status DICTIONARY_NAME_TOO_LONG =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_TOO_LONG;
  static constexpr Status DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_CONTAINS_INVALID_CHARACTER;
  static constexpr Status DICTIONARY_NAME_DUPLICATED =
    UserDictionaryCommandStatus_Status_DICTIONARY_NAME_DUPLICATED;
  static constexpr Status READING_EMPTY =
    UserDictionaryCommandStatus_Status_READING_EMPTY;
  static constexpr Status READING_TOO_LONG =
    UserDictionaryCommandStatus_Status_READING_TOO_LONG;
  static constexpr Status READING_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_READING_CONTAINS_INVALID_CHARACTER;
  static constexpr Status WORD_EMPTY =
    UserDictionaryCommandStatus_Status_WORD_EMPTY;
  static constexpr Status WORD_TOO_LONG =
    UserDictionaryCommandStatus_Status_WORD_TOO_LONG;
  static constexpr Status WORD_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_WORD_CONTAINS_INVALID_CHARACTER;
  static constexpr Status INVALID_POS_TYPE =
    UserDictionaryCommandStatus_Status_INVALID_POS_TYPE;
  static constexpr Status COMMENT_TOO_LONG =
    UserDictionaryCommandStatus_Status_COMMENT_TOO_LONG;
  static constexpr Status COMMENT_CONTAINS_INVALID_CHARACTER =
    UserDictionaryCommandStatus_Status_COMMENT_CONTAINS_INVALID_CHARACTER;
  static constexpr Status IMPORT_TOO_MANY_WORDS =
    UserDictionaryCommandStatus_Status_IMPORT_TOO_MANY_WORDS;
  static constexpr Status IMPORT_INVALID_ENTRIES =
    UserDictionaryCommandStatus_Status_IMPORT_INVALID_ENTRIES;
  static constexpr Status NO_UNDO_HISTORY =
    UserDictionaryCommandStatus_Status_NO_UNDO_HISTORY;
  static inline bool Status_IsValid(int value) {
    return UserDictionaryCommandStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UserDictionaryCommandStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UserDictionaryCommandStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UserDictionaryCommandStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UserDictionaryCommandStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UserDictionaryCommandStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return UserDictionaryCommandStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 7,
    kStorageFieldNumber = 3,
    kSessionIdFieldNumber = 2,
    kDictionaryIdFieldNumber = 5,
    kEntrySizeFieldNumber = 6,
    kStatusFieldNumber = 1,
  };
  // repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::mozc::user_dictionary::UserDictionary_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
      mutable_entries();
  private:
  const ::mozc::user_dictionary::UserDictionary_Entry& _internal_entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* _internal_add_entries();
  public:
  const ::mozc::user_dictionary::UserDictionary_Entry& entries(int index) const;
  ::mozc::user_dictionary::UserDictionary_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
      entries() const;

  // optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
  bool has_storage() const;
  private:
  bool _internal_has_storage() const;
  public:
  void clear_storage();
  const ::mozc::user_dictionary::UserDictionaryStorage& storage() const;
  ::mozc::user_dictionary::UserDictionaryStorage* release_storage();
  ::mozc::user_dictionary::UserDictionaryStorage* mutable_storage();
  void set_allocated_storage(::mozc::user_dictionary::UserDictionaryStorage* storage);
  private:
  const ::mozc::user_dictionary::UserDictionaryStorage& _internal_storage() const;
  ::mozc::user_dictionary::UserDictionaryStorage* _internal_mutable_storage();
  public:
  void unsafe_arena_set_allocated_storage(
      ::mozc::user_dictionary::UserDictionaryStorage* storage);
  ::mozc::user_dictionary::UserDictionaryStorage* unsafe_arena_release_storage();

  // optional uint64 session_id = 2 [jstype = JS_STRING];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 dictionary_id = 5 [jstype = JS_STRING];
  bool has_dictionary_id() const;
  private:
  bool _internal_has_dictionary_id() const;
  public:
  void clear_dictionary_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dictionary_id() const;
  void set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dictionary_id() const;
  void _internal_set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 entry_size = 6;
  bool has_entry_size() const;
  private:
  bool _internal_has_entry_size() const;
  public:
  void clear_entry_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_size() const;
  void set_entry_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entry_size() const;
  void _internal_set_entry_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::mozc::user_dictionary::UserDictionaryCommandStatus_Status status() const;
  void set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value);
  private:
  ::mozc::user_dictionary::UserDictionaryCommandStatus_Status _internal_status() const;
  void _internal_set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.user_dictionary.UserDictionaryCommandStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry > entries_;
  ::mozc::user_dictionary::UserDictionaryStorage* storage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dictionary_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entry_size_;
  int status_;
  friend struct ::TableStruct_protocol_2fuser_5fdictionary_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserDictionary_Entry

// optional string key = 1 [default = ""];
inline bool UserDictionary_Entry::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_key() const {
  return _internal_has_key();
}
inline void UserDictionary_Entry::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserDictionary_Entry::key() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.key)
  return _internal_key();
}
inline void UserDictionary_Entry::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline std::string* UserDictionary_Entry::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.key)
  return _internal_mutable_key();
}
inline const std::string& UserDictionary_Entry::_internal_key() const {
  return key_.Get();
}
inline void UserDictionary_Entry::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionary_Entry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline void UserDictionary_Entry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline void UserDictionary_Entry::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline std::string* UserDictionary_Entry::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionary_Entry::release_key() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionary_Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.key)
}
inline std::string* UserDictionary_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionary.Entry.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionary_Entry::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionary.Entry.key)
}

// optional string value = 2 [default = ""];
inline bool UserDictionary_Entry::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_value() const {
  return _internal_has_value();
}
inline void UserDictionary_Entry::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserDictionary_Entry::value() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.value)
  return _internal_value();
}
inline void UserDictionary_Entry::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline std::string* UserDictionary_Entry::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.value)
  return _internal_mutable_value();
}
inline const std::string& UserDictionary_Entry::_internal_value() const {
  return value_.Get();
}
inline void UserDictionary_Entry::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionary_Entry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline void UserDictionary_Entry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline void UserDictionary_Entry::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline std::string* UserDictionary_Entry::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionary_Entry::release_value() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionary_Entry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.value)
}
inline std::string* UserDictionary_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionary.Entry.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionary_Entry::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionary.Entry.value)
}

// optional string comment = 4 [default = ""];
inline bool UserDictionary_Entry::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_comment() const {
  return _internal_has_comment();
}
inline void UserDictionary_Entry::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserDictionary_Entry::comment() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.comment)
  return _internal_comment();
}
inline void UserDictionary_Entry::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline std::string* UserDictionary_Entry::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.comment)
  return _internal_mutable_comment();
}
inline const std::string& UserDictionary_Entry::_internal_comment() const {
  return comment_.Get();
}
inline void UserDictionary_Entry::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionary_Entry::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline void UserDictionary_Entry::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline void UserDictionary_Entry::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline std::string* UserDictionary_Entry::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000004u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionary_Entry::release_comment() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionary_Entry::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.comment)
}
inline std::string* UserDictionary_Entry::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionary.Entry.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionary_Entry::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionary.Entry.comment)
}

// optional .mozc.user_dictionary.UserDictionary.PosType pos = 5;
inline bool UserDictionary_Entry::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_pos() const {
  return _internal_has_pos();
}
inline void UserDictionary_Entry::clear_pos() {
  pos_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mozc::user_dictionary::UserDictionary_PosType UserDictionary_Entry::_internal_pos() const {
  return static_cast< ::mozc::user_dictionary::UserDictionary_PosType >(pos_);
}
inline ::mozc::user_dictionary::UserDictionary_PosType UserDictionary_Entry::pos() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.pos)
  return _internal_pos();
}
inline void UserDictionary_Entry::_internal_set_pos(::mozc::user_dictionary::UserDictionary_PosType value) {
  assert(::mozc::user_dictionary::UserDictionary_PosType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  pos_ = value;
}
inline void UserDictionary_Entry::set_pos(::mozc::user_dictionary::UserDictionary_PosType value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.pos)
}

// optional string locale = 12 [default = ""];
inline bool UserDictionary_Entry::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_locale() const {
  return _internal_has_locale();
}
inline void UserDictionary_Entry::clear_locale() {
  locale_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserDictionary_Entry::locale() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.locale)
  return _internal_locale();
}
inline void UserDictionary_Entry::set_locale(const std::string& value) {
  _internal_set_locale(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.locale)
}
inline std::string* UserDictionary_Entry::mutable_locale() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.Entry.locale)
  return _internal_mutable_locale();
}
inline const std::string& UserDictionary_Entry::_internal_locale() const {
  return locale_.Get();
}
inline void UserDictionary_Entry::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionary_Entry::set_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.Entry.locale)
}
inline void UserDictionary_Entry::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.Entry.locale)
}
inline void UserDictionary_Entry::set_locale(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.Entry.locale)
}
inline std::string* UserDictionary_Entry::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000008u;
  return locale_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionary_Entry::release_locale() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.Entry.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return locale_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionary_Entry::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  locale_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.Entry.locale)
}
inline std::string* UserDictionary_Entry::unsafe_arena_release_locale() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionary.Entry.locale)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return locale_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionary_Entry::unsafe_arena_set_allocated_locale(
    std::string* locale) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  locale_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      locale, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionary.Entry.locale)
}

// optional bool removed = 10 [default = false];
inline bool UserDictionary_Entry::_internal_has_removed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_removed() const {
  return _internal_has_removed();
}
inline void UserDictionary_Entry::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UserDictionary_Entry::_internal_removed() const {
  return removed_;
}
inline bool UserDictionary_Entry::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.removed)
  return _internal_removed();
}
inline void UserDictionary_Entry::_internal_set_removed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  removed_ = value;
}
inline void UserDictionary_Entry::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.removed)
}

// optional bool auto_registered = 11 [default = false];
inline bool UserDictionary_Entry::_internal_has_auto_registered() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserDictionary_Entry::has_auto_registered() const {
  return _internal_has_auto_registered();
}
inline void UserDictionary_Entry::clear_auto_registered() {
  auto_registered_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool UserDictionary_Entry::_internal_auto_registered() const {
  return auto_registered_;
}
inline bool UserDictionary_Entry::auto_registered() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
  return _internal_auto_registered();
}
inline void UserDictionary_Entry::_internal_set_auto_registered(bool value) {
  _has_bits_[0] |= 0x00000020u;
  auto_registered_ = value;
}
inline void UserDictionary_Entry::set_auto_registered(bool value) {
  _internal_set_auto_registered(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.Entry.auto_registered)
}

// -------------------------------------------------------------------

// UserDictionary

// optional uint64 id = 1 [default = 0, jstype = JS_STRING];
inline bool UserDictionary::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDictionary::has_id() const {
  return _internal_has_id();
}
inline void UserDictionary::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionary::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionary::id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.id)
  return _internal_id();
}
inline void UserDictionary::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void UserDictionary::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.id)
}

// optional bool enabled = 2 [default = true];
inline bool UserDictionary::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserDictionary::has_enabled() const {
  return _internal_has_enabled();
}
inline void UserDictionary::clear_enabled() {
  enabled_ = true;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool UserDictionary::_internal_enabled() const {
  return enabled_;
}
inline bool UserDictionary::enabled() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.enabled)
  return _internal_enabled();
}
inline void UserDictionary::_internal_set_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_ = value;
}
inline void UserDictionary::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.enabled)
}

// optional string name = 3 [default = ""];
inline bool UserDictionary::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserDictionary::has_name() const {
  return _internal_has_name();
}
inline void UserDictionary::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserDictionary::name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.name)
  return _internal_name();
}
inline void UserDictionary::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.name)
}
inline std::string* UserDictionary::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.name)
  return _internal_mutable_name();
}
inline const std::string& UserDictionary::_internal_name() const {
  return name_.Get();
}
inline void UserDictionary::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionary::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionary.name)
}
inline void UserDictionary::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionary.name)
}
inline void UserDictionary::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionary.name)
}
inline std::string* UserDictionary::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionary::release_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionary.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionary::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionary.name)
}
inline std::string* UserDictionary::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionary.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionary::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionary.name)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 4;
inline int UserDictionary::_internal_entries_size() const {
  return entries_.size();
}
inline int UserDictionary::entries_size() const {
  return _internal_entries_size();
}
inline void UserDictionary::clear_entries() {
  entries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionary.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionary::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionary.entries)
  return &entries_;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionary::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionary::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.entries)
  return _internal_entries(index);
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::_internal_add_entries() {
  return entries_.Add();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionary::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionary.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionary::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionary.entries)
  return entries_;
}

// optional bool removed = 5 [default = false];
inline bool UserDictionary::_internal_has_removed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserDictionary::has_removed() const {
  return _internal_has_removed();
}
inline void UserDictionary::clear_removed() {
  removed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UserDictionary::_internal_removed() const {
  return removed_;
}
inline bool UserDictionary::removed() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.removed)
  return _internal_removed();
}
inline void UserDictionary::_internal_set_removed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  removed_ = value;
}
inline void UserDictionary::set_removed(bool value) {
  _internal_set_removed(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.removed)
}

// optional bool syncable = 6 [default = false];
inline bool UserDictionary::_internal_has_syncable() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserDictionary::has_syncable() const {
  return _internal_has_syncable();
}
inline void UserDictionary::clear_syncable() {
  syncable_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UserDictionary::_internal_syncable() const {
  return syncable_;
}
inline bool UserDictionary::syncable() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionary.syncable)
  return _internal_syncable();
}
inline void UserDictionary::_internal_set_syncable(bool value) {
  _has_bits_[0] |= 0x00000008u;
  syncable_ = value;
}
inline void UserDictionary::set_syncable(bool value) {
  _internal_set_syncable(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionary.syncable)
}

// -------------------------------------------------------------------

// UserDictionaryStorage

// optional int32 version = 1 [default = 0];
inline bool UserDictionaryStorage::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserDictionaryStorage::has_version() const {
  return _internal_has_version();
}
inline void UserDictionaryStorage::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDictionaryStorage::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDictionaryStorage::version() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.version)
  return _internal_version();
}
inline void UserDictionaryStorage::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void UserDictionaryStorage::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.version)
}

// repeated .mozc.user_dictionary.UserDictionary dictionaries = 2;
inline int UserDictionaryStorage::_internal_dictionaries_size() const {
  return dictionaries_.size();
}
inline int UserDictionaryStorage::dictionaries_size() const {
  return _internal_dictionaries_size();
}
inline void UserDictionaryStorage::clear_dictionaries() {
  dictionaries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::mutable_dictionaries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >*
UserDictionaryStorage::mutable_dictionaries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return &dictionaries_;
}
inline const ::mozc::user_dictionary::UserDictionary& UserDictionaryStorage::_internal_dictionaries(int index) const {
  return dictionaries_.Get(index);
}
inline const ::mozc::user_dictionary::UserDictionary& UserDictionaryStorage::dictionaries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return _internal_dictionaries(index);
}
inline ::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::_internal_add_dictionaries() {
  return dictionaries_.Add();
}
inline ::mozc::user_dictionary::UserDictionary* UserDictionaryStorage::add_dictionaries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return _internal_add_dictionaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary >&
UserDictionaryStorage::dictionaries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryStorage.dictionaries)
  return dictionaries_;
}

// optional .mozc.user_dictionary.UserDictionaryStorage.StorageType storage_type = 10 [default = SNAPSHOT];
inline bool UserDictionaryStorage::_internal_has_storage_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDictionaryStorage::has_storage_type() const {
  return _internal_has_storage_type();
}
inline void UserDictionaryStorage::clear_storage_type() {
  storage_type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mozc::user_dictionary::UserDictionaryStorage_StorageType UserDictionaryStorage::_internal_storage_type() const {
  return static_cast< ::mozc::user_dictionary::UserDictionaryStorage_StorageType >(storage_type_);
}
inline ::mozc::user_dictionary::UserDictionaryStorage_StorageType UserDictionaryStorage::storage_type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryStorage.storage_type)
  return _internal_storage_type();
}
inline void UserDictionaryStorage::_internal_set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value) {
  assert(::mozc::user_dictionary::UserDictionaryStorage_StorageType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  storage_type_ = value;
}
inline void UserDictionaryStorage::set_storage_type(::mozc::user_dictionary::UserDictionaryStorage_StorageType value) {
  _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryStorage.storage_type)
}

// -------------------------------------------------------------------

// UserDictionaryCommand

// required .mozc.user_dictionary.UserDictionaryCommand.CommandType type = 1;
inline bool UserDictionaryCommand::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_type() const {
  return _internal_has_type();
}
inline void UserDictionaryCommand::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::mozc::user_dictionary::UserDictionaryCommand_CommandType UserDictionaryCommand::_internal_type() const {
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommand_CommandType >(type_);
}
inline ::mozc::user_dictionary::UserDictionaryCommand_CommandType UserDictionaryCommand::type() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.type)
  return _internal_type();
}
inline void UserDictionaryCommand::_internal_set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value) {
  assert(::mozc::user_dictionary::UserDictionaryCommand_CommandType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void UserDictionaryCommand::set_type(::mozc::user_dictionary::UserDictionaryCommand_CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.type)
}

// optional uint64 session_id = 2 [jstype = JS_STRING];
inline bool UserDictionaryCommand::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_session_id() const {
  return _internal_has_session_id();
}
inline void UserDictionaryCommand::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommand::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommand::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.session_id)
  return _internal_session_id();
}
inline void UserDictionaryCommand::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  session_id_ = value;
}
inline void UserDictionaryCommand::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.session_id)
}

// optional uint64 dictionary_id = 3 [jstype = JS_STRING];
inline bool UserDictionaryCommand::_internal_has_dictionary_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_dictionary_id() const {
  return _internal_has_dictionary_id();
}
inline void UserDictionaryCommand::clear_dictionary_id() {
  dictionary_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommand::_internal_dictionary_id() const {
  return dictionary_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommand::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
  return _internal_dictionary_id();
}
inline void UserDictionaryCommand::_internal_set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  dictionary_id_ = value;
}
inline void UserDictionaryCommand::set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dictionary_id(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_id)
}

// optional string dictionary_name = 4;
inline bool UserDictionaryCommand::_internal_has_dictionary_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_dictionary_name() const {
  return _internal_has_dictionary_name();
}
inline void UserDictionaryCommand::clear_dictionary_name() {
  dictionary_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserDictionaryCommand::dictionary_name() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return _internal_dictionary_name();
}
inline void UserDictionaryCommand::set_dictionary_name(const std::string& value) {
  _internal_set_dictionary_name(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline std::string* UserDictionaryCommand::mutable_dictionary_name() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  return _internal_mutable_dictionary_name();
}
inline const std::string& UserDictionaryCommand::_internal_dictionary_name() const {
  return dictionary_name_.Get();
}
inline void UserDictionaryCommand::_internal_set_dictionary_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionaryCommand::set_dictionary_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline void UserDictionaryCommand::set_dictionary_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dictionary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline void UserDictionaryCommand::set_dictionary_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dictionary_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline std::string* UserDictionaryCommand::_internal_mutable_dictionary_name() {
  _has_bits_[0] |= 0x00000001u;
  return dictionary_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionaryCommand::release_dictionary_name() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  if (!_internal_has_dictionary_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dictionary_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionaryCommand::set_allocated_dictionary_name(std::string* dictionary_name) {
  if (dictionary_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dictionary_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dictionary_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}
inline std::string* UserDictionaryCommand::unsafe_arena_release_dictionary_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return dictionary_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionaryCommand::unsafe_arena_set_allocated_dictionary_name(
    std::string* dictionary_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dictionary_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dictionary_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dictionary_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionaryCommand.dictionary_name)
}

// repeated int32 entry_index = 5;
inline int UserDictionaryCommand::_internal_entry_index_size() const {
  return entry_index_.size();
}
inline int UserDictionaryCommand::entry_index_size() const {
  return _internal_entry_index_size();
}
inline void UserDictionaryCommand::clear_entry_index() {
  entry_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDictionaryCommand::_internal_entry_index(int index) const {
  return entry_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDictionaryCommand::entry_index(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return _internal_entry_index(index);
}
inline void UserDictionaryCommand::set_entry_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  entry_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
inline void UserDictionaryCommand::_internal_add_entry_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  entry_index_.Add(value);
}
inline void UserDictionaryCommand::add_entry_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_entry_index(value);
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommand.entry_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserDictionaryCommand::_internal_entry_index() const {
  return entry_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UserDictionaryCommand::entry_index() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return _internal_entry_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserDictionaryCommand::_internal_mutable_entry_index() {
  return &entry_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UserDictionaryCommand::mutable_entry_index() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommand.entry_index)
  return _internal_mutable_entry_index();
}

// optional .mozc.user_dictionary.UserDictionary.Entry entry = 6;
inline bool UserDictionaryCommand::_internal_has_entry() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || entry_ != nullptr);
  return value;
}
inline bool UserDictionaryCommand::has_entry() const {
  return _internal_has_entry();
}
inline void UserDictionaryCommand::clear_entry() {
  if (entry_ != nullptr) entry_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommand::_internal_entry() const {
  const ::mozc::user_dictionary::UserDictionary_Entry* p = entry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::user_dictionary::UserDictionary_Entry*>(
      &::mozc::user_dictionary::_UserDictionary_Entry_default_instance_);
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommand::entry() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.entry)
  return _internal_entry();
}
inline void UserDictionaryCommand::unsafe_arena_set_allocated_entry(
    ::mozc::user_dictionary::UserDictionary_Entry* entry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
  }
  entry_ = entry;
  if (entry) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionaryCommand.entry)
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::release_entry() {
  auto temp = unsafe_arena_release_entry();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.entry)
  _has_bits_[0] &= ~0x00000004u;
  ::mozc::user_dictionary::UserDictionary_Entry* temp = entry_;
  entry_ = nullptr;
  return temp;
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::_internal_mutable_entry() {
  _has_bits_[0] |= 0x00000004u;
  if (entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::user_dictionary::UserDictionary_Entry>(GetArena());
    entry_ = p;
  }
  return entry_;
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommand::mutable_entry() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.entry)
  return _internal_mutable_entry();
}
inline void UserDictionaryCommand::set_allocated_entry(::mozc::user_dictionary::UserDictionary_Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.entry)
}

// optional string data = 7;
inline bool UserDictionaryCommand::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_data() const {
  return _internal_has_data();
}
inline void UserDictionaryCommand::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserDictionaryCommand::data() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.data)
  return _internal_data();
}
inline void UserDictionaryCommand::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline std::string* UserDictionaryCommand::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommand.data)
  return _internal_mutable_data();
}
inline const std::string& UserDictionaryCommand::_internal_data() const {
  return data_.Get();
}
inline void UserDictionaryCommand::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserDictionaryCommand::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline void UserDictionaryCommand::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline void UserDictionaryCommand::set_data(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline std::string* UserDictionaryCommand::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserDictionaryCommand::release_data() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommand.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserDictionaryCommand::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommand.data)
}
inline std::string* UserDictionaryCommand::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.user_dictionary.UserDictionaryCommand.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserDictionaryCommand::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionaryCommand.data)
}

// optional bool ensure_non_empty_storage = 8;
inline bool UserDictionaryCommand::_internal_has_ensure_non_empty_storage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_ensure_non_empty_storage() const {
  return _internal_has_ensure_non_empty_storage();
}
inline void UserDictionaryCommand::clear_ensure_non_empty_storage() {
  ensure_non_empty_storage_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool UserDictionaryCommand::_internal_ensure_non_empty_storage() const {
  return ensure_non_empty_storage_;
}
inline bool UserDictionaryCommand::ensure_non_empty_storage() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
  return _internal_ensure_non_empty_storage();
}
inline void UserDictionaryCommand::_internal_set_ensure_non_empty_storage(bool value) {
  _has_bits_[0] |= 0x00000040u;
  ensure_non_empty_storage_ = value;
}
inline void UserDictionaryCommand::set_ensure_non_empty_storage(bool value) {
  _internal_set_ensure_non_empty_storage(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.ensure_non_empty_storage)
}

// optional bool ignore_invalid_entries = 9;
inline bool UserDictionaryCommand::_internal_has_ignore_invalid_entries() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UserDictionaryCommand::has_ignore_invalid_entries() const {
  return _internal_has_ignore_invalid_entries();
}
inline void UserDictionaryCommand::clear_ignore_invalid_entries() {
  ignore_invalid_entries_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool UserDictionaryCommand::_internal_ignore_invalid_entries() const {
  return ignore_invalid_entries_;
}
inline bool UserDictionaryCommand::ignore_invalid_entries() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommand.ignore_invalid_entries)
  return _internal_ignore_invalid_entries();
}
inline void UserDictionaryCommand::_internal_set_ignore_invalid_entries(bool value) {
  _has_bits_[0] |= 0x00000080u;
  ignore_invalid_entries_ = value;
}
inline void UserDictionaryCommand::set_ignore_invalid_entries(bool value) {
  _internal_set_ignore_invalid_entries(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommand.ignore_invalid_entries)
}

// -------------------------------------------------------------------

// UserDictionaryCommandStatus

// required .mozc.user_dictionary.UserDictionaryCommandStatus.Status status = 1;
inline bool UserDictionaryCommandStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserDictionaryCommandStatus::has_status() const {
  return _internal_has_status();
}
inline void UserDictionaryCommandStatus::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mozc::user_dictionary::UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::_internal_status() const {
  return static_cast< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status >(status_);
}
inline ::mozc::user_dictionary::UserDictionaryCommandStatus_Status UserDictionaryCommandStatus::status() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.status)
  return _internal_status();
}
inline void UserDictionaryCommandStatus::_internal_set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value) {
  assert(::mozc::user_dictionary::UserDictionaryCommandStatus_Status_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void UserDictionaryCommandStatus::set_status(::mozc::user_dictionary::UserDictionaryCommandStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.status)
}

// optional uint64 session_id = 2 [jstype = JS_STRING];
inline bool UserDictionaryCommandStatus::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserDictionaryCommandStatus::has_session_id() const {
  return _internal_has_session_id();
}
inline void UserDictionaryCommandStatus::clear_session_id() {
  session_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommandStatus::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommandStatus::session_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
  return _internal_session_id();
}
inline void UserDictionaryCommandStatus::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  session_id_ = value;
}
inline void UserDictionaryCommandStatus::set_session_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.session_id)
}

// optional .mozc.user_dictionary.UserDictionaryStorage storage = 3;
inline bool UserDictionaryCommandStatus::_internal_has_storage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || storage_ != nullptr);
  return value;
}
inline bool UserDictionaryCommandStatus::has_storage() const {
  return _internal_has_storage();
}
inline void UserDictionaryCommandStatus::clear_storage() {
  if (storage_ != nullptr) storage_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::user_dictionary::UserDictionaryStorage& UserDictionaryCommandStatus::_internal_storage() const {
  const ::mozc::user_dictionary::UserDictionaryStorage* p = storage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::user_dictionary::UserDictionaryStorage*>(
      &::mozc::user_dictionary::_UserDictionaryStorage_default_instance_);
}
inline const ::mozc::user_dictionary::UserDictionaryStorage& UserDictionaryCommandStatus::storage() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return _internal_storage();
}
inline void UserDictionaryCommandStatus::unsafe_arena_set_allocated_storage(
    ::mozc::user_dictionary::UserDictionaryStorage* storage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_);
  }
  storage_ = storage;
  if (storage) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::release_storage() {
  auto temp = unsafe_arena_release_storage();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::unsafe_arena_release_storage() {
  // @@protoc_insertion_point(field_release:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::user_dictionary::UserDictionaryStorage* temp = storage_;
  storage_ = nullptr;
  return temp;
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::_internal_mutable_storage() {
  _has_bits_[0] |= 0x00000001u;
  if (storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::user_dictionary::UserDictionaryStorage>(GetArena());
    storage_ = p;
  }
  return storage_;
}
inline ::mozc::user_dictionary::UserDictionaryStorage* UserDictionaryCommandStatus::mutable_storage() {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
  return _internal_mutable_storage();
}
inline void UserDictionaryCommandStatus::set_allocated_storage(::mozc::user_dictionary::UserDictionaryStorage* storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete storage_;
  }
  if (storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage);
    if (message_arena != submessage_arena) {
      storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  storage_ = storage;
  // @@protoc_insertion_point(field_set_allocated:mozc.user_dictionary.UserDictionaryCommandStatus.storage)
}

// optional uint64 dictionary_id = 5 [jstype = JS_STRING];
inline bool UserDictionaryCommandStatus::_internal_has_dictionary_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserDictionaryCommandStatus::has_dictionary_id() const {
  return _internal_has_dictionary_id();
}
inline void UserDictionaryCommandStatus::clear_dictionary_id() {
  dictionary_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommandStatus::_internal_dictionary_id() const {
  return dictionary_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserDictionaryCommandStatus::dictionary_id() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
  return _internal_dictionary_id();
}
inline void UserDictionaryCommandStatus::_internal_set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  dictionary_id_ = value;
}
inline void UserDictionaryCommandStatus::set_dictionary_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dictionary_id(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.dictionary_id)
}

// optional uint32 entry_size = 6;
inline bool UserDictionaryCommandStatus::_internal_has_entry_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserDictionaryCommandStatus::has_entry_size() const {
  return _internal_has_entry_size();
}
inline void UserDictionaryCommandStatus::clear_entry_size() {
  entry_size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDictionaryCommandStatus::_internal_entry_size() const {
  return entry_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserDictionaryCommandStatus::entry_size() const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
  return _internal_entry_size();
}
inline void UserDictionaryCommandStatus::_internal_set_entry_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  entry_size_ = value;
}
inline void UserDictionaryCommandStatus::set_entry_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entry_size(value);
  // @@protoc_insertion_point(field_set:mozc.user_dictionary.UserDictionaryCommandStatus.entry_size)
}

// repeated .mozc.user_dictionary.UserDictionary.Entry entries = 7;
inline int UserDictionaryCommandStatus::_internal_entries_size() const {
  return entries_.size();
}
inline int UserDictionaryCommandStatus::entries_size() const {
  return _internal_entries_size();
}
inline void UserDictionaryCommandStatus::clear_entries() {
  entries_.Clear();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >*
UserDictionaryCommandStatus::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return &entries_;
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommandStatus::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::mozc::user_dictionary::UserDictionary_Entry& UserDictionaryCommandStatus::entries(int index) const {
  // @@protoc_insertion_point(field_get:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return _internal_entries(index);
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::_internal_add_entries() {
  return entries_.Add();
}
inline ::mozc::user_dictionary::UserDictionary_Entry* UserDictionaryCommandStatus::add_entries() {
  // @@protoc_insertion_point(field_add:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozc::user_dictionary::UserDictionary_Entry >&
UserDictionaryCommandStatus::entries() const {
  // @@protoc_insertion_point(field_list:mozc.user_dictionary.UserDictionaryCommandStatus.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_dictionary
}  // namespace mozc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionary_PosType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionary_PosType>() {
  return ::mozc::user_dictionary::UserDictionary_PosType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryStorage_StorageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryStorage_StorageType>() {
  return ::mozc::user_dictionary::UserDictionaryStorage_StorageType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryCommand_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryCommand_CommandType>() {
  return ::mozc::user_dictionary::UserDictionaryCommand_CommandType_descriptor();
}
template <> struct is_proto_enum< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::user_dictionary::UserDictionaryCommandStatus_Status>() {
  return ::mozc::user_dictionary::UserDictionaryCommandStatus_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fuser_5fdictionary_5fstorage_2eproto
