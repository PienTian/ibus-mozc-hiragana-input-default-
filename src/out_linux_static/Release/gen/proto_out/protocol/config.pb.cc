// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/config.proto

#include "protocol/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_InformationListConfig_protocol_2fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_protocol_2fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralConfig_protocol_2fconfig_2eproto;
namespace mozc {
namespace config {
class GeneralConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralConfig> _instance;
} _GeneralConfig_default_instance_;
class Config_CharacterFormRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_CharacterFormRule> _instance;
} _Config_CharacterFormRule_default_instance_;
class Config_InformationListConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config_InformationListConfig> _instance;
} _Config_InformationListConfig_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
}  // namespace config
}  // namespace mozc
static void InitDefaultsscc_info_Config_protocol_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_default_instance_;
    new (ptr) ::mozc::config::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_protocol_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Config_protocol_2fconfig_2eproto}, {
      &scc_info_GeneralConfig_protocol_2fconfig_2eproto.base,
      &scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto.base,
      &scc_info_Config_InformationListConfig_protocol_2fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_CharacterFormRule_default_instance_;
    new (ptr) ::mozc::config::Config_CharacterFormRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config_CharacterFormRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Config_InformationListConfig_protocol_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozc::config::_Config_InformationListConfig_default_instance_;
    new (ptr) ::mozc::config::Config_InformationListConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::Config_InformationListConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Config_InformationListConfig_protocol_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Config_InformationListConfig_protocol_2fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GeneralConfig_protocol_2fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.DefaultConstruct();
  *::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get_mutable() = std::string("0.0.0.0", 7);
  ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyString(
      ::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get_mutable());
  {
    void* ptr = &::mozc::config::_GeneralConfig_default_instance_;
    new (ptr) ::mozc::config::GeneralConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozc::config::GeneralConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralConfig_protocol_2fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeneralConfig_protocol_2fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protocol_2fconfig_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protocol_2fconfig_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protocol_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protocol_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, config_version_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, last_modified_product_version_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, last_modified_time_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, platform_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, ui_locale_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::GeneralConfig, upload_usage_stats_),
  4,
  0,
  3,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, group_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, preedit_character_form_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_CharacterFormRule, conversion_character_form_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config_InformationListConfig, use_local_usage_dictionary_),
  0,
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, general_config_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, verbose_level_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, incognito_mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, check_default_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, presentation_mode_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, preedit_method_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, session_keymap_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, custom_keymap_table_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, custom_roman_table_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, punctuation_method_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, symbol_method_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, space_character_form_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_keyboard_to_change_preedit_method_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, history_learning_level_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, selection_shortcut_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, character_form_rules_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_auto_ime_turn_off_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_cascading_window_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, shift_key_mode_switch_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, numpad_character_form_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_auto_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, auto_conversion_key_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, yen_sign_character_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_japanese_layout_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_kana_modifier_insensitive_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_typing_correction_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_date_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_single_kanji_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_symbol_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_number_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_emoticon_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_calculator_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_t13n_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_zip_code_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_spelling_correction_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_emoji_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, information_list_config_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_history_suggest_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_dictionary_suggest_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_realtime_conversion_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, suggestions_size_),
  PROTOBUF_FIELD_OFFSET(::mozc::config::Config, use_mode_indicator_),
  2,
  4,
  5,
  21,
  6,
  9,
  19,
  0,
  1,
  10,
  15,
  16,
  7,
  17,
  20,
  ~0u,
  22,
  23,
  25,
  26,
  8,
  27,
  18,
  11,
  12,
  13,
  24,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  14,
  3,
  36,
  37,
  38,
  40,
  39,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::mozc::config::GeneralConfig)},
  { 17, 25, sizeof(::mozc::config::Config_CharacterFormRule)},
  { 28, 34, sizeof(::mozc::config::Config_InformationListConfig)},
  { 35, 82, sizeof(::mozc::config::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::config::_GeneralConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::config::_Config_CharacterFormRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::config::_Config_InformationListConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mozc::config::_Config_default_instance_),
};

const char descriptor_table_protodef_protocol_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025protocol/config.proto\022\013mozc.config\"\311\001\n"
  "\rGeneralConfig\022\031\n\016config_version\030\001 \001(\r:\001"
  "0\022.\n\035last_modified_product_version\030\002 \001(\t"
  ":\0070.0.0.0\022!\n\022last_modified_time\030\003 \001(\004:\0010"
  "B\0020\001\022\022\n\010platform\030\004 \001(\t:\000\022\023\n\tui_locale\030\005 "
  "\001(\t:\000\022!\n\022upload_usage_stats\030\006 \001(\010:\005false"
  "\"\227\035\n\006Config\0222\n\016general_config\030\001 \001(\0132\032.mo"
  "zc.config.GeneralConfig\022\030\n\rverbose_level"
  "\030\n \001(\005:\0010\022\035\n\016incognito_mode\030\024 \001(\010:\005false"
  "\022\033\n\rcheck_default\030\026 \001(\010:\004true\022 \n\021present"
  "ation_mode\030\027 \001(\010:\005false\022@\n\016preedit_metho"
  "d\030( \001(\0162!.mozc.config.Config.PreeditMeth"
  "od:\005ROMAN\022\?\n\016session_keymap\030) \001(\0162!.mozc"
  ".config.Config.SessionKeymap:\004NONE\022\033\n\023cu"
  "stom_keymap_table\030* \001(\014\022\032\n\022custom_roman_"
  "table\030+ \001(\014\022O\n\022punctuation_method\030- \001(\0162"
  "%.mozc.config.Config.PunctuationMethod:\014"
  "KUTEN_TOUTEN\022R\n\rsymbol_method\030. \001(\0162 .mo"
  "zc.config.Config.SymbolMethod:\031CORNER_BR"
  "ACKET_MIDDLE_DOT\022b\n\024space_character_form"
  "\030/ \001(\0162,.mozc.config.Config.FundamentalC"
  "haracterForm:\026FUNDAMENTAL_INPUT_MODE\0224\n%"
  "use_keyboard_to_change_preedit_method\0300 "
  "\001(\010:\005false\022Y\n\026history_learning_level\0302 \001"
  "(\0162(.mozc.config.Config.HistoryLearningL"
  "evel:\017DEFAULT_HISTORY\022U\n\022selection_short"
  "cut\0304 \001(\0162%.mozc.config.Config.Selection"
  "Shortcut:\022SHORTCUT_123456789\022C\n\024characte"
  "r_form_rules\0306 \003(\0132%.mozc.config.Config."
  "CharacterFormRule\022#\n\025use_auto_ime_turn_o"
  "ff\0308 \001(\010:\004true\022\"\n\024use_cascading_window\030:"
  " \001(\010:\004true\022W\n\025shift_key_mode_switch\030; \001("
  "\0162&.mozc.config.Config.ShiftKeyModeSwitc"
  "h:\020ASCII_INPUT_MODE\022Y\n\025numpad_character_"
  "form\030< \001(\0162\'.mozc.config.Config.NumpadCh"
  "aracterForm:\021NUMPAD_HALF_WIDTH\022\"\n\023use_au"
  "to_conversion\030= \001(\010:\005false\022\037\n\023auto_conve"
  "rsion_key\030> \001(\r:\00213\022J\n\022yen_sign_characte"
  "r\030\? \001(\0162$.mozc.config.Config.YenSignChar"
  "acter:\010YEN_SIGN\022\"\n\023use_japanese_layout\030@"
  " \001(\010:\005false\0227\n(use_kana_modifier_insensi"
  "tive_conversion\030A \001(\010:\005false\022$\n\025use_typi"
  "ng_correction\030B \001(\010:\005false\022!\n\023use_date_c"
  "onversion\030P \001(\010:\004true\022)\n\033use_single_kanj"
  "i_conversion\030Q \001(\010:\004true\022#\n\025use_symbol_c"
  "onversion\030R \001(\010:\004true\022#\n\025use_number_conv"
  "ersion\030S \001(\010:\004true\022%\n\027use_emoticon_conve"
  "rsion\030T \001(\010:\004true\022\034\n\016use_calculator\030U \001("
  "\010:\004true\022!\n\023use_t13n_conversion\030V \001(\010:\004tr"
  "ue\022%\n\027use_zip_code_conversion\030W \001(\010:\004tru"
  "e\022%\n\027use_spelling_correction\030X \001(\010:\004true"
  "\022#\n\024use_emoji_conversion\030Y \001(\010:\005false\022J\n"
  "\027information_list_config\030Z \001(\0132).mozc.co"
  "nfig.Config.InformationListConfig\022!\n\023use"
  "_history_suggest\030d \001(\010:\004true\022$\n\026use_dict"
  "ionary_suggest\030e \001(\010:\004true\022%\n\027use_realti"
  "me_conversion\030f \001(\010:\004true\022\033\n\020suggestions"
  "_size\030n \001(\r:\0013\022 \n\022use_mode_indicator\030x \001"
  "(\010:\004true\032\303\001\n\021CharacterFormRule\022\r\n\005group\030"
  "\001 \001(\t\022M\n\026preedit_character_form\030\002 \001(\0162!."
  "mozc.config.Config.CharacterForm:\nFULL_W"
  "IDTH\022P\n\031conversion_character_form\030\003 \001(\0162"
  "!.mozc.config.Config.CharacterForm:\nFULL"
  "_WIDTH\032|\n\025InformationListConfig\022(\n\032use_l"
  "ocal_usage_dictionary\030\001 \001(\010:\004trueJ\004\010\002\020\003J"
  "\004\010\n\020\013R\030use_web_usage_dictionaryR\023web_ser"
  "vice_entries\"$\n\rPreeditMethod\022\t\n\005ROMAN\020\000"
  "\022\010\n\004KANA\020\001\"j\n\rSessionKeymap\022\021\n\004NONE\020\377\377\377\377"
  "\377\377\377\377\377\001\022\n\n\006CUSTOM\020\000\022\010\n\004ATOK\020\001\022\t\n\005MSIME\020\002\022"
  "\013\n\007KOTOERI\020\003\022\n\n\006MOBILE\020\004\022\014\n\010CHROMEOS\020\005\"["
  "\n\021PunctuationMethod\022\020\n\014KUTEN_TOUTEN\020\000\022\020\n"
  "\014COMMA_PERIOD\020\001\022\020\n\014KUTEN_PERIOD\020\002\022\020\n\014COM"
  "MA_TOUTEN\020\003\"\200\001\n\014SymbolMethod\022\035\n\031CORNER_B"
  "RACKET_MIDDLE_DOT\020\000\022\030\n\024SQUARE_BRACKET_SL"
  "ASH\020\001\022\030\n\024CORNER_BRACKET_SLASH\020\002\022\035\n\031SQUAR"
  "E_BRACKET_MIDDLE_DOT\020\003\"n\n\030FundamentalCha"
  "racterForm\022\032\n\026FUNDAMENTAL_INPUT_MODE\020\000\022\032"
  "\n\026FUNDAMENTAL_FULL_WIDTH\020\001\022\032\n\026FUNDAMENTA"
  "L_HALF_WIDTH\020\002\"J\n\024HistoryLearningLevel\022\023"
  "\n\017DEFAULT_HISTORY\020\000\022\r\n\tREAD_ONLY\020\001\022\016\n\nNO"
  "_HISTORY\020\002\"T\n\021SelectionShortcut\022\017\n\013NO_SH"
  "ORTCUT\020\000\022\026\n\022SHORTCUT_123456789\020\001\022\026\n\022SHOR"
  "TCUT_ASDFGHJKL\020\002\"Q\n\rCharacterForm\022\016\n\nHAL"
  "F_WIDTH\020\000\022\016\n\nFULL_WIDTH\020\001\022\r\n\tLAST_FORM\020\002"
  "\022\021\n\rNO_CONVERSION\020\003\"L\n\022ShiftKeyModeSwitc"
  "h\022\007\n\003OFF\020\000\022\024\n\020ASCII_INPUT_MODE\020\001\022\027\n\023KATA"
  "KANA_INPUT_MODE\020\002\"s\n\023NumpadCharacterForm"
  "\022\025\n\021NUMPAD_INPUT_MODE\020\000\022\025\n\021NUMPAD_FULL_W"
  "IDTH\020\001\022\025\n\021NUMPAD_HALF_WIDTH\020\002\022\027\n\023NUMPAD_"
  "DIRECT_INPUT\020\003\"\254\001\n\021AutoConversionKey\022\027\n\023"
  "AUTO_CONVERSION_OFF\020\000\022\031\n\025AUTO_CONVERSION"
  "_KUTEN\020\001\022\032\n\026AUTO_CONVERSION_TOUTEN\020\002\022!\n\035"
  "AUTO_CONVERSION_QUESTION_MARK\020\004\022$\n AUTO_"
  "CONVERSION_EXCLAMATION_MARK\020\010\"/\n\020YenSign"
  "Character\022\014\n\010YEN_SIGN\020\000\022\r\n\tBACKSLASH\020\001J\004"
  "\010\002\020\nJ\004\010\013\020\014J\004\010\025\020\026J\006\010\254\002\020\255\002J\006\010\255\002\020\256\002J\006\010\344\007\020\345\007"
  "J\006\010\346\007\020\347\007J\006\010\347\007\020\350\007R\020log_all_commandsR\022uplo"
  "ad_usage_statsR\013sync_configR\027allow_cloud"
  "_handwritingR\rpinyin_configR\rhangul_conf"
  "igR\016chewing_configB=\n.org.mozc.android.i"
  "nputmethod.japanese.protobufB\013ProtoConfi"
  "g"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protocol_2fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_protocol_2fconfig_2eproto_sccs[4] = {
  &scc_info_Config_protocol_2fconfig_2eproto.base,
  &scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto.base,
  &scc_info_Config_InformationListConfig_protocol_2fconfig_2eproto.base,
  &scc_info_GeneralConfig_protocol_2fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protocol_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fconfig_2eproto = {
  false, false, descriptor_table_protodef_protocol_2fconfig_2eproto, "protocol/config.proto", 4041,
  &descriptor_table_protocol_2fconfig_2eproto_once, descriptor_table_protocol_2fconfig_2eproto_sccs, descriptor_table_protocol_2fconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_protocol_2fconfig_2eproto::offsets,
  file_level_metadata_protocol_2fconfig_2eproto, 4, file_level_enum_descriptors_protocol_2fconfig_2eproto, file_level_service_descriptors_protocol_2fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_protocol_2fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_protocol_2fconfig_2eproto)), true);
namespace mozc {
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_PreeditMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[0];
}
bool Config_PreeditMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_PreeditMethod Config::ROMAN;
constexpr Config_PreeditMethod Config::KANA;
constexpr Config_PreeditMethod Config::PreeditMethod_MIN;
constexpr Config_PreeditMethod Config::PreeditMethod_MAX;
constexpr int Config::PreeditMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_SessionKeymap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[1];
}
bool Config_SessionKeymap_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_SessionKeymap Config::NONE;
constexpr Config_SessionKeymap Config::CUSTOM;
constexpr Config_SessionKeymap Config::ATOK;
constexpr Config_SessionKeymap Config::MSIME;
constexpr Config_SessionKeymap Config::KOTOERI;
constexpr Config_SessionKeymap Config::MOBILE;
constexpr Config_SessionKeymap Config::CHROMEOS;
constexpr Config_SessionKeymap Config::SessionKeymap_MIN;
constexpr Config_SessionKeymap Config::SessionKeymap_MAX;
constexpr int Config::SessionKeymap_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_PunctuationMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[2];
}
bool Config_PunctuationMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_PunctuationMethod Config::KUTEN_TOUTEN;
constexpr Config_PunctuationMethod Config::COMMA_PERIOD;
constexpr Config_PunctuationMethod Config::KUTEN_PERIOD;
constexpr Config_PunctuationMethod Config::COMMA_TOUTEN;
constexpr Config_PunctuationMethod Config::PunctuationMethod_MIN;
constexpr Config_PunctuationMethod Config::PunctuationMethod_MAX;
constexpr int Config::PunctuationMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_SymbolMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[3];
}
bool Config_SymbolMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_SymbolMethod Config::CORNER_BRACKET_MIDDLE_DOT;
constexpr Config_SymbolMethod Config::SQUARE_BRACKET_SLASH;
constexpr Config_SymbolMethod Config::CORNER_BRACKET_SLASH;
constexpr Config_SymbolMethod Config::SQUARE_BRACKET_MIDDLE_DOT;
constexpr Config_SymbolMethod Config::SymbolMethod_MIN;
constexpr Config_SymbolMethod Config::SymbolMethod_MAX;
constexpr int Config::SymbolMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_FundamentalCharacterForm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[4];
}
bool Config_FundamentalCharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_FundamentalCharacterForm Config::FUNDAMENTAL_INPUT_MODE;
constexpr Config_FundamentalCharacterForm Config::FUNDAMENTAL_FULL_WIDTH;
constexpr Config_FundamentalCharacterForm Config::FUNDAMENTAL_HALF_WIDTH;
constexpr Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MIN;
constexpr Config_FundamentalCharacterForm Config::FundamentalCharacterForm_MAX;
constexpr int Config::FundamentalCharacterForm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_HistoryLearningLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[5];
}
bool Config_HistoryLearningLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_HistoryLearningLevel Config::DEFAULT_HISTORY;
constexpr Config_HistoryLearningLevel Config::READ_ONLY;
constexpr Config_HistoryLearningLevel Config::NO_HISTORY;
constexpr Config_HistoryLearningLevel Config::HistoryLearningLevel_MIN;
constexpr Config_HistoryLearningLevel Config::HistoryLearningLevel_MAX;
constexpr int Config::HistoryLearningLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_SelectionShortcut_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[6];
}
bool Config_SelectionShortcut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_SelectionShortcut Config::NO_SHORTCUT;
constexpr Config_SelectionShortcut Config::SHORTCUT_123456789;
constexpr Config_SelectionShortcut Config::SHORTCUT_ASDFGHJKL;
constexpr Config_SelectionShortcut Config::SelectionShortcut_MIN;
constexpr Config_SelectionShortcut Config::SelectionShortcut_MAX;
constexpr int Config::SelectionShortcut_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_CharacterForm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[7];
}
bool Config_CharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_CharacterForm Config::HALF_WIDTH;
constexpr Config_CharacterForm Config::FULL_WIDTH;
constexpr Config_CharacterForm Config::LAST_FORM;
constexpr Config_CharacterForm Config::NO_CONVERSION;
constexpr Config_CharacterForm Config::CharacterForm_MIN;
constexpr Config_CharacterForm Config::CharacterForm_MAX;
constexpr int Config::CharacterForm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_ShiftKeyModeSwitch_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[8];
}
bool Config_ShiftKeyModeSwitch_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_ShiftKeyModeSwitch Config::OFF;
constexpr Config_ShiftKeyModeSwitch Config::ASCII_INPUT_MODE;
constexpr Config_ShiftKeyModeSwitch Config::KATAKANA_INPUT_MODE;
constexpr Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MIN;
constexpr Config_ShiftKeyModeSwitch Config::ShiftKeyModeSwitch_MAX;
constexpr int Config::ShiftKeyModeSwitch_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_NumpadCharacterForm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[9];
}
bool Config_NumpadCharacterForm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_NumpadCharacterForm Config::NUMPAD_INPUT_MODE;
constexpr Config_NumpadCharacterForm Config::NUMPAD_FULL_WIDTH;
constexpr Config_NumpadCharacterForm Config::NUMPAD_HALF_WIDTH;
constexpr Config_NumpadCharacterForm Config::NUMPAD_DIRECT_INPUT;
constexpr Config_NumpadCharacterForm Config::NumpadCharacterForm_MIN;
constexpr Config_NumpadCharacterForm Config::NumpadCharacterForm_MAX;
constexpr int Config::NumpadCharacterForm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_AutoConversionKey_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[10];
}
bool Config_AutoConversionKey_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_AutoConversionKey Config::AUTO_CONVERSION_OFF;
constexpr Config_AutoConversionKey Config::AUTO_CONVERSION_KUTEN;
constexpr Config_AutoConversionKey Config::AUTO_CONVERSION_TOUTEN;
constexpr Config_AutoConversionKey Config::AUTO_CONVERSION_QUESTION_MARK;
constexpr Config_AutoConversionKey Config::AUTO_CONVERSION_EXCLAMATION_MARK;
constexpr Config_AutoConversionKey Config::AutoConversionKey_MIN;
constexpr Config_AutoConversionKey Config::AutoConversionKey_MAX;
constexpr int Config::AutoConversionKey_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Config_YenSignCharacter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protocol_2fconfig_2eproto);
  return file_level_enum_descriptors_protocol_2fconfig_2eproto[11];
}
bool Config_YenSignCharacter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Config_YenSignCharacter Config::YEN_SIGN;
constexpr Config_YenSignCharacter Config::BACKSLASH;
constexpr Config_YenSignCharacter Config::YenSignCharacter_MIN;
constexpr Config_YenSignCharacter Config::YenSignCharacter_MAX;
constexpr int Config::YenSignCharacter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GeneralConfig::InitAsDefaultInstance() {
}
class GeneralConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<GeneralConfig>()._has_bits_);
  static void set_has_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_modified_product_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_modified_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ui_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upload_usage_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_;
GeneralConfig::GeneralConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.config.GeneralConfig)
}
GeneralConfig::GeneralConfig(const GeneralConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_modified_product_version_.UnsafeSetDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  if (from._internal_has_last_modified_product_version()) {
    last_modified_product_version_.Set(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(), from._internal_last_modified_product_version(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  ui_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ui_locale()) {
    ui_locale_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ui_locale(),
      GetArena());
  }
  ::memcpy(&last_modified_time_, &from.last_modified_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_usage_stats_) -
    reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.GeneralConfig)
}

void GeneralConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralConfig_protocol_2fconfig_2eproto.base);
  last_modified_product_version_.UnsafeSetDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_modified_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_usage_stats_) -
      reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
}

GeneralConfig::~GeneralConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.GeneralConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GeneralConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_modified_product_version_.DestroyNoArena(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneralConfig::ArenaDtor(void* object) {
  GeneralConfig* _this = reinterpret_cast< GeneralConfig* >(object);
  (void)_this;
}
void GeneralConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GeneralConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralConfig& GeneralConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralConfig_protocol_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void GeneralConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.GeneralConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_modified_product_version_.ClearToDefault(&::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(), GetArena());
    }
    if (cached_has_bits & 0x00000002u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ui_locale_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&last_modified_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_usage_stats_) -
        reinterpret_cast<char*>(&last_modified_time_)) + sizeof(upload_usage_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeneralConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 config_version = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_config_version(&has_bits);
          config_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_last_modified_product_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.config.GeneralConfig.last_modified_product_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 last_modified_time = 3 [default = 0, jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_modified_time(&has_bits);
          last_modified_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform = 4 [default = ""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.config.GeneralConfig.platform");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ui_locale = 5 [default = ""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ui_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.config.GeneralConfig.ui_locale");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool upload_usage_stats = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_upload_usage_stats(&has_bits);
          upload_usage_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.GeneralConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 config_version = 1 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_config_version(), target);
  }

  // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_last_modified_product_version().data(), static_cast<int>(this->_internal_last_modified_product_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.last_modified_product_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_modified_product_version(), target);
  }

  // optional uint64 last_modified_time = 3 [default = 0, jstype = JS_STRING];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_modified_time(), target);
  }

  // optional string platform = 4 [default = ""];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.platform");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_platform(), target);
  }

  // optional string ui_locale = 5 [default = ""];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ui_locale().data(), static_cast<int>(this->_internal_ui_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.config.GeneralConfig.ui_locale");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ui_locale(), target);
  }

  // optional bool upload_usage_stats = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_upload_usage_stats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.GeneralConfig)
  return target;
}

size_t GeneralConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.GeneralConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string last_modified_product_version = 2 [default = "0.0.0.0"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_modified_product_version());
    }

    // optional string platform = 4 [default = ""];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string ui_locale = 5 [default = ""];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ui_locale());
    }

    // optional uint64 last_modified_time = 3 [default = 0, jstype = JS_STRING];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_last_modified_time());
    }

    // optional uint32 config_version = 1 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_config_version());
    }

    // optional bool upload_usage_stats = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.GeneralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.GeneralConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.GeneralConfig)
    MergeFrom(*source);
  }
}

void GeneralConfig::MergeFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.GeneralConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_last_modified_product_version(from._internal_last_modified_product_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ui_locale(from._internal_ui_locale());
    }
    if (cached_has_bits & 0x00000008u) {
      last_modified_time_ = from.last_modified_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      config_version_ = from.config_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_usage_stats_ = from.upload_usage_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GeneralConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralConfig::CopyFrom(const GeneralConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.GeneralConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralConfig::IsInitialized() const {
  return true;
}

void GeneralConfig::InternalSwap(GeneralConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_modified_product_version_.Swap(&other->last_modified_product_version_, &::mozc::config::GeneralConfig::_i_give_permission_to_break_this_code_default_last_modified_product_version_.get(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ui_locale_.Swap(&other->ui_locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeneralConfig, upload_usage_stats_)
      + sizeof(GeneralConfig::upload_usage_stats_)
      - PROTOBUF_FIELD_OFFSET(GeneralConfig, last_modified_time_)>(
          reinterpret_cast<char*>(&last_modified_time_),
          reinterpret_cast<char*>(&other->last_modified_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_CharacterFormRule::InitAsDefaultInstance() {
}
class Config_CharacterFormRule::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_CharacterFormRule>()._has_bits_);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preedit_character_form(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_conversion_character_form(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Config_CharacterFormRule::Config_CharacterFormRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.config.Config.CharacterFormRule)
}
Config_CharacterFormRule::Config_CharacterFormRule(const Config_CharacterFormRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group()) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group(),
      GetArena());
  }
  ::memcpy(&preedit_character_form_, &from.preedit_character_form_,
    static_cast<size_t>(reinterpret_cast<char*>(&conversion_character_form_) -
    reinterpret_cast<char*>(&preedit_character_form_)) + sizeof(conversion_character_form_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.CharacterFormRule)
}

void Config_CharacterFormRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto.base);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preedit_character_form_ = 1;
  conversion_character_form_ = 1;
}

Config_CharacterFormRule::~Config_CharacterFormRule() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.CharacterFormRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config_CharacterFormRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Config_CharacterFormRule::ArenaDtor(void* object) {
  Config_CharacterFormRule* _this = reinterpret_cast< Config_CharacterFormRule* >(object);
  (void)_this;
}
void Config_CharacterFormRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config_CharacterFormRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_CharacterFormRule& Config_CharacterFormRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_CharacterFormRule_protocol_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config_CharacterFormRule::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.CharacterFormRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      group_.ClearNonDefaultToEmpty();
    }
    preedit_character_form_ = 1;
    conversion_character_form_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config_CharacterFormRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mozc.config.Config.CharacterFormRule.group");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_CharacterForm_IsValid(val))) {
            _internal_set_preedit_character_form(static_cast<::mozc::config::Config_CharacterForm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_CharacterForm_IsValid(val))) {
            _internal_set_conversion_character_form(static_cast<::mozc::config::Config_CharacterForm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_CharacterFormRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.CharacterFormRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string group = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mozc.config.Config.CharacterFormRule.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_preedit_character_form(), target);
  }

  // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_conversion_character_form(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.CharacterFormRule)
  return target;
}

size_t Config_CharacterFormRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.CharacterFormRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string group = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group());
    }

    // optional .mozc.config.Config.CharacterForm preedit_character_form = 2 [default = FULL_WIDTH];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preedit_character_form());
    }

    // optional .mozc.config.Config.CharacterForm conversion_character_form = 3 [default = FULL_WIDTH];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_conversion_character_form());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_CharacterFormRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.CharacterFormRule)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_CharacterFormRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_CharacterFormRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.CharacterFormRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.CharacterFormRule)
    MergeFrom(*source);
  }
}

void Config_CharacterFormRule::MergeFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.CharacterFormRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group(from._internal_group());
    }
    if (cached_has_bits & 0x00000002u) {
      preedit_character_form_ = from.preedit_character_form_;
    }
    if (cached_has_bits & 0x00000004u) {
      conversion_character_form_ = from.conversion_character_form_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Config_CharacterFormRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_CharacterFormRule::CopyFrom(const Config_CharacterFormRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.CharacterFormRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_CharacterFormRule::IsInitialized() const {
  return true;
}

void Config_CharacterFormRule::InternalSwap(Config_CharacterFormRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(preedit_character_form_, other->preedit_character_form_);
  swap(conversion_character_form_, other->conversion_character_form_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_CharacterFormRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config_InformationListConfig::InitAsDefaultInstance() {
}
class Config_InformationListConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<Config_InformationListConfig>()._has_bits_);
  static void set_has_use_local_usage_dictionary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Config_InformationListConfig::Config_InformationListConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.config.Config.InformationListConfig)
}
Config_InformationListConfig::Config_InformationListConfig(const Config_InformationListConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  use_local_usage_dictionary_ = from.use_local_usage_dictionary_;
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config.InformationListConfig)
}

void Config_InformationListConfig::SharedCtor() {
  use_local_usage_dictionary_ = true;
}

Config_InformationListConfig::~Config_InformationListConfig() {
  // @@protoc_insertion_point(destructor:mozc.config.Config.InformationListConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config_InformationListConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Config_InformationListConfig::ArenaDtor(void* object) {
  Config_InformationListConfig* _this = reinterpret_cast< Config_InformationListConfig* >(object);
  (void)_this;
}
void Config_InformationListConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config_InformationListConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config_InformationListConfig& Config_InformationListConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_InformationListConfig_protocol_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config_InformationListConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config.InformationListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_local_usage_dictionary_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config_InformationListConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool use_local_usage_dictionary = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_local_usage_dictionary(&has_bits);
          use_local_usage_dictionary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config_InformationListConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config.InformationListConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_local_usage_dictionary = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_local_usage_dictionary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config.InformationListConfig)
  return target;
}

size_t Config_InformationListConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config.InformationListConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool use_local_usage_dictionary = 1 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_InformationListConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config.InformationListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_InformationListConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config_InformationListConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config.InformationListConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config.InformationListConfig)
    MergeFrom(*source);
  }
}

void Config_InformationListConfig::MergeFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config.InformationListConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_local_usage_dictionary()) {
    _internal_set_use_local_usage_dictionary(from._internal_use_local_usage_dictionary());
  }
}

void Config_InformationListConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_InformationListConfig::CopyFrom(const Config_InformationListConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config.InformationListConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_InformationListConfig::IsInitialized() const {
  return true;
}

void Config_InformationListConfig::InternalSwap(Config_InformationListConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(use_local_usage_dictionary_, other->use_local_usage_dictionary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config_InformationListConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::mozc::config::_Config_default_instance_._instance.get_mutable()->general_config_ = const_cast< ::mozc::config::GeneralConfig*>(
      ::mozc::config::GeneralConfig::internal_default_instance());
  ::mozc::config::_Config_default_instance_._instance.get_mutable()->information_list_config_ = const_cast< ::mozc::config::Config_InformationListConfig*>(
      ::mozc::config::Config_InformationListConfig::internal_default_instance());
}
class Config::_Internal {
 public:
  using HasBits = decltype(std::declval<Config>()._has_bits_);
  static const ::mozc::config::GeneralConfig& general_config(const Config* msg);
  static void set_has_general_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_verbose_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_incognito_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_check_default(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_presentation_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preedit_method(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_session_keymap(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_custom_keymap_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_roman_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_punctuation_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_symbol_method(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_space_character_form(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_use_keyboard_to_change_preedit_method(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_history_learning_level(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_selection_shortcut(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_use_auto_ime_turn_off(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_use_cascading_window(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_shift_key_mode_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_numpad_character_form(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_use_auto_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_auto_conversion_key(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_yen_sign_character(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_use_japanese_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_kana_modifier_insensitive_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_use_typing_correction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_use_date_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_use_single_kanji_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_use_symbol_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_use_number_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_use_emoticon_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_use_calculator(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_use_t13n_conversion(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_use_zip_code_conversion(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_use_spelling_correction(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_use_emoji_conversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::mozc::config::Config_InformationListConfig& information_list_config(const Config* msg);
  static void set_has_information_list_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_history_suggest(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_use_dictionary_suggest(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_use_realtime_conversion(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_suggestions_size(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_use_mode_indicator(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
};

const ::mozc::config::GeneralConfig&
Config::_Internal::general_config(const Config* msg) {
  return *msg->general_config_;
}
const ::mozc::config::Config_InformationListConfig&
Config::_Internal::information_list_config(const Config* msg) {
  return *msg->information_list_config_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  character_form_rules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mozc.config.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      character_form_rules_(from.character_form_rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_keymap_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_keymap_table()) {
    custom_keymap_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_keymap_table(),
      GetArena());
  }
  custom_roman_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_roman_table()) {
    custom_roman_table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_roman_table(),
      GetArena());
  }
  if (from._internal_has_general_config()) {
    general_config_ = new ::mozc::config::GeneralConfig(*from.general_config_);
  } else {
    general_config_ = nullptr;
  }
  if (from._internal_has_information_list_config()) {
    information_list_config_ = new ::mozc::config::Config_InformationListConfig(*from.information_list_config_);
  } else {
    information_list_config_ = nullptr;
  }
  ::memcpy(&verbose_level_, &from.verbose_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&suggestions_size_) -
    reinterpret_cast<char*>(&verbose_level_)) + sizeof(suggestions_size_));
  // @@protoc_insertion_point(copy_constructor:mozc.config.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_protocol_2fconfig_2eproto.base);
  custom_keymap_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yen_sign_character_) -
      reinterpret_cast<char*>(&general_config_)) + sizeof(yen_sign_character_));
  session_keymap_ = -1;
  selection_shortcut_ = 1;
  check_default_ = true;
  use_auto_ime_turn_off_ = true;
  use_cascading_window_ = true;
  use_date_conversion_ = true;
  shift_key_mode_switch_ = 1;
  numpad_character_form_ = 2;
  auto_conversion_key_ = 13u;
  use_single_kanji_conversion_ = true;
  use_symbol_conversion_ = true;
  use_number_conversion_ = true;
  use_emoticon_conversion_ = true;
  use_calculator_ = true;
  use_t13n_conversion_ = true;
  use_zip_code_conversion_ = true;
  use_spelling_correction_ = true;
  use_history_suggest_ = true;
  use_dictionary_suggest_ = true;
  use_realtime_conversion_ = true;
  use_mode_indicator_ = true;
  suggestions_size_ = 3u;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:mozc.config.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  custom_keymap_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_roman_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete general_config_;
  if (this != internal_default_instance()) delete information_list_config_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_protocol_2fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:mozc.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  character_form_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      custom_keymap_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      custom_roman_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(general_config_ != nullptr);
      general_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(information_list_config_ != nullptr);
      information_list_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&verbose_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_keyboard_to_change_preedit_method_) -
        reinterpret_cast<char*>(&verbose_level_)) + sizeof(use_keyboard_to_change_preedit_method_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&use_auto_conversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&symbol_method_) -
        reinterpret_cast<char*>(&use_auto_conversion_)) + sizeof(symbol_method_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&space_character_form_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yen_sign_character_) -
        reinterpret_cast<char*>(&space_character_form_)) + sizeof(yen_sign_character_));
    session_keymap_ = -1;
    selection_shortcut_ = 1;
    check_default_ = true;
    use_auto_ime_turn_off_ = true;
    use_cascading_window_ = true;
  }
  if (cached_has_bits & 0xff000000u) {
    use_date_conversion_ = true;
    shift_key_mode_switch_ = 1;
    numpad_character_form_ = 2;
    auto_conversion_key_ = 13u;
    use_single_kanji_conversion_ = true;
    use_symbol_conversion_ = true;
    use_number_conversion_ = true;
    use_emoticon_conversion_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    use_calculator_ = true;
    use_t13n_conversion_ = true;
    use_zip_code_conversion_ = true;
    use_spelling_correction_ = true;
    use_history_suggest_ = true;
    use_dictionary_suggest_ = true;
    use_realtime_conversion_ = true;
    use_mode_indicator_ = true;
  }
  suggestions_size_ = 3u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozc.config.GeneralConfig general_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_general_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 verbose_level = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_verbose_level(&_has_bits_);
          verbose_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool incognito_mode = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_incognito_mode(&_has_bits_);
          incognito_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool check_default = 22 [default = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_check_default(&_has_bits_);
          check_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool presentation_mode = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_presentation_mode(&_has_bits_);
          presentation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_PreeditMethod_IsValid(val))) {
            _internal_set_preedit_method(static_cast<::mozc::config::Config_PreeditMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_SessionKeymap_IsValid(val))) {
            _internal_set_session_keymap(static_cast<::mozc::config::Config_SessionKeymap>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes custom_keymap_table = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_custom_keymap_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes custom_roman_table = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_custom_roman_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_PunctuationMethod_IsValid(val))) {
            _internal_set_punctuation_method(static_cast<::mozc::config::Config_PunctuationMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(45, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_SymbolMethod_IsValid(val))) {
            _internal_set_symbol_method(static_cast<::mozc::config::Config_SymbolMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_FundamentalCharacterForm_IsValid(val))) {
            _internal_set_space_character_form(static_cast<::mozc::config::Config_FundamentalCharacterForm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(47, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_keyboard_to_change_preedit_method(&_has_bits_);
          use_keyboard_to_change_preedit_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_HistoryLearningLevel_IsValid(val))) {
            _internal_set_history_learning_level(static_cast<::mozc::config::Config_HistoryLearningLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_SelectionShortcut_IsValid(val))) {
            _internal_set_selection_shortcut(static_cast<::mozc::config::Config_SelectionShortcut>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_character_form_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool use_auto_ime_turn_off = 56 [default = true];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_auto_ime_turn_off(&_has_bits_);
          use_auto_ime_turn_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_cascading_window = 58 [default = true];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_use_cascading_window(&_has_bits_);
          use_cascading_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_ShiftKeyModeSwitch_IsValid(val))) {
            _internal_set_shift_key_mode_switch(static_cast<::mozc::config::Config_ShiftKeyModeSwitch>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(59, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_NumpadCharacterForm_IsValid(val))) {
            _internal_set_numpad_character_form(static_cast<::mozc::config::Config_NumpadCharacterForm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(60, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_auto_conversion = 61 [default = false];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_use_auto_conversion(&_has_bits_);
          use_auto_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 auto_conversion_key = 62 [default = 13];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_auto_conversion_key(&_has_bits_);
          auto_conversion_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozc::config::Config_YenSignCharacter_IsValid(val))) {
            _internal_set_yen_sign_character(static_cast<::mozc::config::Config_YenSignCharacter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(63, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool use_japanese_layout = 64 [default = false];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_use_japanese_layout(&_has_bits_);
          use_japanese_layout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_use_kana_modifier_insensitive_conversion(&_has_bits_);
          use_kana_modifier_insensitive_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_typing_correction = 66 [default = false];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_typing_correction(&_has_bits_);
          use_typing_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_date_conversion = 80 [default = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_date_conversion(&_has_bits_);
          use_date_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_single_kanji_conversion = 81 [default = true];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_use_single_kanji_conversion(&_has_bits_);
          use_single_kanji_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_symbol_conversion = 82 [default = true];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_use_symbol_conversion(&_has_bits_);
          use_symbol_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_number_conversion = 83 [default = true];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_use_number_conversion(&_has_bits_);
          use_number_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_emoticon_conversion = 84 [default = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_use_emoticon_conversion(&_has_bits_);
          use_emoticon_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_calculator = 85 [default = true];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_use_calculator(&_has_bits_);
          use_calculator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_t13n_conversion = 86 [default = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_use_t13n_conversion(&_has_bits_);
          use_t13n_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_zip_code_conversion = 87 [default = true];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_use_zip_code_conversion(&_has_bits_);
          use_zip_code_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_spelling_correction = 88 [default = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_spelling_correction(&_has_bits_);
          use_spelling_correction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_emoji_conversion = 89 [default = false];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_use_emoji_conversion(&_has_bits_);
          use_emoji_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_information_list_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_history_suggest = 100 [default = true];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_use_history_suggest(&_has_bits_);
          use_history_suggest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_dictionary_suggest = 101 [default = true];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_dictionary_suggest(&_has_bits_);
          use_dictionary_suggest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_realtime_conversion = 102 [default = true];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_realtime_conversion(&_has_bits_);
          use_realtime_conversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suggestions_size = 110 [default = 3];
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_suggestions_size(&_has_bits_);
          suggestions_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_mode_indicator = 120 [default = true];
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_use_mode_indicator(&_has_bits_);
          use_mode_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozc.config.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozc.config.GeneralConfig general_config = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::general_config(this), target, stream);
  }

  // optional int32 verbose_level = 10 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_verbose_level(), target);
  }

  // optional bool incognito_mode = 20 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_incognito_mode(), target);
  }

  // optional bool check_default = 22 [default = true];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_check_default(), target);
  }

  // optional bool presentation_mode = 23 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_presentation_mode(), target);
  }

  // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_preedit_method(), target);
  }

  // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      41, this->_internal_session_keymap(), target);
  }

  // optional bytes custom_keymap_table = 42;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        42, this->_internal_custom_keymap_table(), target);
  }

  // optional bytes custom_roman_table = 43;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        43, this->_internal_custom_roman_table(), target);
  }

  // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      45, this->_internal_punctuation_method(), target);
  }

  // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_symbol_method(), target);
  }

  // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      47, this->_internal_space_character_form(), target);
  }

  // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_use_keyboard_to_change_preedit_method(), target);
  }

  // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      50, this->_internal_history_learning_level(), target);
  }

  // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      52, this->_internal_selection_shortcut(), target);
  }

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_character_form_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_character_form_rules(i), target, stream);
  }

  // optional bool use_auto_ime_turn_off = 56 [default = true];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_use_auto_ime_turn_off(), target);
  }

  // optional bool use_cascading_window = 58 [default = true];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_use_cascading_window(), target);
  }

  // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      59, this->_internal_shift_key_mode_switch(), target);
  }

  // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      60, this->_internal_numpad_character_form(), target);
  }

  // optional bool use_auto_conversion = 61 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_use_auto_conversion(), target);
  }

  // optional uint32 auto_conversion_key = 62 [default = 13];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_auto_conversion_key(), target);
  }

  // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      63, this->_internal_yen_sign_character(), target);
  }

  // optional bool use_japanese_layout = 64 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_use_japanese_layout(), target);
  }

  // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_use_kana_modifier_insensitive_conversion(), target);
  }

  // optional bool use_typing_correction = 66 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_use_typing_correction(), target);
  }

  // optional bool use_date_conversion = 80 [default = true];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_use_date_conversion(), target);
  }

  // optional bool use_single_kanji_conversion = 81 [default = true];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(81, this->_internal_use_single_kanji_conversion(), target);
  }

  // optional bool use_symbol_conversion = 82 [default = true];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(82, this->_internal_use_symbol_conversion(), target);
  }

  // optional bool use_number_conversion = 83 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(83, this->_internal_use_number_conversion(), target);
  }

  // optional bool use_emoticon_conversion = 84 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(84, this->_internal_use_emoticon_conversion(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_calculator = 85 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(85, this->_internal_use_calculator(), target);
  }

  // optional bool use_t13n_conversion = 86 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(86, this->_internal_use_t13n_conversion(), target);
  }

  // optional bool use_zip_code_conversion = 87 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(87, this->_internal_use_zip_code_conversion(), target);
  }

  // optional bool use_spelling_correction = 88 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(88, this->_internal_use_spelling_correction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_emoji_conversion = 89 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(89, this->_internal_use_emoji_conversion(), target);
  }

  // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::information_list_config(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_history_suggest = 100 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(100, this->_internal_use_history_suggest(), target);
  }

  // optional bool use_dictionary_suggest = 101 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(101, this->_internal_use_dictionary_suggest(), target);
  }

  // optional bool use_realtime_conversion = 102 [default = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_use_realtime_conversion(), target);
  }

  // optional uint32 suggestions_size = 110 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(110, this->_internal_suggestions_size(), target);
  }

  // optional bool use_mode_indicator = 120 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(120, this->_internal_use_mode_indicator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozc.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozc.config.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozc.config.Config.CharacterFormRule character_form_rules = 54;
  total_size += 2UL * this->_internal_character_form_rules_size();
  for (const auto& msg : this->character_form_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes custom_keymap_table = 42;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_keymap_table());
    }

    // optional bytes custom_roman_table = 43;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_custom_roman_table());
    }

    // optional .mozc.config.GeneralConfig general_config = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *general_config_);
    }

    // optional .mozc.config.Config.InformationListConfig information_list_config = 90;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *information_list_config_);
    }

    // optional int32 verbose_level = 10 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_verbose_level());
    }

    // optional bool incognito_mode = 20 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool presentation_mode = 23 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool use_keyboard_to_change_preedit_method = 48 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_auto_conversion = 61 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.PreeditMethod preedit_method = 40 [default = ROMAN];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preedit_method());
    }

    // optional .mozc.config.Config.PunctuationMethod punctuation_method = 45 [default = KUTEN_TOUTEN];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_punctuation_method());
    }

    // optional bool use_japanese_layout = 64 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool use_kana_modifier_insensitive_conversion = 65 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool use_typing_correction = 66 [default = false];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool use_emoji_conversion = 89 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.SymbolMethod symbol_method = 46 [default = CORNER_BRACKET_MIDDLE_DOT];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_symbol_method());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .mozc.config.Config.FundamentalCharacterForm space_character_form = 47 [default = FUNDAMENTAL_INPUT_MODE];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_space_character_form());
    }

    // optional .mozc.config.Config.HistoryLearningLevel history_learning_level = 50 [default = DEFAULT_HISTORY];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_history_learning_level());
    }

    // optional .mozc.config.Config.YenSignCharacter yen_sign_character = 63 [default = YEN_SIGN];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_yen_sign_character());
    }

    // optional .mozc.config.Config.SessionKeymap session_keymap = 41 [default = NONE];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_keymap());
    }

    // optional .mozc.config.Config.SelectionShortcut selection_shortcut = 52 [default = SHORTCUT_123456789];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_shortcut());
    }

    // optional bool check_default = 22 [default = true];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool use_auto_ime_turn_off = 56 [default = true];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool use_cascading_window = 58 [default = true];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool use_date_conversion = 80 [default = true];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional .mozc.config.Config.ShiftKeyModeSwitch shift_key_mode_switch = 59 [default = ASCII_INPUT_MODE];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shift_key_mode_switch());
    }

    // optional .mozc.config.Config.NumpadCharacterForm numpad_character_form = 60 [default = NUMPAD_HALF_WIDTH];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_numpad_character_form());
    }

    // optional uint32 auto_conversion_key = 62 [default = 13];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_auto_conversion_key());
    }

    // optional bool use_single_kanji_conversion = 81 [default = true];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_symbol_conversion = 82 [default = true];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_number_conversion = 83 [default = true];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_emoticon_conversion = 84 [default = true];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool use_calculator = 85 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool use_t13n_conversion = 86 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool use_zip_code_conversion = 87 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool use_spelling_correction = 88 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool use_history_suggest = 100 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool use_dictionary_suggest = 101 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool use_realtime_conversion = 102 [default = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool use_mode_indicator = 120 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  // optional uint32 suggestions_size = 110 [default = 3];
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_suggestions_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mozc.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mozc.config.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mozc.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozc.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  character_form_rules_.MergeFrom(from.character_form_rules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_custom_keymap_table(from._internal_custom_keymap_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_custom_roman_table(from._internal_custom_roman_table());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_general_config()->::mozc::config::GeneralConfig::MergeFrom(from._internal_general_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_information_list_config()->::mozc::config::Config_InformationListConfig::MergeFrom(from._internal_information_list_config());
    }
    if (cached_has_bits & 0x00000010u) {
      verbose_level_ = from.verbose_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      incognito_mode_ = from.incognito_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      presentation_mode_ = from.presentation_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_keyboard_to_change_preedit_method_ = from.use_keyboard_to_change_preedit_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      use_auto_conversion_ = from.use_auto_conversion_;
    }
    if (cached_has_bits & 0x00000200u) {
      preedit_method_ = from.preedit_method_;
    }
    if (cached_has_bits & 0x00000400u) {
      punctuation_method_ = from.punctuation_method_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_japanese_layout_ = from.use_japanese_layout_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_kana_modifier_insensitive_conversion_ = from.use_kana_modifier_insensitive_conversion_;
    }
    if (cached_has_bits & 0x00002000u) {
      use_typing_correction_ = from.use_typing_correction_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_emoji_conversion_ = from.use_emoji_conversion_;
    }
    if (cached_has_bits & 0x00008000u) {
      symbol_method_ = from.symbol_method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      space_character_form_ = from.space_character_form_;
    }
    if (cached_has_bits & 0x00020000u) {
      history_learning_level_ = from.history_learning_level_;
    }
    if (cached_has_bits & 0x00040000u) {
      yen_sign_character_ = from.yen_sign_character_;
    }
    if (cached_has_bits & 0x00080000u) {
      session_keymap_ = from.session_keymap_;
    }
    if (cached_has_bits & 0x00100000u) {
      selection_shortcut_ = from.selection_shortcut_;
    }
    if (cached_has_bits & 0x00200000u) {
      check_default_ = from.check_default_;
    }
    if (cached_has_bits & 0x00400000u) {
      use_auto_ime_turn_off_ = from.use_auto_ime_turn_off_;
    }
    if (cached_has_bits & 0x00800000u) {
      use_cascading_window_ = from.use_cascading_window_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      use_date_conversion_ = from.use_date_conversion_;
    }
    if (cached_has_bits & 0x02000000u) {
      shift_key_mode_switch_ = from.shift_key_mode_switch_;
    }
    if (cached_has_bits & 0x04000000u) {
      numpad_character_form_ = from.numpad_character_form_;
    }
    if (cached_has_bits & 0x08000000u) {
      auto_conversion_key_ = from.auto_conversion_key_;
    }
    if (cached_has_bits & 0x10000000u) {
      use_single_kanji_conversion_ = from.use_single_kanji_conversion_;
    }
    if (cached_has_bits & 0x20000000u) {
      use_symbol_conversion_ = from.use_symbol_conversion_;
    }
    if (cached_has_bits & 0x40000000u) {
      use_number_conversion_ = from.use_number_conversion_;
    }
    if (cached_has_bits & 0x80000000u) {
      use_emoticon_conversion_ = from.use_emoticon_conversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      use_calculator_ = from.use_calculator_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_t13n_conversion_ = from.use_t13n_conversion_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_zip_code_conversion_ = from.use_zip_code_conversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      use_spelling_correction_ = from.use_spelling_correction_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_history_suggest_ = from.use_history_suggest_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_dictionary_suggest_ = from.use_dictionary_suggest_;
    }
    if (cached_has_bits & 0x00000040u) {
      use_realtime_conversion_ = from.use_realtime_conversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      use_mode_indicator_ = from.use_mode_indicator_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_suggestions_size(from._internal_suggestions_size());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozc.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  character_form_rules_.InternalSwap(&other->character_form_rules_);
  custom_keymap_table_.Swap(&other->custom_keymap_table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_roman_table_.Swap(&other->custom_roman_table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, yen_sign_character_)
      + sizeof(Config::yen_sign_character_)
      - PROTOBUF_FIELD_OFFSET(Config, general_config_)>(
          reinterpret_cast<char*>(&general_config_),
          reinterpret_cast<char*>(&other->general_config_));
  swap(session_keymap_, other->session_keymap_);
  swap(selection_shortcut_, other->selection_shortcut_);
  swap(check_default_, other->check_default_);
  swap(use_auto_ime_turn_off_, other->use_auto_ime_turn_off_);
  swap(use_cascading_window_, other->use_cascading_window_);
  swap(use_date_conversion_, other->use_date_conversion_);
  swap(shift_key_mode_switch_, other->shift_key_mode_switch_);
  swap(numpad_character_form_, other->numpad_character_form_);
  swap(auto_conversion_key_, other->auto_conversion_key_);
  swap(use_single_kanji_conversion_, other->use_single_kanji_conversion_);
  swap(use_symbol_conversion_, other->use_symbol_conversion_);
  swap(use_number_conversion_, other->use_number_conversion_);
  swap(use_emoticon_conversion_, other->use_emoticon_conversion_);
  swap(use_calculator_, other->use_calculator_);
  swap(use_t13n_conversion_, other->use_t13n_conversion_);
  swap(use_zip_code_conversion_, other->use_zip_code_conversion_);
  swap(use_spelling_correction_, other->use_spelling_correction_);
  swap(use_history_suggest_, other->use_history_suggest_);
  swap(use_dictionary_suggest_, other->use_dictionary_suggest_);
  swap(use_realtime_conversion_, other->use_realtime_conversion_);
  swap(use_mode_indicator_, other->use_mode_indicator_);
  swap(suggestions_size_, other->suggestions_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozc::config::GeneralConfig* Arena::CreateMaybeMessage< ::mozc::config::GeneralConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::config::GeneralConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::config::Config_CharacterFormRule* Arena::CreateMaybeMessage< ::mozc::config::Config_CharacterFormRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::config::Config_CharacterFormRule >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::config::Config_InformationListConfig* Arena::CreateMaybeMessage< ::mozc::config::Config_InformationListConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::config::Config_InformationListConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::mozc::config::Config* Arena::CreateMaybeMessage< ::mozc::config::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mozc::config::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
