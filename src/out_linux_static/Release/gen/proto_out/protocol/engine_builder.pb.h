// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol/engine_builder.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2fengine_5fbuilder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2fengine_5fbuilder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2fengine_5fbuilder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2fengine_5fbuilder_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2fengine_5fbuilder_2eproto;
namespace mozc {
class EngineReloadRequest;
class EngineReloadRequestDefaultTypeInternal;
extern EngineReloadRequestDefaultTypeInternal _EngineReloadRequest_default_instance_;
class EngineReloadResponse;
class EngineReloadResponseDefaultTypeInternal;
extern EngineReloadResponseDefaultTypeInternal _EngineReloadResponse_default_instance_;
}  // namespace mozc
PROTOBUF_NAMESPACE_OPEN
template<> ::mozc::EngineReloadRequest* Arena::CreateMaybeMessage<::mozc::EngineReloadRequest>(Arena*);
template<> ::mozc::EngineReloadResponse* Arena::CreateMaybeMessage<::mozc::EngineReloadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozc {

enum EngineReloadRequest_EngineType : int {
  EngineReloadRequest_EngineType_DESKTOP = 0,
  EngineReloadRequest_EngineType_MOBILE = 1
};
bool EngineReloadRequest_EngineType_IsValid(int value);
constexpr EngineReloadRequest_EngineType EngineReloadRequest_EngineType_EngineType_MIN = EngineReloadRequest_EngineType_DESKTOP;
constexpr EngineReloadRequest_EngineType EngineReloadRequest_EngineType_EngineType_MAX = EngineReloadRequest_EngineType_MOBILE;
constexpr int EngineReloadRequest_EngineType_EngineType_ARRAYSIZE = EngineReloadRequest_EngineType_EngineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineReloadRequest_EngineType_descriptor();
template<typename T>
inline const std::string& EngineReloadRequest_EngineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EngineReloadRequest_EngineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EngineReloadRequest_EngineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EngineReloadRequest_EngineType_descriptor(), enum_t_value);
}
inline bool EngineReloadRequest_EngineType_Parse(
    const std::string& name, EngineReloadRequest_EngineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EngineReloadRequest_EngineType>(
    EngineReloadRequest_EngineType_descriptor(), name, value);
}
enum EngineReloadResponse_Status : int {
  EngineReloadResponse_Status_ACCEPTED = 0,
  EngineReloadResponse_Status_RELOAD_READY = 1,
  EngineReloadResponse_Status_RELOADED = 2,
  EngineReloadResponse_Status_ALREADY_RUNNING = 3,
  EngineReloadResponse_Status_ENGINE_VERSION_MISMATCH = 4,
  EngineReloadResponse_Status_DATA_MISSING = 5,
  EngineReloadResponse_Status_DATA_BROKEN = 6,
  EngineReloadResponse_Status_MMAP_FAILURE = 7,
  EngineReloadResponse_Status_INSTALL_FAILURE = 8,
  EngineReloadResponse_Status_UNKNOWN_ERROR = 9
};
bool EngineReloadResponse_Status_IsValid(int value);
constexpr EngineReloadResponse_Status EngineReloadResponse_Status_Status_MIN = EngineReloadResponse_Status_ACCEPTED;
constexpr EngineReloadResponse_Status EngineReloadResponse_Status_Status_MAX = EngineReloadResponse_Status_UNKNOWN_ERROR;
constexpr int EngineReloadResponse_Status_Status_ARRAYSIZE = EngineReloadResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EngineReloadResponse_Status_descriptor();
template<typename T>
inline const std::string& EngineReloadResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EngineReloadResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EngineReloadResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EngineReloadResponse_Status_descriptor(), enum_t_value);
}
inline bool EngineReloadResponse_Status_Parse(
    const std::string& name, EngineReloadResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EngineReloadResponse_Status>(
    EngineReloadResponse_Status_descriptor(), name, value);
}
// ===================================================================

class EngineReloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.EngineReloadRequest) */ {
 public:
  inline EngineReloadRequest() : EngineReloadRequest(nullptr) {};
  virtual ~EngineReloadRequest();

  EngineReloadRequest(const EngineReloadRequest& from);
  EngineReloadRequest(EngineReloadRequest&& from) noexcept
    : EngineReloadRequest() {
    *this = ::std::move(from);
  }

  inline EngineReloadRequest& operator=(const EngineReloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineReloadRequest& operator=(EngineReloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineReloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineReloadRequest* internal_default_instance() {
    return reinterpret_cast<const EngineReloadRequest*>(
               &_EngineReloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EngineReloadRequest& a, EngineReloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineReloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineReloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineReloadRequest* New() const final {
    return CreateMaybeMessage<EngineReloadRequest>(nullptr);
  }

  EngineReloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineReloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineReloadRequest& from);
  void MergeFrom(const EngineReloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineReloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.EngineReloadRequest";
  }
  protected:
  explicit EngineReloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fengine_5fbuilder_2eproto);
    return ::descriptor_table_protocol_2fengine_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EngineReloadRequest_EngineType EngineType;
  static constexpr EngineType DESKTOP =
    EngineReloadRequest_EngineType_DESKTOP;
  static constexpr EngineType MOBILE =
    EngineReloadRequest_EngineType_MOBILE;
  static inline bool EngineType_IsValid(int value) {
    return EngineReloadRequest_EngineType_IsValid(value);
  }
  static constexpr EngineType EngineType_MIN =
    EngineReloadRequest_EngineType_EngineType_MIN;
  static constexpr EngineType EngineType_MAX =
    EngineReloadRequest_EngineType_EngineType_MAX;
  static constexpr int EngineType_ARRAYSIZE =
    EngineReloadRequest_EngineType_EngineType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EngineType_descriptor() {
    return EngineReloadRequest_EngineType_descriptor();
  }
  template<typename T>
  static inline const std::string& EngineType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EngineType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EngineType_Name.");
    return EngineReloadRequest_EngineType_Name(enum_t_value);
  }
  static inline bool EngineType_Parse(const std::string& name,
      EngineType* value) {
    return EngineReloadRequest_EngineType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 2,
    kInstallLocationFieldNumber = 3,
    kMagicNumberFieldNumber = 4,
    kEngineTypeFieldNumber = 1,
  };
  // required string file_path = 2;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_file_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_path(
      std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // optional string install_location = 3;
  bool has_install_location() const;
  private:
  bool _internal_has_install_location() const;
  public:
  void clear_install_location();
  const std::string& install_location() const;
  void set_install_location(const std::string& value);
  void set_install_location(std::string&& value);
  void set_install_location(const char* value);
  void set_install_location(const char* value, size_t size);
  std::string* mutable_install_location();
  std::string* release_install_location();
  void set_allocated_install_location(std::string* install_location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_install_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_install_location(
      std::string* install_location);
  private:
  const std::string& _internal_install_location() const;
  void _internal_set_install_location(const std::string& value);
  std::string* _internal_mutable_install_location();
  public:

  // optional string magic_number = 4;
  bool has_magic_number() const;
  private:
  bool _internal_has_magic_number() const;
  public:
  void clear_magic_number();
  const std::string& magic_number() const;
  void set_magic_number(const std::string& value);
  void set_magic_number(std::string&& value);
  void set_magic_number(const char* value);
  void set_magic_number(const char* value, size_t size);
  std::string* mutable_magic_number();
  std::string* release_magic_number();
  void set_allocated_magic_number(std::string* magic_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_magic_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_magic_number(
      std::string* magic_number);
  private:
  const std::string& _internal_magic_number() const;
  void _internal_set_magic_number(const std::string& value);
  std::string* _internal_mutable_magic_number();
  public:

  // required .mozc.EngineReloadRequest.EngineType engine_type = 1;
  bool has_engine_type() const;
  private:
  bool _internal_has_engine_type() const;
  public:
  void clear_engine_type();
  ::mozc::EngineReloadRequest_EngineType engine_type() const;
  void set_engine_type(::mozc::EngineReloadRequest_EngineType value);
  private:
  ::mozc::EngineReloadRequest_EngineType _internal_engine_type() const;
  void _internal_set_engine_type(::mozc::EngineReloadRequest_EngineType value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.EngineReloadRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr install_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr magic_number_;
  int engine_type_;
  friend struct ::TableStruct_protocol_2fengine_5fbuilder_2eproto;
};
// -------------------------------------------------------------------

class EngineReloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mozc.EngineReloadResponse) */ {
 public:
  inline EngineReloadResponse() : EngineReloadResponse(nullptr) {};
  virtual ~EngineReloadResponse();

  EngineReloadResponse(const EngineReloadResponse& from);
  EngineReloadResponse(EngineReloadResponse&& from) noexcept
    : EngineReloadResponse() {
    *this = ::std::move(from);
  }

  inline EngineReloadResponse& operator=(const EngineReloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineReloadResponse& operator=(EngineReloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EngineReloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineReloadResponse* internal_default_instance() {
    return reinterpret_cast<const EngineReloadResponse*>(
               &_EngineReloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EngineReloadResponse& a, EngineReloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineReloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineReloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineReloadResponse* New() const final {
    return CreateMaybeMessage<EngineReloadResponse>(nullptr);
  }

  EngineReloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineReloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EngineReloadResponse& from);
  void MergeFrom(const EngineReloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineReloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozc.EngineReloadResponse";
  }
  protected:
  explicit EngineReloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2fengine_5fbuilder_2eproto);
    return ::descriptor_table_protocol_2fengine_5fbuilder_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EngineReloadResponse_Status Status;
  static constexpr Status ACCEPTED =
    EngineReloadResponse_Status_ACCEPTED;
  static constexpr Status RELOAD_READY =
    EngineReloadResponse_Status_RELOAD_READY;
  static constexpr Status RELOADED =
    EngineReloadResponse_Status_RELOADED;
  static constexpr Status ALREADY_RUNNING =
    EngineReloadResponse_Status_ALREADY_RUNNING;
  static constexpr Status ENGINE_VERSION_MISMATCH =
    EngineReloadResponse_Status_ENGINE_VERSION_MISMATCH;
  static constexpr Status DATA_MISSING =
    EngineReloadResponse_Status_DATA_MISSING;
  static constexpr Status DATA_BROKEN =
    EngineReloadResponse_Status_DATA_BROKEN;
  static constexpr Status MMAP_FAILURE =
    EngineReloadResponse_Status_MMAP_FAILURE;
  static constexpr Status INSTALL_FAILURE =
    EngineReloadResponse_Status_INSTALL_FAILURE;
  static constexpr Status UNKNOWN_ERROR =
    EngineReloadResponse_Status_UNKNOWN_ERROR;
  static inline bool Status_IsValid(int value) {
    return EngineReloadResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    EngineReloadResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    EngineReloadResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    EngineReloadResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return EngineReloadResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return EngineReloadResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return EngineReloadResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional .mozc.EngineReloadRequest request = 2;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::mozc::EngineReloadRequest& request() const;
  ::mozc::EngineReloadRequest* release_request();
  ::mozc::EngineReloadRequest* mutable_request();
  void set_allocated_request(::mozc::EngineReloadRequest* request);
  private:
  const ::mozc::EngineReloadRequest& _internal_request() const;
  ::mozc::EngineReloadRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::mozc::EngineReloadRequest* request);
  ::mozc::EngineReloadRequest* unsafe_arena_release_request();

  // required .mozc.EngineReloadResponse.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::mozc::EngineReloadResponse_Status status() const;
  void set_status(::mozc::EngineReloadResponse_Status value);
  private:
  ::mozc::EngineReloadResponse_Status _internal_status() const;
  void _internal_set_status(::mozc::EngineReloadResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:mozc.EngineReloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozc::EngineReloadRequest* request_;
  int status_;
  friend struct ::TableStruct_protocol_2fengine_5fbuilder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineReloadRequest

// required .mozc.EngineReloadRequest.EngineType engine_type = 1;
inline bool EngineReloadRequest::_internal_has_engine_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EngineReloadRequest::has_engine_type() const {
  return _internal_has_engine_type();
}
inline void EngineReloadRequest::clear_engine_type() {
  engine_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mozc::EngineReloadRequest_EngineType EngineReloadRequest::_internal_engine_type() const {
  return static_cast< ::mozc::EngineReloadRequest_EngineType >(engine_type_);
}
inline ::mozc::EngineReloadRequest_EngineType EngineReloadRequest::engine_type() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadRequest.engine_type)
  return _internal_engine_type();
}
inline void EngineReloadRequest::_internal_set_engine_type(::mozc::EngineReloadRequest_EngineType value) {
  assert(::mozc::EngineReloadRequest_EngineType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  engine_type_ = value;
}
inline void EngineReloadRequest::set_engine_type(::mozc::EngineReloadRequest_EngineType value) {
  _internal_set_engine_type(value);
  // @@protoc_insertion_point(field_set:mozc.EngineReloadRequest.engine_type)
}

// required string file_path = 2;
inline bool EngineReloadRequest::_internal_has_file_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EngineReloadRequest::has_file_path() const {
  return _internal_has_file_path();
}
inline void EngineReloadRequest::clear_file_path() {
  file_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EngineReloadRequest::file_path() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadRequest.file_path)
  return _internal_file_path();
}
inline void EngineReloadRequest::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:mozc.EngineReloadRequest.file_path)
}
inline std::string* EngineReloadRequest::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:mozc.EngineReloadRequest.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& EngineReloadRequest::_internal_file_path() const {
  return file_path_.Get();
}
inline void EngineReloadRequest::_internal_set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EngineReloadRequest::set_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.EngineReloadRequest.file_path)
}
inline void EngineReloadRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.EngineReloadRequest.file_path)
}
inline void EngineReloadRequest::set_file_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.EngineReloadRequest.file_path)
}
inline std::string* EngineReloadRequest::_internal_mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  return file_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EngineReloadRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:mozc.EngineReloadRequest.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngineReloadRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.EngineReloadRequest.file_path)
}
inline std::string* EngineReloadRequest::unsafe_arena_release_file_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.EngineReloadRequest.file_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return file_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EngineReloadRequest::unsafe_arena_set_allocated_file_path(
    std::string* file_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      file_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.EngineReloadRequest.file_path)
}

// optional string install_location = 3;
inline bool EngineReloadRequest::_internal_has_install_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EngineReloadRequest::has_install_location() const {
  return _internal_has_install_location();
}
inline void EngineReloadRequest::clear_install_location() {
  install_location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EngineReloadRequest::install_location() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadRequest.install_location)
  return _internal_install_location();
}
inline void EngineReloadRequest::set_install_location(const std::string& value) {
  _internal_set_install_location(value);
  // @@protoc_insertion_point(field_set:mozc.EngineReloadRequest.install_location)
}
inline std::string* EngineReloadRequest::mutable_install_location() {
  // @@protoc_insertion_point(field_mutable:mozc.EngineReloadRequest.install_location)
  return _internal_mutable_install_location();
}
inline const std::string& EngineReloadRequest::_internal_install_location() const {
  return install_location_.Get();
}
inline void EngineReloadRequest::_internal_set_install_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  install_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EngineReloadRequest::set_install_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  install_location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.EngineReloadRequest.install_location)
}
inline void EngineReloadRequest::set_install_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  install_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.EngineReloadRequest.install_location)
}
inline void EngineReloadRequest::set_install_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  install_location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.EngineReloadRequest.install_location)
}
inline std::string* EngineReloadRequest::_internal_mutable_install_location() {
  _has_bits_[0] |= 0x00000002u;
  return install_location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EngineReloadRequest::release_install_location() {
  // @@protoc_insertion_point(field_release:mozc.EngineReloadRequest.install_location)
  if (!_internal_has_install_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return install_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngineReloadRequest::set_allocated_install_location(std::string* install_location) {
  if (install_location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  install_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), install_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.EngineReloadRequest.install_location)
}
inline std::string* EngineReloadRequest::unsafe_arena_release_install_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.EngineReloadRequest.install_location)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return install_location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EngineReloadRequest::unsafe_arena_set_allocated_install_location(
    std::string* install_location) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (install_location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  install_location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      install_location, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.EngineReloadRequest.install_location)
}

// optional string magic_number = 4;
inline bool EngineReloadRequest::_internal_has_magic_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EngineReloadRequest::has_magic_number() const {
  return _internal_has_magic_number();
}
inline void EngineReloadRequest::clear_magic_number() {
  magic_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EngineReloadRequest::magic_number() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadRequest.magic_number)
  return _internal_magic_number();
}
inline void EngineReloadRequest::set_magic_number(const std::string& value) {
  _internal_set_magic_number(value);
  // @@protoc_insertion_point(field_set:mozc.EngineReloadRequest.magic_number)
}
inline std::string* EngineReloadRequest::mutable_magic_number() {
  // @@protoc_insertion_point(field_mutable:mozc.EngineReloadRequest.magic_number)
  return _internal_mutable_magic_number();
}
inline const std::string& EngineReloadRequest::_internal_magic_number() const {
  return magic_number_.Get();
}
inline void EngineReloadRequest::_internal_set_magic_number(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  magic_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EngineReloadRequest::set_magic_number(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  magic_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mozc.EngineReloadRequest.magic_number)
}
inline void EngineReloadRequest::set_magic_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  magic_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mozc.EngineReloadRequest.magic_number)
}
inline void EngineReloadRequest::set_magic_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  magic_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mozc.EngineReloadRequest.magic_number)
}
inline std::string* EngineReloadRequest::_internal_mutable_magic_number() {
  _has_bits_[0] |= 0x00000004u;
  return magic_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EngineReloadRequest::release_magic_number() {
  // @@protoc_insertion_point(field_release:mozc.EngineReloadRequest.magic_number)
  if (!_internal_has_magic_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return magic_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EngineReloadRequest::set_allocated_magic_number(std::string* magic_number) {
  if (magic_number != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  magic_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), magic_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mozc.EngineReloadRequest.magic_number)
}
inline std::string* EngineReloadRequest::unsafe_arena_release_magic_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mozc.EngineReloadRequest.magic_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return magic_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EngineReloadRequest::unsafe_arena_set_allocated_magic_number(
    std::string* magic_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (magic_number != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  magic_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      magic_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.EngineReloadRequest.magic_number)
}

// -------------------------------------------------------------------

// EngineReloadResponse

// required .mozc.EngineReloadResponse.Status status = 1;
inline bool EngineReloadResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EngineReloadResponse::has_status() const {
  return _internal_has_status();
}
inline void EngineReloadResponse::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mozc::EngineReloadResponse_Status EngineReloadResponse::_internal_status() const {
  return static_cast< ::mozc::EngineReloadResponse_Status >(status_);
}
inline ::mozc::EngineReloadResponse_Status EngineReloadResponse::status() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadResponse.status)
  return _internal_status();
}
inline void EngineReloadResponse::_internal_set_status(::mozc::EngineReloadResponse_Status value) {
  assert(::mozc::EngineReloadResponse_Status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void EngineReloadResponse::set_status(::mozc::EngineReloadResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mozc.EngineReloadResponse.status)
}

// optional .mozc.EngineReloadRequest request = 2;
inline bool EngineReloadResponse::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool EngineReloadResponse::has_request() const {
  return _internal_has_request();
}
inline void EngineReloadResponse::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozc::EngineReloadRequest& EngineReloadResponse::_internal_request() const {
  const ::mozc::EngineReloadRequest* p = request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozc::EngineReloadRequest*>(
      &::mozc::_EngineReloadRequest_default_instance_);
}
inline const ::mozc::EngineReloadRequest& EngineReloadResponse::request() const {
  // @@protoc_insertion_point(field_get:mozc.EngineReloadResponse.request)
  return _internal_request();
}
inline void EngineReloadResponse::unsafe_arena_set_allocated_request(
    ::mozc::EngineReloadRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mozc.EngineReloadResponse.request)
}
inline ::mozc::EngineReloadRequest* EngineReloadResponse::release_request() {
  auto temp = unsafe_arena_release_request();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mozc::EngineReloadRequest* EngineReloadResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:mozc.EngineReloadResponse.request)
  _has_bits_[0] &= ~0x00000001u;
  ::mozc::EngineReloadRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::mozc::EngineReloadRequest* EngineReloadResponse::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozc::EngineReloadRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::mozc::EngineReloadRequest* EngineReloadResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:mozc.EngineReloadResponse.request)
  return _internal_mutable_request();
}
inline void EngineReloadResponse::set_allocated_request(::mozc::EngineReloadRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:mozc.EngineReloadResponse.request)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mozc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozc::EngineReloadRequest_EngineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::EngineReloadRequest_EngineType>() {
  return ::mozc::EngineReloadRequest_EngineType_descriptor();
}
template <> struct is_proto_enum< ::mozc::EngineReloadResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mozc::EngineReloadResponse_Status>() {
  return ::mozc::EngineReloadResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2fengine_5fbuilder_2eproto
